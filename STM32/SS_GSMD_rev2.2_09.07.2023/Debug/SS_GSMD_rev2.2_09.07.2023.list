
SS_GSMD_rev2.2_09.07.2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006058  08006058  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08006058  08006058  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006058  08006058  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006058  08006058  00016058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800605c  0800605c  0001605c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08006060  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  2000006c  080060cc  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  080060cc  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000daa9  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002546  00000000  00000000  0002db81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e28  00000000  00000000  000300c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b19  00000000  00000000  00030ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ad6  00000000  00000000  00031a09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105d7  00000000  00000000  0004a4df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a3ca  00000000  00000000  0005aab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046d8  00000000  00000000  000e4e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e9558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005798 	.word	0x08005798

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08005798 	.word	0x08005798

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <replac_string>:
extern UART_HandleTypeDef huart2;


///////////////////////// Функция для замены смволов \r и \n на пробелы ////////////////////////////
void replac_string(char *src)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(!src) return;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d013      	beq.n	8000192 <replac_string+0x36>

	for(;*src; src++)
 800016a:	e00d      	b.n	8000188 <replac_string+0x2c>
	{
		if(*src == '\n' || *src == '\r') *src = ' ';
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b0a      	cmp	r3, #10
 8000172:	d003      	beq.n	800017c <replac_string+0x20>
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b0d      	cmp	r3, #13
 800017a:	d102      	bne.n	8000182 <replac_string+0x26>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2220      	movs	r2, #32
 8000180:	701a      	strb	r2, [r3, #0]
	for(;*src; src++)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	3301      	adds	r3, #1
 8000186:	607b      	str	r3, [r7, #4]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1ed      	bne.n	800016c <replac_string+0x10>
 8000190:	e000      	b.n	8000194 <replac_string+0x38>
	if(!src) return;
 8000192:	bf00      	nop
	}
}
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <set_comand>:



///////////////////////// Функция для отправки настроечных команд, в цикле лучше не использовать ////////////////////////////
void set_comand(char *buff)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b0b0      	sub	sp, #192	; 0xc0
 80001a0:	af02      	add	r7, sp, #8
 80001a2:	6078      	str	r0, [r7, #4]
	uint8_t count_err = 0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char str[SEND_STR_SIZE] = {0,};
 80001aa:	2300      	movs	r3, #0
 80001ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80001ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001b2:	223c      	movs	r2, #60	; 0x3c
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f004 fa0f 	bl	80045da <memset>
	snprintf(str, SEND_STR_SIZE, "%s\r\n", buff);
 80001bc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4ad4      	ldr	r2, [pc, #848]	; (8000514 <set_comand+0x378>)
 80001c4:	2140      	movs	r1, #64	; 0x40
 80001c6:	f004 f991 	bl	80044ec <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 80001ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001ce:	4618      	mov	r0, r3
 80001d0:	f7ff ffbc 	bl	800014c <strlen>
 80001d4:	4603      	mov	r3, r0
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	48cd      	ldr	r0, [pc, #820]	; (8000518 <set_comand+0x37c>)
 80001e2:	f003 fa73 	bl	80036cc <HAL_UART_Transmit>
	HAL_Delay(200);
 80001e6:	20c8      	movs	r0, #200	; 0xc8
 80001e8:	f001 ff8c 	bl	8002104 <HAL_Delay>

	memset(str, 0, SEND_STR_SIZE);
 80001ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001f0:	2240      	movs	r2, #64	; 0x40
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f004 f9f0 	bl	80045da <memset>

	for(uint8_t i = 0; i < 30; i++)
 80001fa:	2300      	movs	r3, #0
 80001fc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8000200:	e159      	b.n	80004b6 <set_comand+0x31a>
	{
		if(gsm_available()) //если модуль что-то прислал
 8000202:	f001 fe6b 	bl	8001edc <gsm_available>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	f000 814b 	beq.w	80004a4 <set_comand+0x308>
		{
			uint16_t i = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

			while(gsm_available())
 8000214:	e014      	b.n	8000240 <set_comand+0xa4>
			{
				str[i++] = gsm_read();
 8000216:	f001 fe7b 	bl	8001f10 <gsm_read>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	f8a7 20b4 	strh.w	r2, [r7, #180]	; 0xb4
 8000228:	b2ca      	uxtb	r2, r1
 800022a:	33b8      	adds	r3, #184	; 0xb8
 800022c:	443b      	add	r3, r7
 800022e:	f803 2c4c 	strb.w	r2, [r3, #-76]
				if(i > SEND_STR_SIZE - 1) break;
 8000232:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000236:	2b3f      	cmp	r3, #63	; 0x3f
 8000238:	d808      	bhi.n	800024c <set_comand+0xb0>
				HAL_Delay(1);
 800023a:	2001      	movs	r0, #1
 800023c:	f001 ff62 	bl	8002104 <HAL_Delay>
			while(gsm_available())
 8000240:	f001 fe4c 	bl	8001edc <gsm_available>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1e5      	bne.n	8000216 <set_comand+0x7a>
 800024a:	e000      	b.n	800024e <set_comand+0xb2>
				if(i > SEND_STR_SIZE - 1) break;
 800024c:	bf00      	nop
			}

			replac_string(str);
 800024e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ff82 	bl	800015c <replac_string>

			char *p = NULL;
 8000258:	2300      	movs	r3, #0
 800025a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			if((p = strstr(str, "+CPAS:")) != NULL)
 800025e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000262:	49ae      	ldr	r1, [pc, #696]	; (800051c <set_comand+0x380>)
 8000264:	4618      	mov	r0, r3
 8000266:	f004 fa29 	bl	80046bc <strstr>
 800026a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800026e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d031      	beq.n	80002da <set_comand+0x13e>
			{
				if(strstr(str, "0") == NULL)
 8000276:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800027a:	2130      	movs	r1, #48	; 0x30
 800027c:	4618      	mov	r0, r3
 800027e:	f004 f9b4 	bl	80045ea <strchr>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	f040 80e8 	bne.w	800045a <set_comand+0x2be>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 800028a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800028e:	f7ff ff5d 	bl	800014c <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29a      	uxth	r2, r3
 8000296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800029e:	48a0      	ldr	r0, [pc, #640]	; (8000520 <set_comand+0x384>)
 80002a0:	f003 fa14 	bl	80036cc <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CPAS not ready, must be '0'\n", strlen("\n+CPAS not ready, must be '0'\n"), 1000);
 80002a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a8:	221e      	movs	r2, #30
 80002aa:	499e      	ldr	r1, [pc, #632]	; (8000524 <set_comand+0x388>)
 80002ac:	489c      	ldr	r0, [pc, #624]	; (8000520 <set_comand+0x384>)
 80002ae:	f003 fa0d 	bl	80036cc <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
 80002b2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80002b6:	3301      	adds	r3, #1
 80002b8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
						HAL_GPIO_TogglePin(ERR_LED_GPIO_Port, ERR_LED_Pin);
 80002bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c0:	4899      	ldr	r0, [pc, #612]	; (8000528 <set_comand+0x38c>)
 80002c2:	f002 fab1 	bl	8002828 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f001 ff1c 	bl	8002104 <HAL_Delay>
						if(count_err > 49) HAL_NVIC_SystemReset();
 80002cc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80002d0:	2b31      	cmp	r3, #49	; 0x31
 80002d2:	d9ee      	bls.n	80002b2 <set_comand+0x116>
 80002d4:	f002 f851 	bl	800237a <HAL_NVIC_SystemReset>
						count_err++;
 80002d8:	e7eb      	b.n	80002b2 <set_comand+0x116>
					}
				}
			}
			else if((p = strstr(str, "+CREG:")) != NULL)
 80002da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002de:	4993      	ldr	r1, [pc, #588]	; (800052c <set_comand+0x390>)
 80002e0:	4618      	mov	r0, r3
 80002e2:	f004 f9eb 	bl	80046bc <strstr>
 80002e6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80002ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d031      	beq.n	8000356 <set_comand+0x1ba>
			{
				if(strstr(str, "0,1") == NULL)
 80002f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002f6:	498e      	ldr	r1, [pc, #568]	; (8000530 <set_comand+0x394>)
 80002f8:	4618      	mov	r0, r3
 80002fa:	f004 f9df 	bl	80046bc <strstr>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	f040 80aa 	bne.w	800045a <set_comand+0x2be>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 8000306:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800030a:	f7ff ff1f 	bl	800014c <strlen>
 800030e:	4603      	mov	r3, r0
 8000310:	b29a      	uxth	r2, r3
 8000312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000316:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800031a:	4881      	ldr	r0, [pc, #516]	; (8000520 <set_comand+0x384>)
 800031c:	f003 f9d6 	bl	80036cc <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CREG not ready, must be '0,1'\n", strlen("\n+CREG not ready, must be '0,1'\n"), 1000);
 8000320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000324:	2220      	movs	r2, #32
 8000326:	4983      	ldr	r1, [pc, #524]	; (8000534 <set_comand+0x398>)
 8000328:	487d      	ldr	r0, [pc, #500]	; (8000520 <set_comand+0x384>)
 800032a:	f003 f9cf 	bl	80036cc <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
 800032e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000332:	3301      	adds	r3, #1
 8000334:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
						HAL_GPIO_TogglePin(ERR_LED_GPIO_Port, ERR_LED_Pin);
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	487a      	ldr	r0, [pc, #488]	; (8000528 <set_comand+0x38c>)
 800033e:	f002 fa73 	bl	8002828 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8000342:	2064      	movs	r0, #100	; 0x64
 8000344:	f001 fede 	bl	8002104 <HAL_Delay>
						if(count_err > 49) HAL_NVIC_SystemReset();
 8000348:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800034c:	2b31      	cmp	r3, #49	; 0x31
 800034e:	d9ee      	bls.n	800032e <set_comand+0x192>
 8000350:	f002 f813 	bl	800237a <HAL_NVIC_SystemReset>
						count_err++;
 8000354:	e7eb      	b.n	800032e <set_comand+0x192>
					}
				}
			}

			else if((p = strstr(str, "+CSQ:")) != NULL) //esli stroka str soderjit stroku +CSQ:
 8000356:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800035a:	4977      	ldr	r1, [pc, #476]	; (8000538 <set_comand+0x39c>)
 800035c:	4618      	mov	r0, r3
 800035e:	f004 f9ad 	bl	80046bc <strstr>
 8000362:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8000366:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d02c      	beq.n	80003c8 <set_comand+0x22c>
			{
				p = strtok( str, "+CSQ: " ); //otkusivaem iz stroki str stroku +CSQ: i vozvrashaem ukozatel p
 800036e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000372:	4972      	ldr	r1, [pc, #456]	; (800053c <set_comand+0x3a0>)
 8000374:	4618      	mov	r0, r3
 8000376:	f004 f945 	bl	8004604 <strtok>
 800037a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				//uint8_t csq = strtod(str, NULL); // FUNKCIYA 13KB!!!!!!!!!!!!!!!
				uint8_t csq = atoi(p); //preobrazuem stroku v chislo
 800037e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000382:	f003 ff77 	bl	8004274 <atoi>
 8000386:	4603      	mov	r3, r0
 8000388:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
				uint8_t db = (115 - (csq*2)); //sozdaem peremennuyu db i perevodim chislo v dBi
 800038c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	b2db      	uxtb	r3, r3
 8000394:	f1c3 0373 	rsb	r3, r3, #115	; 0x73
 8000398:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
				snprintf(dbi, 7, "-%udBi", db); //pishem v masiv soobshenie
 800039c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80003a0:	4a67      	ldr	r2, [pc, #412]	; (8000540 <set_comand+0x3a4>)
 80003a2:	2107      	movs	r1, #7
 80003a4:	4867      	ldr	r0, [pc, #412]	; (8000544 <set_comand+0x3a8>)
 80003a6:	f004 f8a1 	bl	80044ec <sniprintf>
				uint8_t si = csq*3; //sozdaem peremennuyu si i perevodim chislo v procenti
 80003aa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80003ae:	461a      	mov	r2, r3
 80003b0:	0052      	lsls	r2, r2, #1
 80003b2:	4413      	add	r3, r2
 80003b4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
				snprintf(sig, 4, "%u", si); //pishem v masiv soobshenie
 80003b8:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80003bc:	4a62      	ldr	r2, [pc, #392]	; (8000548 <set_comand+0x3ac>)
 80003be:	2104      	movs	r1, #4
 80003c0:	4862      	ldr	r0, [pc, #392]	; (800054c <set_comand+0x3b0>)
 80003c2:	f004 f893 	bl	80044ec <sniprintf>
 80003c6:	e048      	b.n	800045a <set_comand+0x2be>
			}

			else if((p = strstr(str, "+CSPN:")) != NULL) //esli stroka str soderjit stroku +CSPN:
 80003c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003cc:	4960      	ldr	r1, [pc, #384]	; (8000550 <set_comand+0x3b4>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f004 f974 	bl	80046bc <strstr>
 80003d4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80003d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d015      	beq.n	800040c <set_comand+0x270>
			{
				p = strtok( str, " " ); // begin tokenizing sentence
 80003e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003e4:	495b      	ldr	r1, [pc, #364]	; (8000554 <set_comand+0x3b8>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 f90c 	bl	8004604 <strtok>
 80003ec:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				p = strtok( NULL, ":" ); // get next token
 80003f0:	4959      	ldr	r1, [pc, #356]	; (8000558 <set_comand+0x3bc>)
 80003f2:	2000      	movs	r0, #0
 80003f4:	f004 f906 	bl	8004604 <strtok>
 80003f8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				//p = strtok( NULL, "\"" ); // get next token
				snprintf(operator, 14, "%s", p); //pishem v masiv soobshenie
 80003fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000400:	4a56      	ldr	r2, [pc, #344]	; (800055c <set_comand+0x3c0>)
 8000402:	210e      	movs	r1, #14
 8000404:	4856      	ldr	r0, [pc, #344]	; (8000560 <set_comand+0x3c4>)
 8000406:	f004 f871 	bl	80044ec <sniprintf>
 800040a:	e026      	b.n	800045a <set_comand+0x2be>

			}

			else if((p = strstr(str, "+CBC:")) != NULL) //esli stroka str soderjit stroku +CBC:
 800040c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000410:	4954      	ldr	r1, [pc, #336]	; (8000564 <set_comand+0x3c8>)
 8000412:	4618      	mov	r0, r3
 8000414:	f004 f952 	bl	80046bc <strstr>
 8000418:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800041c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d01a      	beq.n	800045a <set_comand+0x2be>
			{
				p = strtok( str, " " ); //otkusivaem iz stroki str stroku   i vozvrashaem ukozatel p
 8000424:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000428:	494a      	ldr	r1, [pc, #296]	; (8000554 <set_comand+0x3b8>)
 800042a:	4618      	mov	r0, r3
 800042c:	f004 f8ea 	bl	8004604 <strtok>
 8000430:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				p = strtok( NULL, "," ); //otkusivaem iz stroki str stroku , i vozvrashaem ukozatel p
 8000434:	494c      	ldr	r1, [pc, #304]	; (8000568 <set_comand+0x3cc>)
 8000436:	2000      	movs	r0, #0
 8000438:	f004 f8e4 	bl	8004604 <strtok>
 800043c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				p = strtok( NULL, "," ); //otkusivaem iz stroki str stroku , i vozvrashaem ukozatel p
 8000440:	4949      	ldr	r1, [pc, #292]	; (8000568 <set_comand+0x3cc>)
 8000442:	2000      	movs	r0, #0
 8000444:	f004 f8de 	bl	8004604 <strtok>
 8000448:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				snprintf(bat, 4, "%s", p); //pishem v masiv soobshenie
 800044c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000450:	4a42      	ldr	r2, [pc, #264]	; (800055c <set_comand+0x3c0>)
 8000452:	2104      	movs	r1, #4
 8000454:	4845      	ldr	r0, [pc, #276]	; (800056c <set_comand+0x3d0>)
 8000456:	f004 f849 	bl	80044ec <sniprintf>





			p = 0; //zbrasivaem ukazatel
 800045a:	2300      	movs	r3, #0
 800045c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			char dbg_str[SEND_STR_SIZE + 32] = {0,};
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	225c      	movs	r2, #92	; 0x5c
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f004 f8b4 	bl	80045da <memset>
			snprintf(dbg_str, SEND_STR_SIZE + 32, "Set %s %s\n", buff, str);
 8000472:	f107 000c 	add.w	r0, r7, #12
 8000476:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a3c      	ldr	r2, [pc, #240]	; (8000570 <set_comand+0x3d4>)
 8000480:	2160      	movs	r1, #96	; 0x60
 8000482:	f004 f833 	bl	80044ec <sniprintf>
			HAL_UART_Transmit(DEBUG, (uint8_t*)dbg_str, strlen(dbg_str), 1000);
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fe5e 	bl	800014c <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	f107 010c 	add.w	r1, r7, #12
 8000498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049c:	4820      	ldr	r0, [pc, #128]	; (8000520 <set_comand+0x384>)
 800049e:	f003 f915 	bl	80036cc <HAL_UART_Transmit>

			return;
 80004a2:	e033      	b.n	800050c <set_comand+0x370>
		}

		HAL_Delay(500);
 80004a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a8:	f001 fe2c 	bl	8002104 <HAL_Delay>
	for(uint8_t i = 0; i < 30; i++)
 80004ac:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80004b0:	3301      	adds	r3, #1
 80004b2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80004b6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80004ba:	2b1d      	cmp	r3, #29
 80004bc:	f67f aea1 	bls.w	8000202 <set_comand+0x66>

	} // END for()

	HAL_UART_Transmit(DEBUG, (uint8_t*)"Not reply ", strlen("Not reply "), 1000);
 80004c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c4:	220a      	movs	r2, #10
 80004c6:	492b      	ldr	r1, [pc, #172]	; (8000574 <set_comand+0x3d8>)
 80004c8:	4815      	ldr	r0, [pc, #84]	; (8000520 <set_comand+0x384>)
 80004ca:	f003 f8ff 	bl	80036cc <HAL_UART_Transmit>
	HAL_UART_Transmit(DEBUG, (uint8_t*)buff, strlen(buff), 1000);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff fe3c 	bl	800014c <strlen>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	4810      	ldr	r0, [pc, #64]	; (8000520 <set_comand+0x384>)
 80004e0:	f003 f8f4 	bl	80036cc <HAL_UART_Transmit>

	while(1) // мигаем 5 секунд и ресетим плату
	{
		count_err++;
 80004e4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80004e8:	3301      	adds	r3, #1
 80004ea:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		HAL_GPIO_TogglePin(ERR_LED_GPIO_Port, ERR_LED_Pin);
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <set_comand+0x38c>)
 80004f4:	f002 f998 	bl	8002828 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f001 fe03 	bl	8002104 <HAL_Delay>
		if(count_err > 49) HAL_NVIC_SystemReset();
 80004fe:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000502:	2b31      	cmp	r3, #49	; 0x31
 8000504:	d9ee      	bls.n	80004e4 <set_comand+0x348>
 8000506:	f001 ff38 	bl	800237a <HAL_NVIC_SystemReset>
		count_err++;
 800050a:	e7eb      	b.n	80004e4 <set_comand+0x348>
	}

}
 800050c:	37b8      	adds	r7, #184	; 0xb8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	080057b0 	.word	0x080057b0
 8000518:	200000d8 	.word	0x200000d8
 800051c:	080057b8 	.word	0x080057b8
 8000520:	20000120 	.word	0x20000120
 8000524:	080057c0 	.word	0x080057c0
 8000528:	40011000 	.word	0x40011000
 800052c:	080057e0 	.word	0x080057e0
 8000530:	080057e8 	.word	0x080057e8
 8000534:	080057ec 	.word	0x080057ec
 8000538:	08005810 	.word	0x08005810
 800053c:	08005818 	.word	0x08005818
 8000540:	08005820 	.word	0x08005820
 8000544:	2000016c 	.word	0x2000016c
 8000548:	08005828 	.word	0x08005828
 800054c:	20000188 	.word	0x20000188
 8000550:	0800582c 	.word	0x0800582c
 8000554:	08005834 	.word	0x08005834
 8000558:	08005838 	.word	0x08005838
 800055c:	0800583c 	.word	0x0800583c
 8000560:	20000174 	.word	0x20000174
 8000564:	08005840 	.word	0x08005840
 8000568:	08005848 	.word	0x08005848
 800056c:	20000184 	.word	0x20000184
 8000570:	0800584c 	.word	0x0800584c
 8000574:	08005858 	.word	0x08005858

08000578 <balance>:

/////////////////////// Функции для использования в цикле //////////////////////////
void balance(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	char ATD[] = "ATD#100#;\r\n"; // баланс (бабло)
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <balance+0x30>)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	ca07      	ldmia	r2, {r0, r1, r2}
 8000584:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fdde 	bl	800014c <strlen>
 8000590:	4603      	mov	r3, r0
 8000592:	b29a      	uxth	r2, r3
 8000594:	1d39      	adds	r1, r7, #4
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <balance+0x34>)
 800059c:	f003 f896 	bl	80036cc <HAL_UART_Transmit>
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08005864 	.word	0x08005864
 80005ac:	200000d8 	.word	0x200000d8

080005b0 <disable_connection>:

void disable_connection(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	char ATH[] = "ATH\r\n"; // сбросить все соединения
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <disable_connection+0x34>)
 80005b8:	463b      	mov	r3, r7
 80005ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005be:	6018      	str	r0, [r3, #0]
 80005c0:	3304      	adds	r3, #4
 80005c2:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATH, strlen(ATH), 1000);
 80005c4:	463b      	mov	r3, r7
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fdc0 	bl	800014c <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4639      	mov	r1, r7
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <disable_connection+0x38>)
 80005d8:	f003 f878 	bl	80036cc <HAL_UART_Transmit>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08005870 	.word	0x08005870
 80005e8:	200000d8 	.word	0x200000d8

080005ec <call>:

void call(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
	char ATD[] = "ATD+79819555551;\r\n"; // позвонить
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <call+0x3c>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	682b      	ldr	r3, [r5, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	8022      	strh	r2, [r4, #0]
 8000602:	3402      	adds	r4, #2
 8000604:	0c1b      	lsrs	r3, r3, #16
 8000606:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fd9e 	bl	800014c <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <call+0x40>)
 800061c:	f003 f856 	bl	80036cc <HAL_UART_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	08005878 	.word	0x08005878
 800062c:	200000d8 	.word	0x200000d8

08000630 <get_date_time>:
	char ATA[] = "ATA\r\n"; // принять звонок
	HAL_UART_Transmit(GSM, (uint8_t*)ATA, strlen(ATA), 1000);
}

void get_date_time(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
	char ATCCLK[] = "AT+CCLK?\r\n"; // узнать дату/время
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <get_date_time+0x38>)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	ca07      	ldmia	r2, {r0, r1, r2}
 800063c:	c303      	stmia	r3!, {r0, r1}
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	3302      	adds	r3, #2
 8000642:	0c12      	lsrs	r2, r2, #16
 8000644:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATCCLK, strlen(ATCCLK), 1000);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fd7f 	bl	800014c <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	1d39      	adds	r1, r7, #4
 8000654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <get_date_time+0x3c>)
 800065a:	f003 f837 	bl	80036cc <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	08005894 	.word	0x08005894
 800066c:	200000d8 	.word	0x200000d8

08000670 <get_contact>:

void get_contact(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	; 0x58
 8000674:	af00      	add	r7, sp, #0
	for (counter = 1; counter <= 9; counter++)
 8000676:	4b5c      	ldr	r3, [pc, #368]	; (80007e8 <get_contact+0x178>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e0ac      	b.n	80007d8 <get_contact+0x168>
	    {
	        char ATCPBR[11];
	        snprintf(ATCPBR, 11, "AT+CPBR=%u\n", counter); //pishem v masiv soobshenie
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <get_contact+0x178>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000686:	4a59      	ldr	r2, [pc, #356]	; (80007ec <get_contact+0x17c>)
 8000688:	210b      	movs	r1, #11
 800068a:	f003 ff2f 	bl	80044ec <sniprintf>
	        HAL_UART_Transmit(GSM, (uint8_t*)ATCPBR, strlen(ATCPBR), 1000);
 800068e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fd5a 	bl	800014c <strlen>
 8000698:	4603      	mov	r3, r0
 800069a:	b29a      	uxth	r2, r3
 800069c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	4852      	ldr	r0, [pc, #328]	; (80007f0 <get_contact+0x180>)
 80006a6:	f003 f811 	bl	80036cc <HAL_UART_Transmit>
	        HAL_UART_Transmit(DEBUG, (uint8_t*)ATCPBR, strlen(ATCPBR), 1000);
 80006aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd4c 	bl	800014c <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	484c      	ldr	r0, [pc, #304]	; (80007f4 <get_contact+0x184>)
 80006c2:	f003 f803 	bl	80036cc <HAL_UART_Transmit>
	        HAL_Delay(200);
 80006c6:	20c8      	movs	r0, #200	; 0xc8
 80006c8:	f001 fd1c 	bl	8002104 <HAL_Delay>
	        char str[SEND_STR_SIZE] = {0,};
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	223c      	movs	r2, #60	; 0x3c
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f003 ff7e 	bl	80045da <memset>

	        for(uint8_t i = 0; i < 30; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80006e4:	e06e      	b.n	80007c4 <get_contact+0x154>
	        	{
	        		if(gsm_available()) //если модуль что-то прислал
 80006e6:	f001 fbf9 	bl	8001edc <gsm_available>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d064      	beq.n	80007ba <get_contact+0x14a>
	        		{
	        			uint16_t i = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54


	        			while(gsm_available())
 80006f6:	e014      	b.n	8000722 <get_contact+0xb2>
	        			{
	        				str[i++] = gsm_read();
 80006f8:	f001 fc0a 	bl	8001f10 <gsm_read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4619      	mov	r1, r3
 8000700:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	3358      	adds	r3, #88	; 0x58
 800070e:	443b      	add	r3, r7
 8000710:	f803 2c54 	strb.w	r2, [r3, #-84]
	        				if(i > SEND_STR_SIZE - 1) break;
 8000714:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000718:	2b3f      	cmp	r3, #63	; 0x3f
 800071a:	d808      	bhi.n	800072e <get_contact+0xbe>
	        				HAL_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f001 fcf1 	bl	8002104 <HAL_Delay>
	        			while(gsm_available())
 8000722:	f001 fbdb 	bl	8001edc <gsm_available>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1e5      	bne.n	80006f8 <get_contact+0x88>
 800072c:	e000      	b.n	8000730 <get_contact+0xc0>
	        				if(i > SEND_STR_SIZE - 1) break;
 800072e:	bf00      	nop
	        			}

	        			replac_string(str);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd12 	bl	800015c <replac_string>

	        			char *p = NULL;
 8000738:	2300      	movs	r3, #0
 800073a:	653b      	str	r3, [r7, #80]	; 0x50

			if((p = strstr(str, "+CPBR:")) != NULL) //esli stroka str soderjit stroku +CPBR:
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	492e      	ldr	r1, [pc, #184]	; (80007f8 <get_contact+0x188>)
 8000740:	4618      	mov	r0, r3
 8000742:	f003 ffbb 	bl	80046bc <strstr>
 8000746:	6538      	str	r0, [r7, #80]	; 0x50
 8000748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800074a:	2b00      	cmp	r3, #0
 800074c:	d032      	beq.n	80007b4 <get_contact+0x144>
			{
				p = strtok( str, "+CPBR: ," ); //otkusivaem iz stroki str stroku +CPBR: ,  i vozvrashaem ukozatel p
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	492a      	ldr	r1, [pc, #168]	; (80007fc <get_contact+0x18c>)
 8000752:	4618      	mov	r0, r3
 8000754:	f003 ff56 	bl	8004604 <strtok>
 8000758:	6538      	str	r0, [r7, #80]	; 0x50
				p = strtok( NULL, "\"" ); // get next token
 800075a:	4929      	ldr	r1, [pc, #164]	; (8000800 <get_contact+0x190>)
 800075c:	2000      	movs	r0, #0
 800075e:	f003 ff51 	bl	8004604 <strtok>
 8000762:	6538      	str	r0, [r7, #80]	; 0x50
				num = atoi( p );
 8000764:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000766:	f003 fd85 	bl	8004274 <atoi>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <get_contact+0x194>)
 8000770:	601a      	str	r2, [r3, #0]
				numbers[counter] = num; //nomera sim karte
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <get_contact+0x178>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <get_contact+0x194>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <get_contact+0x198>)
 800077e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				snprintf(ATCPBR, 11, "0%lu\n", num); //pishem v masiv soobshenie
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <get_contact+0x194>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800078a:	4a20      	ldr	r2, [pc, #128]	; (800080c <get_contact+0x19c>)
 800078c:	210b      	movs	r1, #11
 800078e:	f003 fead 	bl	80044ec <sniprintf>
				//snprintf(num, 10, "%s", p); //pishem v masiv soobshenie
				HAL_UART_Transmit(DEBUG, (uint8_t*)ATCPBR, strlen(ATCPBR), 1000);
 8000792:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fcd8 	bl	800014c <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <get_contact+0x184>)
 80007aa:	f002 ff8f 	bl	80036cc <HAL_UART_Transmit>
			else
			{
				p = 0; //zbrasivaem ukazatelp = 0; //zbrasivaem ukazatel
				return;
			}
			p = 0; //zbrasivaem ukazatel
 80007ae:	2300      	movs	r3, #0
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
 80007b2:	e002      	b.n	80007ba <get_contact+0x14a>
				p = 0; //zbrasivaem ukazatelp = 0; //zbrasivaem ukazatel
 80007b4:	2300      	movs	r3, #0
 80007b6:	653b      	str	r3, [r7, #80]	; 0x50
 80007b8:	e013      	b.n	80007e2 <get_contact+0x172>
	        for(uint8_t i = 0; i < 30; i++)
 80007ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007be:	3301      	adds	r3, #1
 80007c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80007c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007c8:	2b1d      	cmp	r3, #29
 80007ca:	d98c      	bls.n	80006e6 <get_contact+0x76>
	for (counter = 1; counter <= 9; counter++)
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <get_contact+0x178>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <get_contact+0x178>)
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <get_contact+0x178>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b09      	cmp	r3, #9
 80007de:	f67f af4e 	bls.w	800067e <get_contact+0xe>

	        		}
	        	}

	    }
}
 80007e2:	3758      	adds	r7, #88	; 0x58
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	080058a0 	.word	0x080058a0
 80007f0:	200000d8 	.word	0x200000d8
 80007f4:	20000120 	.word	0x20000120
 80007f8:	080058ac 	.word	0x080058ac
 80007fc:	080058b4 	.word	0x080058b4
 8000800:	080058c0 	.word	0x080058c0
 8000804:	20000088 	.word	0x20000088
 8000808:	2000018c 	.word	0x2000018c
 800080c:	080058c4 	.word	0x080058c4

08000810 <alarm>:

void alarm(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
	for (int z = 1; z <= 3; ++z)
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	e053      	b.n	80008c4 <alarm+0xb4>
		{
		for (int g = 1; g < counter; g++)
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	e047      	b.n	80008b2 <alarm+0xa2>
	    	{
				char ATD[18];
				snprintf(ATD, 18, "ATD0%lu;\n", numbers[g]); //pishem v masiv soobshenie
 8000822:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <alarm+0xc4>)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	1d38      	adds	r0, r7, #4
 800082c:	4a2a      	ldr	r2, [pc, #168]	; (80008d8 <alarm+0xc8>)
 800082e:	2112      	movs	r1, #18
 8000830:	f003 fe5c 	bl	80044ec <sniprintf>
				HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fc88 	bl	800014c <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	1d39      	adds	r1, r7, #4
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <alarm+0xcc>)
 8000848:	f002 ff40 	bl	80036cc <HAL_UART_Transmit>
				HAL_UART_Transmit(DEBUG, (uint8_t*)ATD, strlen(ATD), 1000);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fc7c 	bl	800014c <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29a      	uxth	r2, r3
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	4820      	ldr	r0, [pc, #128]	; (80008e0 <alarm+0xd0>)
 8000860:	f002 ff34 	bl	80036cc <HAL_UART_Transmit>
				LCD_invertText(true);
 8000864:	2001      	movs	r0, #1
 8000866:	f001 f83d 	bl	80018e4 <LCD_invertText>
				snprintf(ATD, 15, "DIAL 0%lu", numbers[g]); //pishem v masiv soobshenie
 800086a:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <alarm+0xc4>)
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	1d38      	adds	r0, r7, #4
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <alarm+0xd4>)
 8000876:	210f      	movs	r1, #15
 8000878:	f003 fe38 	bl	80044ec <sniprintf>
				LCD_print(ATD, 0, 2);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2202      	movs	r2, #2
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f888 	bl	8001998 <LCD_print>
				HAL_Delay(20000);
 8000888:	f644 6020 	movw	r0, #20000	; 0x4e20
 800088c:	f001 fc3a 	bl	8002104 <HAL_Delay>
				LCD_invertText(false);
 8000890:	2000      	movs	r0, #0
 8000892:	f001 f827 	bl	80018e4 <LCD_invertText>
				LCD_print("              ", 0, 2);
 8000896:	2202      	movs	r2, #2
 8000898:	2100      	movs	r1, #0
 800089a:	4813      	ldr	r0, [pc, #76]	; (80008e8 <alarm+0xd8>)
 800089c:	f001 f87c 	bl	8001998 <LCD_print>
				disable_connection();
 80008a0:	f7ff fe86 	bl	80005b0 <disable_connection>
				HAL_Delay(500);
 80008a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a8:	f001 fc2c 	bl	8002104 <HAL_Delay>
		for (int g = 1; g < counter; g++)
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	3301      	adds	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <alarm+0xdc>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	4293      	cmp	r3, r2
 80008bc:	dbb1      	blt.n	8000822 <alarm+0x12>
	for (int z = 1; z <= 3; ++z)
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3301      	adds	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	dda8      	ble.n	800081c <alarm+0xc>
	    	}
		}
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000018c 	.word	0x2000018c
 80008d8:	080058cc 	.word	0x080058cc
 80008dc:	200000d8 	.word	0x200000d8
 80008e0:	20000120 	.word	0x20000120
 80008e4:	080058d8 	.word	0x080058d8
 80008e8:	080058e4 	.word	0x080058e4
 80008ec:	2000008c 	.word	0x2000008c

080008f0 <welcome>:
	LCD_invertText(false);
	LCD_print("              ", 0, 2);
}

void welcome(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	// в Кубе настроить 5 пинов как Output, например PA3 - PA7 (можно переименовать их в соответствии с назначением)
  // и прописать в функции ниже - ПОРТ, П�?Н. Подключать в соответствии с названиями контактов экрана.
  LCD_setRST(GPIOB, RST_Pin);
 80008f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f8:	482d      	ldr	r0, [pc, #180]	; (80009b0 <welcome+0xc0>)
 80008fa:	f000 fed5 	bl	80016a8 <LCD_setRST>
  LCD_setCE(GPIOB, CE_Pin);
 80008fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000902:	482b      	ldr	r0, [pc, #172]	; (80009b0 <welcome+0xc0>)
 8000904:	f000 fee4 	bl	80016d0 <LCD_setCE>
  LCD_setDC(GPIOB, DC_Pin);
 8000908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090c:	4828      	ldr	r0, [pc, #160]	; (80009b0 <welcome+0xc0>)
 800090e:	f000 fef3 	bl	80016f8 <LCD_setDC>
  LCD_setDIN(GPIOB, DIN_Pin);
 8000912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000916:	4826      	ldr	r0, [pc, #152]	; (80009b0 <welcome+0xc0>)
 8000918:	f000 ff02 	bl	8001720 <LCD_setDIN>
  LCD_setCLK(GPIOB, CLK_Pin);
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	4823      	ldr	r0, [pc, #140]	; (80009b0 <welcome+0xc0>)
 8000922:	f000 ff11 	bl	8001748 <LCD_setCLK>

  LCD_init();
 8000926:	f000 ffa7 	bl	8001878 <LCD_init>

  //uint16_t i = 0;
  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000930:	4820      	ldr	r0, [pc, #128]	; (80009b4 <welcome+0xc4>)
 8000932:	f001 ff61 	bl	80027f8 <HAL_GPIO_WritePin>
  LCD_print("LABIRINT", 18, 2);
 8000936:	2202      	movs	r2, #2
 8000938:	2112      	movs	r1, #18
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <welcome+0xc8>)
 800093c:	f001 f82c 	bl	8001998 <LCD_print>
  LCD_print("ELECTRIC", 18, 3);
 8000940:	2203      	movs	r2, #3
 8000942:	2112      	movs	r1, #18
 8000944:	481d      	ldr	r0, [pc, #116]	; (80009bc <welcome+0xcc>)
 8000946:	f001 f827 	bl	8001998 <LCD_print>
  LCD_print("GSMD_MINI_v1.2", 0, 5);
 800094a:	2205      	movs	r2, #5
 800094c:	2100      	movs	r1, #0
 800094e:	481c      	ldr	r0, [pc, #112]	; (80009c0 <welcome+0xd0>)
 8000950:	f001 f822 	bl	8001998 <LCD_print>
  HAL_Delay(2000);
 8000954:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000958:	f001 fbd4 	bl	8002104 <HAL_Delay>
  LCD_clrScr(); // очистить экран
 800095c:	f001 f83c 	bl	80019d8 <LCD_clrScr>
  LCD_print("LABIRINT", 18, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2112      	movs	r1, #18
 8000964:	4814      	ldr	r0, [pc, #80]	; (80009b8 <welcome+0xc8>)
 8000966:	f001 f817 	bl	8001998 <LCD_print>
  LCD_print("ELECTRIC", 18, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	2112      	movs	r1, #18
 800096e:	4813      	ldr	r0, [pc, #76]	; (80009bc <welcome+0xcc>)
 8000970:	f001 f812 	bl	8001998 <LCD_print>
  LCD_invertText(true);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 ffb5 	bl	80018e4 <LCD_invertText>
  LCD_print("   starting   ", 0, 2);
 800097a:	2202      	movs	r2, #2
 800097c:	2100      	movs	r1, #0
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <welcome+0xd4>)
 8000980:	f001 f80a 	bl	8001998 <LCD_print>
  HAL_Delay(500);
 8000984:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000988:	f001 fbbc 	bl	8002104 <HAL_Delay>
  LCD_print("   power on   ", 0, 2);
 800098c:	2202      	movs	r2, #2
 800098e:	2100      	movs	r1, #0
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <welcome+0xd8>)
 8000992:	f001 f801 	bl	8001998 <LCD_print>
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <welcome+0xdc>)
 800099e:	f001 ff2b 	bl	80027f8 <HAL_GPIO_WritePin>
  HAL_Delay(30000); // задержка чтоб модем успел раздуплиться, если его включение происходит вместе с включением МК
 80009a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80009a6:	f001 fbad 	bl	8002104 <HAL_Delay>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	40011000 	.word	0x40011000
 80009b8:	08005944 	.word	0x08005944
 80009bc:	08005950 	.word	0x08005950
 80009c0:	0800595c 	.word	0x0800595c
 80009c4:	0800596c 	.word	0x0800596c
 80009c8:	0800597c 	.word	0x0800597c
 80009cc:	40010800 	.word	0x40010800

080009d0 <starting>:

void starting(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	chek_speed(); // проверка и установка скорости 19200, нужна один раз
 80009d4:	f000 f8b4 	bl	8000b40 <chek_speed>
  LCD_print(" speed  check ", 0, 2);
 80009d8:	2202      	movs	r2, #2
 80009da:	2100      	movs	r1, #0
 80009dc:	4827      	ldr	r0, [pc, #156]	; (8000a7c <starting+0xac>)
 80009de:	f000 ffdb 	bl	8001998 <LCD_print>
  HAL_Delay(500);
 80009e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e6:	f001 fb8d 	bl	8002104 <HAL_Delay>
  ////////////////// настройка модема ///////////////////
  LCD_print(" status check ", 0, 2);
 80009ea:	2202      	movs	r2, #2
 80009ec:	2100      	movs	r1, #0
 80009ee:	4824      	ldr	r0, [pc, #144]	; (8000a80 <starting+0xb0>)
 80009f0:	f000 ffd2 	bl	8001998 <LCD_print>
  HAL_Delay(500);
 80009f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f8:	f001 fb84 	bl	8002104 <HAL_Delay>
  set_comand(ATCPAS);  // проверка статуса модема
 80009fc:	4821      	ldr	r0, [pc, #132]	; (8000a84 <starting+0xb4>)
 80009fe:	f7ff fbcd 	bl	800019c <set_comand>
  LCD_print("registr  check", 0, 2);
 8000a02:	2202      	movs	r2, #2
 8000a04:	2100      	movs	r1, #0
 8000a06:	4820      	ldr	r0, [pc, #128]	; (8000a88 <starting+0xb8>)
 8000a08:	f000 ffc6 	bl	8001998 <LCD_print>
  HAL_Delay(500);
 8000a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a10:	f001 fb78 	bl	8002104 <HAL_Delay>
  set_comand(ATCREG);  // проверка регистрации в сети - должен вернуть  +CREG: 0,1
 8000a14:	481d      	ldr	r0, [pc, #116]	; (8000a8c <starting+0xbc>)
 8000a16:	f7ff fbc1 	bl	800019c <set_comand>
  LCD_print("   loading    ", 0, 2);
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <starting+0xc0>)
 8000a20:	f000 ffba 	bl	8001998 <LCD_print>
  HAL_Delay(500);
 8000a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a28:	f001 fb6c 	bl	8002104 <HAL_Delay>
  set_comand(ATCLIP1); // включить АОН
 8000a2c:	4819      	ldr	r0, [pc, #100]	; (8000a94 <starting+0xc4>)
 8000a2e:	f7ff fbb5 	bl	800019c <set_comand>
  set_comand(ATE);     // отключить «эхо»
 8000a32:	4819      	ldr	r0, [pc, #100]	; (8000a98 <starting+0xc8>)
 8000a34:	f7ff fbb2 	bl	800019c <set_comand>
  set_comand(ATS);     // поднимать трубку только "вручную"
 8000a38:	4818      	ldr	r0, [pc, #96]	; (8000a9c <starting+0xcc>)
 8000a3a:	f7ff fbaf 	bl	800019c <set_comand>
  set_comand(ATDDET);  // включить DTMF
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <starting+0xd0>)
 8000a40:	f7ff fbac 	bl	800019c <set_comand>
  //set_comand(ATCCLKK); // установить дату/время

  /////////////////// настройки для работы с sms ////////////////
  set_comand(ATCMGF);    // устанавливает текстовый режим смс-сообщения
 8000a44:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <starting+0xd4>)
 8000a46:	f7ff fba9 	bl	800019c <set_comand>
  set_comand(ATCPBS);    // открывает доступ к данным телефонной книги SIM-карты
 8000a4a:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <starting+0xd8>)
 8000a4c:	f7ff fba6 	bl	800019c <set_comand>
  set_comand(ATCSCS);    // кодировка текста - GSM
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <starting+0xdc>)
 8000a52:	f7ff fba3 	bl	800019c <set_comand>
  set_comand(ATCNMI);    // настройка вывода смс в консоль
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <starting+0xe0>)
 8000a58:	f7ff fba0 	bl	800019c <set_comand>

  //////////////////// различная инфа /////////////////////
  set_comand(ATIPR);       // скорость usart'a модема
 8000a5c:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <starting+0xe4>)
 8000a5e:	f7ff fb9d 	bl	800019c <set_comand>
  set_comand(ATI);         // название и версия модуля
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <starting+0xe8>)
 8000a64:	f7ff fb9a 	bl	800019c <set_comand>
  set_comand(ATCGSN);      // считывание IMEI из EEPROM
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <starting+0xec>)
 8000a6a:	f7ff fb97 	bl	800019c <set_comand>
  set_comand(ATCSPN);      // оператор сети
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <starting+0xf0>)
 8000a70:	f7ff fb94 	bl	800019c <set_comand>


  get_contact();
 8000a74:	f7ff fdfc 	bl	8000670 <get_contact>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	0800598c 	.word	0x0800598c
 8000a80:	0800599c 	.word	0x0800599c
 8000a84:	080059ac 	.word	0x080059ac
 8000a88:	080059b4 	.word	0x080059b4
 8000a8c:	080059c4 	.word	0x080059c4
 8000a90:	080059d0 	.word	0x080059d0
 8000a94:	080059e0 	.word	0x080059e0
 8000a98:	080059ec 	.word	0x080059ec
 8000a9c:	080059f4 	.word	0x080059f4
 8000aa0:	080059fc 	.word	0x080059fc
 8000aa4:	08005a08 	.word	0x08005a08
 8000aa8:	08005a14 	.word	0x08005a14
 8000aac:	08005a24 	.word	0x08005a24
 8000ab0:	08005a34 	.word	0x08005a34
 8000ab4:	08005a48 	.word	0x08005a48
 8000ab8:	08005a50 	.word	0x08005a50
 8000abc:	08005a54 	.word	0x08005a54
 8000ac0:	08005a5c 	.word	0x08005a5c

08000ac4 <clear_string>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/////////////////// удалить символы \r и \n из строки //////////////////////
static void clear_string(char *src)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d02f      	beq.n	8000b36 <clear_string+0x72>
	uint8_t i = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e022      	b.n	8000b26 <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d80b      	bhi.n	8000afe <clear_string+0x3a>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b0a      	cmp	r3, #10
 8000aec:	d003      	beq.n	8000af6 <clear_string+0x32>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b0d      	cmp	r3, #13
 8000af4:	d103      	bne.n	8000afe <clear_string+0x3a>
		{
			i++;
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	3301      	adds	r3, #1
 8000afa:	72fb      	strb	r3, [r7, #11]
			continue;
 8000afc:	e010      	b.n	8000b20 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b0a      	cmp	r3, #10
 8000b04:	d003      	beq.n	8000b0e <clear_string+0x4a>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b0d      	cmp	r3, #13
 8000b0c:	d102      	bne.n	8000b14 <clear_string+0x50>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2220      	movs	r2, #32
 8000b12:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60fa      	str	r2, [r7, #12]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1d8      	bne.n	8000ae0 <clear_string+0x1c>
	}

	*dst = 0;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e000      	b.n	8000b38 <clear_string+0x74>
	if(!src) return;
 8000b36:	bf00      	nop
}
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <chek_speed>:
	}
}

//////////////// проверка и установка скорости 19200, нужна один раз /////////////////
void chek_speed(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b098      	sub	sp, #96	; 0x60
 8000b44:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i < 7; i++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000b4c:	e0c6      	b.n	8000cdc <chek_speed+0x19c>
  {
	  uint32_t sp = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(i == 0) sp = 2400;
 8000b52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d103      	bne.n	8000b62 <chek_speed+0x22>
 8000b5a:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000b5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b60:	e02e      	b.n	8000bc0 <chek_speed+0x80>
	  else if(i == 1) sp = 4800;
 8000b62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d103      	bne.n	8000b72 <chek_speed+0x32>
 8000b6a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8000b6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b70:	e026      	b.n	8000bc0 <chek_speed+0x80>
	  else if(i == 2) sp = 9600;
 8000b72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d103      	bne.n	8000b82 <chek_speed+0x42>
 8000b7a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000b7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b80:	e01e      	b.n	8000bc0 <chek_speed+0x80>
	  else if(i == 3) sp = 19200;
 8000b82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b86:	2b03      	cmp	r3, #3
 8000b88:	d103      	bne.n	8000b92 <chek_speed+0x52>
 8000b8a:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000b8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b90:	e016      	b.n	8000bc0 <chek_speed+0x80>
	  else if(i == 4) sp = 38400;
 8000b92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	d103      	bne.n	8000ba2 <chek_speed+0x62>
 8000b9a:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ba0:	e00e      	b.n	8000bc0 <chek_speed+0x80>
	  else if(i == 5) sp = 57600;
 8000ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ba6:	2b05      	cmp	r3, #5
 8000ba8:	d103      	bne.n	8000bb2 <chek_speed+0x72>
 8000baa:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bb0:	e006      	b.n	8000bc0 <chek_speed+0x80>
	  else if(i == 6) sp = 115200;
 8000bb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d102      	bne.n	8000bc0 <chek_speed+0x80>
 8000bba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000bbe:	65bb      	str	r3, [r7, #88]	; 0x58

	  huart1.Instance = USART1;
 8000bc0:	4b4b      	ldr	r3, [pc, #300]	; (8000cf0 <chek_speed+0x1b0>)
 8000bc2:	4a4c      	ldr	r2, [pc, #304]	; (8000cf4 <chek_speed+0x1b4>)
 8000bc4:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = sp;
 8000bc6:	4a4a      	ldr	r2, [pc, #296]	; (8000cf0 <chek_speed+0x1b0>)
 8000bc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bca:	6053      	str	r3, [r2, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bcc:	4b48      	ldr	r3, [pc, #288]	; (8000cf0 <chek_speed+0x1b0>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <chek_speed+0x1b0>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd8:	4b45      	ldr	r3, [pc, #276]	; (8000cf0 <chek_speed+0x1b0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bde:	4b44      	ldr	r3, [pc, #272]	; (8000cf0 <chek_speed+0x1b0>)
 8000be0:	220c      	movs	r2, #12
 8000be2:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be4:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <chek_speed+0x1b0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bea:	4b41      	ldr	r3, [pc, #260]	; (8000cf0 <chek_speed+0x1b0>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	61da      	str	r2, [r3, #28]

	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bf0:	483f      	ldr	r0, [pc, #252]	; (8000cf0 <chek_speed+0x1b0>)
 8000bf2:	f002 fd1b 	bl	800362c <HAL_UART_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <chek_speed+0xc0>
	  {
		  Error_Handler();
 8000bfc:	f000 fd4e 	bl	800169c <Error_Handler>
	  }

	  char str[16] = {0,};
 8000c00:	2300      	movs	r3, #0
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
 8000c04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
	  HAL_UART_Transmit(GSM, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 1000);
 8000c10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c14:	2204      	movs	r2, #4
 8000c16:	4938      	ldr	r1, [pc, #224]	; (8000cf8 <chek_speed+0x1b8>)
 8000c18:	4835      	ldr	r0, [pc, #212]	; (8000cf0 <chek_speed+0x1b0>)
 8000c1a:	f002 fd57 	bl	80036cc <HAL_UART_Transmit>
	  HAL_Delay(300);
 8000c1e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c22:	f001 fa6f 	bl	8002104 <HAL_Delay>

	  if(gsm_available()) //если модуль что-то прислал
 8000c26:	f001 f959 	bl	8001edc <gsm_available>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d050      	beq.n	8000cd2 <chek_speed+0x192>
	  {
		  uint16_t i = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

		  while(gsm_available())
 8000c36:	e014      	b.n	8000c62 <chek_speed+0x122>
		  {
			  str[i++] = gsm_read();
 8000c38:	f001 f96a 	bl	8001f10 <gsm_read>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8000c4a:	b2ca      	uxtb	r2, r1
 8000c4c:	3360      	adds	r3, #96	; 0x60
 8000c4e:	443b      	add	r3, r7
 8000c50:	f803 2c1c 	strb.w	r2, [r3, #-28]
			  if(i > 15) break;
 8000c54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d808      	bhi.n	8000c6e <chek_speed+0x12e>
			  HAL_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f001 fa51 	bl	8002104 <HAL_Delay>
		  while(gsm_available())
 8000c62:	f001 f93b 	bl	8001edc <gsm_available>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e5      	bne.n	8000c38 <chek_speed+0xf8>
 8000c6c:	e000      	b.n	8000c70 <chek_speed+0x130>
			  if(i > 15) break;
 8000c6e:	bf00      	nop
		  }

		  if(strstr(str, "OK") != NULL)
 8000c70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c74:	4921      	ldr	r1, [pc, #132]	; (8000cfc <chek_speed+0x1bc>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f003 fd20 	bl	80046bc <strstr>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d027      	beq.n	8000cd2 <chek_speed+0x192>
		  {
			  char buf[64] = {0,};
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	223c      	movs	r2, #60	; 0x3c
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f003 fca3 	bl	80045da <memset>
			  snprintf(buf, 64, "Uart modem was %lu, switched to 57600\n", huart1.Init.BaudRate);
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <chek_speed+0x1b0>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	1d38      	adds	r0, r7, #4
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <chek_speed+0x1c0>)
 8000c9c:	2140      	movs	r1, #64	; 0x40
 8000c9e:	f003 fc25 	bl	80044ec <sniprintf>
			  HAL_UART_Transmit(DEBUG, (uint8_t*)buf, strlen(buf), 100);
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff fa51 	bl	800014c <strlen>
 8000caa:	4603      	mov	r3, r0
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	1d39      	adds	r1, r7, #4
 8000cb0:	2364      	movs	r3, #100	; 0x64
 8000cb2:	4814      	ldr	r0, [pc, #80]	; (8000d04 <chek_speed+0x1c4>)
 8000cb4:	f002 fd0a 	bl	80036cc <HAL_UART_Transmit>
			  HAL_UART_Transmit(GSM, (uint8_t*)"AT+IPR=57600\r\n", strlen("AT+IPR=57600\r\n"), 1000);
 8000cb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cbc:	220e      	movs	r2, #14
 8000cbe:	4912      	ldr	r1, [pc, #72]	; (8000d08 <chek_speed+0x1c8>)
 8000cc0:	480b      	ldr	r0, [pc, #44]	; (8000cf0 <chek_speed+0x1b0>)
 8000cc2:	f002 fd03 	bl	80036cc <HAL_UART_Transmit>
			  HAL_Delay(250);
 8000cc6:	20fa      	movs	r0, #250	; 0xfa
 8000cc8:	f001 fa1c 	bl	8002104 <HAL_Delay>
			  MX_USART1_UART_Init();
 8000ccc:	f000 fc0c 	bl	80014e8 <MX_USART1_UART_Init>
			  break;
 8000cd0:	e00a      	b.n	8000ce8 <chek_speed+0x1a8>
  for(uint8_t i = 0; i < 7; i++)
 8000cd2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000cdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ce0:	2b06      	cmp	r3, #6
 8000ce2:	f67f af34 	bls.w	8000b4e <chek_speed+0xe>
		  }
	  }
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	bf00      	nop
 8000cea:	3760      	adds	r7, #96	; 0x60
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	200000d8 	.word	0x200000d8
 8000cf4:	40013800 	.word	0x40013800
 8000cf8:	08005a68 	.word	0x08005a68
 8000cfc:	08005a70 	.word	0x08005a70
 8000d00:	08005a74 	.word	0x08005a74
 8000d04:	20000120 	.word	0x20000120
 8000d08:	08005a9c 	.word	0x08005a9c

08000d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0ae      	sub	sp, #184	; 0xb8
 8000d10:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d12:	f001 f995 	bl	8002040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d16:	f000 fb4f 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1a:	f000 fc39 	bl	8001590 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d1e:	f000 fb91 	bl	8001444 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000d22:	f000 fbe1 	bl	80014e8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d26:	f000 fc09 	bl	800153c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  welcome();
 8000d2a:	f7ff fde1 	bl	80008f0 <welcome>


  __HAL_UART_ENABLE_IT(GSM, UART_IT_RXNE);
 8000d2e:	4bab      	ldr	r3, [pc, #684]	; (8000fdc <main+0x2d0>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	4ba9      	ldr	r3, [pc, #676]	; (8000fdc <main+0x2d0>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f042 0220 	orr.w	r2, r2, #32
 8000d3c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(DEBUG, UART_IT_RXNE);
 8000d3e:	4ba8      	ldr	r3, [pc, #672]	; (8000fe0 <main+0x2d4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68da      	ldr	r2, [r3, #12]
 8000d44:	4ba6      	ldr	r3, [pc, #664]	; (8000fe0 <main+0x2d4>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f042 0220 	orr.w	r2, r2, #32
 8000d4c:	60da      	str	r2, [r3, #12]

  starting();
 8000d4e:	f7ff fe3f 	bl	80009d0 <starting>





  char buf[GSM_RX_BUFFER_SIZE] = {0,};
 8000d52:	2300      	movs	r3, #0
 8000d54:	663b      	str	r3, [r7, #96]	; 0x60
 8000d56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d5a:	223c      	movs	r2, #60	; 0x3c
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f003 fc3b 	bl	80045da <memset>
  char str[GSM_RX_BUFFER_SIZE] = {0,};
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	223c      	movs	r2, #60	; 0x3c
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f003 fc32 	bl	80045da <memset>


  for (int var = 0; var < 10; ++var)
 8000d76:	2300      	movs	r3, #0
 8000d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000d7c:	e039      	b.n	8000df2 <main+0xe6>
  {
		if(numbers[var] != 0)
 8000d7e:	4a99      	ldr	r2, [pc, #612]	; (8000fe4 <main+0x2d8>)
 8000d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d02d      	beq.n	8000de8 <main+0xdc>
		{
		snprintf(str, 15, "Num%i 0%lu", var, numbers[var]);
 8000d8c:	4a95      	ldr	r2, [pc, #596]	; (8000fe4 <main+0x2d8>)
 8000d8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d96:	f107 0020 	add.w	r0, r7, #32
 8000d9a:	9300      	str	r3, [sp, #0]
 8000d9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000da0:	4a91      	ldr	r2, [pc, #580]	; (8000fe8 <main+0x2dc>)
 8000da2:	210f      	movs	r1, #15
 8000da4:	f003 fba2 	bl	80044ec <sniprintf>
		HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 8000da8:	f107 0320 	add.w	r3, r7, #32
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff f9cd 	bl	800014c <strlen>
 8000db2:	4603      	mov	r3, r0
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	f107 0120 	add.w	r1, r7, #32
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	4888      	ldr	r0, [pc, #544]	; (8000fe0 <main+0x2d4>)
 8000dc0:	f002 fc84 	bl	80036cc <HAL_UART_Transmit>
		HAL_UART_Transmit(DEBUG, (uint8_t*)"\n", strlen("\n"), 1000);
 8000dc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc8:	2201      	movs	r2, #1
 8000dca:	4988      	ldr	r1, [pc, #544]	; (8000fec <main+0x2e0>)
 8000dcc:	4884      	ldr	r0, [pc, #528]	; (8000fe0 <main+0x2d4>)
 8000dce:	f002 fc7d 	bl	80036cc <HAL_UART_Transmit>
		LCD_print(str, 0, 2);
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 fddc 	bl	8001998 <LCD_print>
		HAL_Delay(1000);
 8000de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de4:	f001 f98e 	bl	8002104 <HAL_Delay>
  for (int var = 0; var < 10; ++var)
 8000de8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dec:	3301      	adds	r3, #1
 8000dee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000df2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000df6:	2b09      	cmp	r3, #9
 8000df8:	ddc1      	ble.n	8000d7e <main+0x72>
		}
  }
  LCD_clrScr(); // очистить экран
 8000dfa:	f000 fded 	bl	80019d8 <LCD_clrScr>
  LCD_invertText(false);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f000 fd70 	bl	80018e4 <LCD_invertText>
  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e0a:	4879      	ldr	r0, [pc, #484]	; (8000ff0 <main+0x2e4>)
 8000e0c:	f001 fcf4 	bl	80027f8 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim1); // запуск таймера
 8000e10:	4878      	ldr	r0, [pc, #480]	; (8000ff4 <main+0x2e8>)
 8000e12:	f002 f983 	bl	800311c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(flag_alarm == 1)
 8000e16:	4b78      	ldr	r3, [pc, #480]	; (8000ff8 <main+0x2ec>)
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d116      	bne.n	8000e4e <main+0x142>
	  {
		  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);
 8000e20:	2201      	movs	r2, #1
 8000e22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e26:	4872      	ldr	r0, [pc, #456]	; (8000ff0 <main+0x2e4>)
 8000e28:	f001 fce6 	bl	80027f8 <HAL_GPIO_WritePin>
		  HAL_TIM_Base_Stop_IT(&htim1); // остановка таймера
 8000e2c:	4871      	ldr	r0, [pc, #452]	; (8000ff4 <main+0x2e8>)
 8000e2e:	f002 f9c1 	bl	80031b4 <HAL_TIM_Base_Stop_IT>
		  alarm();
 8000e32:	f7ff fced 	bl	8000810 <alarm>
		  flag_alarm = 0;
 8000e36:	4b70      	ldr	r3, [pc, #448]	; (8000ff8 <main+0x2ec>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim1); // запуск таймера
 8000e3c:	486d      	ldr	r0, [pc, #436]	; (8000ff4 <main+0x2e8>)
 8000e3e:	f002 f96d 	bl	800311c <HAL_TIM_Base_Start_IT>
		  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e48:	4869      	ldr	r0, [pc, #420]	; (8000ff0 <main+0x2e4>)
 8000e4a:	f001 fcd5 	bl	80027f8 <HAL_GPIO_WritePin>
	  }

		if(flag_signal == 1)
 8000e4e:	4b6b      	ldr	r3, [pc, #428]	; (8000ffc <main+0x2f0>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	f040 808e 	bne.w	8000f76 <main+0x26a>
		{
			flag_signal = 0;
 8000e5a:	4b68      	ldr	r3, [pc, #416]	; (8000ffc <main+0x2f0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
			LCD_clrScr(); // очистить экран
 8000e60:	f000 fdba 	bl	80019d8 <LCD_clrScr>
			HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e6a:	4861      	ldr	r0, [pc, #388]	; (8000ff0 <main+0x2e4>)
 8000e6c:	f001 fcc4 	bl	80027f8 <HAL_GPIO_WritePin>
			set_comand(ATCSQ); // уровень сигнала. Может быть в диапазоне 0..31, чем больше тем лучше. 99 значит отсутствие сигнала.
 8000e70:	4863      	ldr	r0, [pc, #396]	; (8001000 <main+0x2f4>)
 8000e72:	f7ff f993 	bl	800019c <set_comand>
			set_comand(ATCBC); // // naprijenie pitaniya
 8000e76:	4863      	ldr	r0, [pc, #396]	; (8001004 <main+0x2f8>)
 8000e78:	f7ff f990 	bl	800019c <set_comand>
			LCD_print("LABIRINT", 18, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2112      	movs	r1, #18
 8000e80:	4861      	ldr	r0, [pc, #388]	; (8001008 <main+0x2fc>)
 8000e82:	f000 fd89 	bl	8001998 <LCD_print>
			LCD_print("ELECTRIC", 18, 1);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2112      	movs	r1, #18
 8000e8a:	4860      	ldr	r0, [pc, #384]	; (800100c <main+0x300>)
 8000e8c:	f000 fd84 	bl	8001998 <LCD_print>
			LCD_print(operator, 0, 3); //vivodim na ekran soobshenie iz masiva operator po ukazannim koordinatam
 8000e90:	2203      	movs	r2, #3
 8000e92:	2100      	movs	r1, #0
 8000e94:	485e      	ldr	r0, [pc, #376]	; (8001010 <main+0x304>)
 8000e96:	f000 fd7f 	bl	8001998 <LCD_print>
			LCD_print("NET          %", 0, 4);
 8000e9a:	2204      	movs	r2, #4
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	485d      	ldr	r0, [pc, #372]	; (8001014 <main+0x308>)
 8000ea0:	f000 fd7a 	bl	8001998 <LCD_print>
			LCD_print(sig, 60, 4); //vivodim na ekran soobshenie iz masiva dbi po ukazannim koordinatam
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	213c      	movs	r1, #60	; 0x3c
 8000ea8:	485b      	ldr	r0, [pc, #364]	; (8001018 <main+0x30c>)
 8000eaa:	f000 fd75 	bl	8001998 <LCD_print>
			LCD_print("BAT          %", 0, 5);
 8000eae:	2205      	movs	r2, #5
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	485a      	ldr	r0, [pc, #360]	; (800101c <main+0x310>)
 8000eb4:	f000 fd70 	bl	8001998 <LCD_print>
			LCD_print(bat, 60, 5);
 8000eb8:	2205      	movs	r2, #5
 8000eba:	213c      	movs	r1, #60	; 0x3c
 8000ebc:	4858      	ldr	r0, [pc, #352]	; (8001020 <main+0x314>)
 8000ebe:	f000 fd6b 	bl	8001998 <LCD_print>

			status_counter--;
 8000ec2:	4b58      	ldr	r3, [pc, #352]	; (8001024 <main+0x318>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b55      	ldr	r3, [pc, #340]	; (8001024 <main+0x318>)
 8000ece:	701a      	strb	r2, [r3, #0]
			if(status_counter == 0)
 8000ed0:	4b54      	ldr	r3, [pc, #336]	; (8001024 <main+0x318>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d147      	bne.n	8000f6a <main+0x25e>
			{
				status_counter = 10;
 8000eda:	4b52      	ldr	r3, [pc, #328]	; (8001024 <main+0x318>)
 8000edc:	220a      	movs	r2, #10
 8000ede:	701a      	strb	r2, [r3, #0]
				LCD_invertText(true);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 fcff 	bl	80018e4 <LCD_invertText>
				LCD_print(" status check ", 0, 2);
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	2100      	movs	r1, #0
 8000eea:	484f      	ldr	r0, [pc, #316]	; (8001028 <main+0x31c>)
 8000eec:	f000 fd54 	bl	8001998 <LCD_print>
				HAL_Delay(500);
 8000ef0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ef4:	f001 f906 	bl	8002104 <HAL_Delay>
				set_comand(ATCPAS);  // проверка статуса модема
 8000ef8:	484c      	ldr	r0, [pc, #304]	; (800102c <main+0x320>)
 8000efa:	f7ff f94f 	bl	800019c <set_comand>
				LCD_print("registr  check", 0, 2);
 8000efe:	2202      	movs	r2, #2
 8000f00:	2100      	movs	r1, #0
 8000f02:	484b      	ldr	r0, [pc, #300]	; (8001030 <main+0x324>)
 8000f04:	f000 fd48 	bl	8001998 <LCD_print>
				HAL_Delay(500);
 8000f08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f0c:	f001 f8fa 	bl	8002104 <HAL_Delay>
				set_comand(ATCREG);  // проверка регистрации в сети - должен вернуть  +CREG: 0,1
 8000f10:	4848      	ldr	r0, [pc, #288]	; (8001034 <main+0x328>)
 8000f12:	f7ff f943 	bl	800019c <set_comand>
				LCD_clrScr(); // очистить экран
 8000f16:	f000 fd5f 	bl	80019d8 <LCD_clrScr>
				LCD_invertText(false);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f000 fce2 	bl	80018e4 <LCD_invertText>
				get_date_time(); // будет раз в секунду выводить время
 8000f20:	f7ff fb86 	bl	8000630 <get_date_time>
				LCD_print("LABIRINT", 18, 0);
 8000f24:	2200      	movs	r2, #0
 8000f26:	2112      	movs	r1, #18
 8000f28:	4837      	ldr	r0, [pc, #220]	; (8001008 <main+0x2fc>)
 8000f2a:	f000 fd35 	bl	8001998 <LCD_print>
				LCD_print("ELECTRIC", 18, 1);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	2112      	movs	r1, #18
 8000f32:	4836      	ldr	r0, [pc, #216]	; (800100c <main+0x300>)
 8000f34:	f000 fd30 	bl	8001998 <LCD_print>
				LCD_print(operator, 0, 3); //vivodim na ekran soobshenie iz masiva operator po ukazannim koordinatam
 8000f38:	2203      	movs	r2, #3
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4834      	ldr	r0, [pc, #208]	; (8001010 <main+0x304>)
 8000f3e:	f000 fd2b 	bl	8001998 <LCD_print>
				LCD_print("NET          %", 0, 4);
 8000f42:	2204      	movs	r2, #4
 8000f44:	2100      	movs	r1, #0
 8000f46:	4833      	ldr	r0, [pc, #204]	; (8001014 <main+0x308>)
 8000f48:	f000 fd26 	bl	8001998 <LCD_print>
				LCD_print(sig, 60, 4); //vivodim na ekran soobshenie iz masiva dbi po ukazannim koordinatam
 8000f4c:	2204      	movs	r2, #4
 8000f4e:	213c      	movs	r1, #60	; 0x3c
 8000f50:	4831      	ldr	r0, [pc, #196]	; (8001018 <main+0x30c>)
 8000f52:	f000 fd21 	bl	8001998 <LCD_print>
				LCD_print("BAT          %", 0, 5);
 8000f56:	2205      	movs	r2, #5
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4830      	ldr	r0, [pc, #192]	; (800101c <main+0x310>)
 8000f5c:	f000 fd1c 	bl	8001998 <LCD_print>
				LCD_print(bat, 60, 5);
 8000f60:	2205      	movs	r2, #5
 8000f62:	213c      	movs	r1, #60	; 0x3c
 8000f64:	482e      	ldr	r0, [pc, #184]	; (8001020 <main+0x314>)
 8000f66:	f000 fd17 	bl	8001998 <LCD_print>
			}
			HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f70:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <main+0x2e4>)
 8000f72:	f001 fc41 	bl	80027f8 <HAL_GPIO_WritePin>
		}




		if(gsm_available()) //если модуль что-то прислал
 8000f76:	f000 ffb1 	bl	8001edc <gsm_available>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 81a8 	beq.w	80012d2 <main+0x5c6>
		{
			uint16_t i = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			uint8_t fdbg = 1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			memset(buf, 0, GSM_RX_BUFFER_SIZE);
 8000f8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000f92:	2240      	movs	r2, #64	; 0x40
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fb1f 	bl	80045da <memset>
			HAL_Delay(50);
 8000f9c:	2032      	movs	r0, #50	; 0x32
 8000f9e:	f001 f8b1 	bl	8002104 <HAL_Delay>

			while(gsm_available())
 8000fa2:	e014      	b.n	8000fce <main+0x2c2>
			{
				buf[i++] = gsm_read();
 8000fa4:	f000 ffb4 	bl	8001f10 <gsm_read>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4619      	mov	r1, r3
 8000fac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000fb0:	1c5a      	adds	r2, r3, #1
 8000fb2:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8000fb6:	b2ca      	uxtb	r2, r1
 8000fb8:	33b0      	adds	r3, #176	; 0xb0
 8000fba:	443b      	add	r3, r7
 8000fbc:	f803 2c50 	strb.w	r2, [r3, #-80]
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8000fc0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000fc4:	2b3f      	cmp	r3, #63	; 0x3f
 8000fc6:	d837      	bhi.n	8001038 <main+0x32c>
				HAL_Delay(1);
 8000fc8:	2001      	movs	r0, #1
 8000fca:	f001 f89b 	bl	8002104 <HAL_Delay>
			while(gsm_available())
 8000fce:	f000 ff85 	bl	8001edc <gsm_available>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1e5      	bne.n	8000fa4 <main+0x298>
 8000fd8:	e02f      	b.n	800103a <main+0x32e>
 8000fda:	bf00      	nop
 8000fdc:	200000d8 	.word	0x200000d8
 8000fe0:	20000120 	.word	0x20000120
 8000fe4:	2000018c 	.word	0x2000018c
 8000fe8:	08005aac 	.word	0x08005aac
 8000fec:	08005ab8 	.word	0x08005ab8
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	20000090 	.word	0x20000090
 8000ff8:	20000168 	.word	0x20000168
 8000ffc:	20000169 	.word	0x20000169
 8001000:	08005abc 	.word	0x08005abc
 8001004:	08005ac4 	.word	0x08005ac4
 8001008:	08005acc 	.word	0x08005acc
 800100c:	08005ad8 	.word	0x08005ad8
 8001010:	20000174 	.word	0x20000174
 8001014:	08005ae4 	.word	0x08005ae4
 8001018:	20000188 	.word	0x20000188
 800101c:	08005af4 	.word	0x08005af4
 8001020:	20000184 	.word	0x20000184
 8001024:	20000000 	.word	0x20000000
 8001028:	08005b04 	.word	0x08005b04
 800102c:	08005b14 	.word	0x08005b14
 8001030:	08005b1c 	.word	0x08005b1c
 8001034:	08005b2c 	.word	0x08005b2c
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8001038:	bf00      	nop
			}

			clear_string(buf); // очищаем строку от символов \r и \n
 800103a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fd40 	bl	8000ac4 <clear_string>

			/////////////////// НАЧ�?НАЕМ РАСПОЗНАВАТЬ ЧТО ПР�?СЛАЛ МОДУЛЬ /////////////////////
			if(strstr(buf, "RING") != NULL) // ЕСЛ�? ЭТО ЗВОНОК
 8001044:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001048:	49c6      	ldr	r1, [pc, #792]	; (8001364 <main+0x658>)
 800104a:	4618      	mov	r0, r3
 800104c:	f003 fb36 	bl	80046bc <strstr>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	f040 8123 	bne.w	800129e <main+0x592>
			{

			}
			else if(strstr(buf, "+CMT:") != NULL) // ЕСЛ�? ЭТО SMS
 8001058:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800105c:	49c2      	ldr	r1, [pc, #776]	; (8001368 <main+0x65c>)
 800105e:	4618      	mov	r0, r3
 8001060:	f003 fb2c 	bl	80046bc <strstr>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d04c      	beq.n	8001104 <main+0x3f8>
			{
				if(strstr(buf, "77057066") != NULL) // проверяем от кого смс
 800106a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800106e:	49bf      	ldr	r1, [pc, #764]	; (800136c <main+0x660>)
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fb23 	bl	80046bc <strstr>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d03b      	beq.n	80010f4 <main+0x3e8>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)"Sms my number\n", strlen("Sms my number\n"), 1000);
 800107c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001080:	220e      	movs	r2, #14
 8001082:	49bb      	ldr	r1, [pc, #748]	; (8001370 <main+0x664>)
 8001084:	48bb      	ldr	r0, [pc, #748]	; (8001374 <main+0x668>)
 8001086:	f002 fb21 	bl	80036cc <HAL_UART_Transmit>
					LCD_invertText(true);
 800108a:	2001      	movs	r0, #1
 800108c:	f000 fc2a 	bl	80018e4 <LCD_invertText>
					LCD_print("SMS           ", 0, 2);
 8001090:	2202      	movs	r2, #2
 8001092:	2100      	movs	r1, #0
 8001094:	48b8      	ldr	r0, [pc, #736]	; (8001378 <main+0x66c>)
 8001096:	f000 fc7f 	bl	8001998 <LCD_print>
					//LCD_print(num_1, 30, 2);
					LCD_invertText(false);
 800109a:	2000      	movs	r0, #0
 800109c:	f000 fc22 	bl	80018e4 <LCD_invertText>
					// что-то делаем или ищем какую-то строку, которую мы послали в смс, например слово "Hello"
					if(strstr(buf, "Hello") != NULL)
 80010a0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010a4:	49b5      	ldr	r1, [pc, #724]	; (800137c <main+0x670>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f003 fb08 	bl	80046bc <strstr>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <main+0x3b6>
					{
						HAL_UART_Transmit(DEBUG, (uint8_t*)"Reciv Hello\n", strlen("Reciv Hello\n"), 1000);
 80010b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b6:	220c      	movs	r2, #12
 80010b8:	49b1      	ldr	r1, [pc, #708]	; (8001380 <main+0x674>)
 80010ba:	48ae      	ldr	r0, [pc, #696]	; (8001374 <main+0x668>)
 80010bc:	f002 fb06 	bl	80036cc <HAL_UART_Transmit>
 80010c0:	e0ed      	b.n	800129e <main+0x592>
						// что-то делаем
					}
					else if(strstr(buf, "Call") != NULL) // если прилетело слово "Call" то звоним
 80010c2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010c6:	49af      	ldr	r1, [pc, #700]	; (8001384 <main+0x678>)
 80010c8:	4618      	mov	r0, r3
 80010ca:	f003 faf7 	bl	80046bc <strstr>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <main+0x3ce>
					{
						call(); // номер указать в файле gsm.c
 80010d4:	f7ff fa8a 	bl	80005ec <call>
 80010d8:	e0e1      	b.n	800129e <main+0x592>
					}
					else if(strstr(buf, "Money") != NULL) // если отпрвить sms со словом "Money", то в ответ придёт смс с балансом (деньги) на модеме
 80010da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010de:	49aa      	ldr	r1, [pc, #680]	; (8001388 <main+0x67c>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 faeb 	bl	80046bc <strstr>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	f000 80d8 	beq.w	800129e <main+0x592>
					{
						balance(); // посылаем команду узнать баланс (мтс)
 80010ee:	f7ff fa43 	bl	8000578 <balance>
 80010f2:	e0d4      	b.n	800129e <main+0x592>
					}
				}
				else
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknow number sms\n", strlen("Unknow number sms\n"), 1000);
 80010f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f8:	2212      	movs	r2, #18
 80010fa:	49a4      	ldr	r1, [pc, #656]	; (800138c <main+0x680>)
 80010fc:	489d      	ldr	r0, [pc, #628]	; (8001374 <main+0x668>)
 80010fe:	f002 fae5 	bl	80036cc <HAL_UART_Transmit>
 8001102:	e0cc      	b.n	800129e <main+0x592>
				}
			}
			else if(strstr(buf, "+CUSD") != NULL)  // ЕСЛ�? ЭТО СТРОКА С БАЛАНСОМ
 8001104:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001108:	49a1      	ldr	r1, [pc, #644]	; (8001390 <main+0x684>)
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fad6 	bl	80046bc <strstr>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d00b      	beq.n	800112e <main+0x422>
			{
				char *p = NULL;
 8001116:	2300      	movs	r3, #0
 8001118:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

				if((p = strstr(buf, "Balance")) != NULL) // ищем слово "Balance"
 800111c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001120:	499c      	ldr	r1, [pc, #624]	; (8001394 <main+0x688>)
 8001122:	4618      	mov	r0, r3
 8001124:	f003 faca 	bl	80046bc <strstr>
 8001128:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 800112c:	e0b7      	b.n	800129e <main+0x592>
					snprintf(str, GSM_RX_BUFFER_SIZE, "%c", (char)26); // символ ctrl-z
					HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);*/
					// блок закомментирован чтоб модуль не слал смски пока тестируете
				}
			}
			else if(strstr(buf, "+DTMF") != NULL)  //ЕСЛ�? ЭТО DTMF С�?ГНАЛ
 800112e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001132:	4999      	ldr	r1, [pc, #612]	; (8001398 <main+0x68c>)
 8001134:	4618      	mov	r0, r3
 8001136:	f003 fac1 	bl	80046bc <strstr>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d023      	beq.n	8001188 <main+0x47c>
			{
				if(strstr(buf, "0") != NULL) // если пришёл сигнал кнопки 0
 8001140:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001144:	2130      	movs	r1, #48	; 0x30
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fa4f 	bl	80045ea <strchr>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <main+0x456>
				{
					// что-то делаем
					HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 0\n", strlen("DTMF Button 0\n"), 1000);
 8001152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001156:	220e      	movs	r2, #14
 8001158:	4990      	ldr	r1, [pc, #576]	; (800139c <main+0x690>)
 800115a:	4886      	ldr	r0, [pc, #536]	; (8001374 <main+0x668>)
 800115c:	f002 fab6 	bl	80036cc <HAL_UART_Transmit>
 8001160:	e00f      	b.n	8001182 <main+0x476>
				}
				else if(strstr(buf, "1") != NULL) // если пришёл сигнал кнопки 1
 8001162:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001166:	2131      	movs	r1, #49	; 0x31
 8001168:	4618      	mov	r0, r3
 800116a:	f003 fa3e 	bl	80045ea <strchr>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d006      	beq.n	8001182 <main+0x476>
				{
					// что-то делаем
					HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 1\n", strlen("DTMF Button 1\n"), 1000);
 8001174:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001178:	220e      	movs	r2, #14
 800117a:	4989      	ldr	r1, [pc, #548]	; (80013a0 <main+0x694>)
 800117c:	487d      	ldr	r0, [pc, #500]	; (8001374 <main+0x668>)
 800117e:	f002 faa5 	bl	80036cc <HAL_UART_Transmit>
				}
				// и т.д.

				disable_connection(); // разрываем соединение, или не разрываем (в зависимости от того, что вам нужно)
 8001182:	f7ff fa15 	bl	80005b0 <disable_connection>
 8001186:	e08a      	b.n	800129e <main+0x592>
			}
			else if(strstr(buf, "+CCLK") != NULL)  // ЕСЛ�? ЭТО ДАТА/ВРЕМЯ
 8001188:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800118c:	4985      	ldr	r1, [pc, #532]	; (80013a4 <main+0x698>)
 800118e:	4618      	mov	r0, r3
 8001190:	f003 fa94 	bl	80046bc <strstr>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8081 	beq.w	800129e <main+0x592>
			{
				replac_string(buf);
 800119c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7fe ffdb 	bl	800015c <replac_string>
				char res[32] = {0,};
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	1d3b      	adds	r3, r7, #4
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
 80011b8:	615a      	str	r2, [r3, #20]
 80011ba:	619a      	str	r2, [r3, #24]

				for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 80011bc:	2300      	movs	r3, #0
 80011be:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 80011c2:	e050      	b.n	8001266 <main+0x55a>
				{
					if(buf[i] == '"')
 80011c4:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80011c8:	33b0      	adds	r3, #176	; 0xb0
 80011ca:	443b      	add	r3, r7
 80011cc:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80011d0:	2b22      	cmp	r3, #34	; 0x22
 80011d2:	d143      	bne.n	800125c <main+0x550>
					{
						i++;
 80011d4:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80011d8:	3301      	adds	r3, #1
 80011da:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
						for(uint8_t j = 0; j < 20; i++, j++)
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80011e4:	e035      	b.n	8001252 <main+0x546>
						{
							if(buf[i] == '+')
 80011e6:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80011ea:	33b0      	adds	r3, #176	; 0xb0
 80011ec:	443b      	add	r3, r7
 80011ee:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80011f2:	2b2b      	cmp	r3, #43	; 0x2b
 80011f4:	d108      	bne.n	8001208 <main+0x4fc>
							{
								buf[i] = 0;
 80011f6:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80011fa:	33b0      	adds	r3, #176	; 0xb0
 80011fc:	443b      	add	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	f803 2c50 	strb.w	r2, [r3, #-80]
								break;
 8001204:	bf00      	nop

							if(buf[i] == ',') buf[i] = ' ';
							res[j] = buf[i];
						}

						break;
 8001206:	e032      	b.n	800126e <main+0x562>
							if(buf[i] == ',') buf[i] = ' ';
 8001208:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800120c:	33b0      	adds	r3, #176	; 0xb0
 800120e:	443b      	add	r3, r7
 8001210:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001214:	2b2c      	cmp	r3, #44	; 0x2c
 8001216:	d106      	bne.n	8001226 <main+0x51a>
 8001218:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800121c:	33b0      	adds	r3, #176	; 0xb0
 800121e:	443b      	add	r3, r7
 8001220:	2220      	movs	r2, #32
 8001222:	f803 2c50 	strb.w	r2, [r3, #-80]
							res[j] = buf[i];
 8001226:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 800122a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800122e:	32b0      	adds	r2, #176	; 0xb0
 8001230:	443a      	add	r2, r7
 8001232:	f812 2c50 	ldrb.w	r2, [r2, #-80]
 8001236:	33b0      	adds	r3, #176	; 0xb0
 8001238:	443b      	add	r3, r7
 800123a:	f803 2cb0 	strb.w	r2, [r3, #-176]
						for(uint8_t j = 0; j < 20; i++, j++)
 800123e:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001242:	3301      	adds	r3, #1
 8001244:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8001248:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800124c:	3301      	adds	r3, #1
 800124e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001252:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001256:	2b13      	cmp	r3, #19
 8001258:	d9c5      	bls.n	80011e6 <main+0x4da>
						break;
 800125a:	e008      	b.n	800126e <main+0x562>
				for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 800125c:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001260:	3301      	adds	r3, #1
 8001262:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8001266:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800126a:	2b3f      	cmp	r3, #63	; 0x3f
 800126c:	d9aa      	bls.n	80011c4 <main+0x4b8>
					}
				}

				snprintf(str, GSM_RX_BUFFER_SIZE, "DateTime %s\n", res);
 800126e:	463b      	mov	r3, r7
 8001270:	f107 0020 	add.w	r0, r7, #32
 8001274:	4a4c      	ldr	r2, [pc, #304]	; (80013a8 <main+0x69c>)
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	f003 f938 	bl	80044ec <sniprintf>
				HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 800127c:	f107 0320 	add.w	r3, r7, #32
 8001280:	4618      	mov	r0, r3
 8001282:	f7fe ff63 	bl	800014c <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	b29a      	uxth	r2, r3
 800128a:	f107 0120 	add.w	r1, r7, #32
 800128e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001292:	4838      	ldr	r0, [pc, #224]	; (8001374 <main+0x668>)
 8001294:	f002 fa1a 	bl	80036cc <HAL_UART_Transmit>
				fdbg = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			}

			if(fdbg)
 800129e:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d015      	beq.n	80012d2 <main+0x5c6>
			{
				snprintf(str, GSM_RX_BUFFER_SIZE, "%s\n", buf);
 80012a6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012aa:	f107 0020 	add.w	r0, r7, #32
 80012ae:	4a3f      	ldr	r2, [pc, #252]	; (80013ac <main+0x6a0>)
 80012b0:	2140      	movs	r1, #64	; 0x40
 80012b2:	f003 f91b 	bl	80044ec <sniprintf>
				HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 80012b6:	f107 0320 	add.w	r3, r7, #32
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7fe ff46 	bl	800014c <strlen>
 80012c0:	4603      	mov	r3, r0
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f107 0120 	add.w	r1, r7, #32
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	4829      	ldr	r0, [pc, #164]	; (8001374 <main+0x668>)
 80012ce:	f002 f9fd 	bl	80036cc <HAL_UART_Transmit>
			}
		}


		////////////////////////////////////// DEBUG ////////////////////////////////////////
		if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 80012d2:	f000 fe49 	bl	8001f68 <dbg_available>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f43f ad9c 	beq.w	8000e16 <main+0x10a>
		{
			uint16_t i = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			memset(buf, 0, GSM_RX_BUFFER_SIZE);
 80012e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012e8:	2240      	movs	r2, #64	; 0x40
 80012ea:	2100      	movs	r1, #0
 80012ec:	4618      	mov	r0, r3
 80012ee:	f003 f974 	bl	80045da <memset>

			while(dbg_available())
 80012f2:	e014      	b.n	800131e <main+0x612>
			{
				buf[i++] = dbg_read();
 80012f4:	f000 fe52 	bl	8001f9c <dbg_read>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4619      	mov	r1, r3
 80012fc:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001300:	1c5a      	adds	r2, r3, #1
 8001302:	f8a7 20a4 	strh.w	r2, [r7, #164]	; 0xa4
 8001306:	b2ca      	uxtb	r2, r1
 8001308:	33b0      	adds	r3, #176	; 0xb0
 800130a:	443b      	add	r3, r7
 800130c:	f803 2c50 	strb.w	r2, [r3, #-80]
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8001310:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001314:	2b3f      	cmp	r3, #63	; 0x3f
 8001316:	d808      	bhi.n	800132a <main+0x61e>
				HAL_Delay(1);
 8001318:	2001      	movs	r0, #1
 800131a:	f000 fef3 	bl	8002104 <HAL_Delay>
			while(dbg_available())
 800131e:	f000 fe23 	bl	8001f68 <dbg_available>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e5      	bne.n	80012f4 <main+0x5e8>
 8001328:	e000      	b.n	800132c <main+0x620>
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 800132a:	bf00      	nop
			}

			clear_string(buf);
 800132c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fbc7 	bl	8000ac4 <clear_string>
			snprintf(str, GSM_RX_BUFFER_SIZE, "%s\r\n", buf);
 8001336:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800133a:	f107 0020 	add.w	r0, r7, #32
 800133e:	4a1c      	ldr	r2, [pc, #112]	; (80013b0 <main+0x6a4>)
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	f003 f8d3 	bl	80044ec <sniprintf>
			HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4618      	mov	r0, r3
 800134c:	f7fe fefe 	bl	800014c <strlen>
 8001350:	4603      	mov	r3, r0
 8001352:	b29a      	uxth	r2, r3
 8001354:	f107 0120 	add.w	r1, r7, #32
 8001358:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135c:	4815      	ldr	r0, [pc, #84]	; (80013b4 <main+0x6a8>)
 800135e:	f002 f9b5 	bl	80036cc <HAL_UART_Transmit>
    if(flag_alarm == 1)
 8001362:	e558      	b.n	8000e16 <main+0x10a>
 8001364:	08005b38 	.word	0x08005b38
 8001368:	08005b40 	.word	0x08005b40
 800136c:	08005b48 	.word	0x08005b48
 8001370:	08005b54 	.word	0x08005b54
 8001374:	20000120 	.word	0x20000120
 8001378:	08005b64 	.word	0x08005b64
 800137c:	08005b74 	.word	0x08005b74
 8001380:	08005b7c 	.word	0x08005b7c
 8001384:	08005b8c 	.word	0x08005b8c
 8001388:	08005b94 	.word	0x08005b94
 800138c:	08005b9c 	.word	0x08005b9c
 8001390:	08005bb0 	.word	0x08005bb0
 8001394:	08005bb8 	.word	0x08005bb8
 8001398:	08005bc0 	.word	0x08005bc0
 800139c:	08005bc8 	.word	0x08005bc8
 80013a0:	08005bd8 	.word	0x08005bd8
 80013a4:	08005be8 	.word	0x08005be8
 80013a8:	08005bf0 	.word	0x08005bf0
 80013ac:	08005c00 	.word	0x08005c00
 80013b0:	08005c04 	.word	0x08005c04
 80013b4:	200000d8 	.word	0x200000d8

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b090      	sub	sp, #64	; 0x40
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	2228      	movs	r2, #40	; 0x28
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f003 f907 	bl	80045da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013da:	2301      	movs	r3, #1
 80013dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ec:	2302      	movs	r3, #2
 80013ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80013f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80013fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fa2b 	bl	800285c <HAL_RCC_OscConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800140c:	f000 f946 	bl	800169c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001410:	230f      	movs	r3, #15
 8001412:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	2302      	movs	r3, #2
 8001416:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800141c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001422:	2300      	movs	r3, #0
 8001424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2102      	movs	r1, #2
 800142a:	4618      	mov	r0, r3
 800142c:	f001 fc98 	bl	8002d60 <HAL_RCC_ClockConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001436:	f000 f931 	bl	800169c <Error_Handler>
  }
}
 800143a:	bf00      	nop
 800143c:	3740      	adds	r7, #64	; 0x40
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	463b      	mov	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001460:	4b1f      	ldr	r3, [pc, #124]	; (80014e0 <MX_TIM1_Init+0x9c>)
 8001462:	4a20      	ldr	r2, [pc, #128]	; (80014e4 <MX_TIM1_Init+0xa0>)
 8001464:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <MX_TIM1_Init+0x9c>)
 8001468:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800146c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146e:	4b1c      	ldr	r3, [pc, #112]	; (80014e0 <MX_TIM1_Init+0x9c>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <MX_TIM1_Init+0x9c>)
 8001476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800147a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <MX_TIM1_Init+0x9c>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <MX_TIM1_Init+0x9c>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <MX_TIM1_Init+0x9c>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800148e:	4814      	ldr	r0, [pc, #80]	; (80014e0 <MX_TIM1_Init+0x9c>)
 8001490:	f001 fdf4 	bl	800307c <HAL_TIM_Base_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800149a:	f000 f8ff 	bl	800169c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	; (80014e0 <MX_TIM1_Init+0x9c>)
 80014ac:	f001 feb0 	bl	8003210 <HAL_TIM_ConfigClockSource>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014b6:	f000 f8f1 	bl	800169c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_TIM1_Init+0x9c>)
 80014c8:	f002 f858 	bl	800357c <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80014d2:	f000 f8e3 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000090 	.word	0x20000090
 80014e4:	40012c00 	.word	0x40012c00

080014e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_USART1_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014f4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80014f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART1_UART_Init+0x4c>)
 8001520:	f002 f884 	bl	800362c <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f000 f8b7 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200000d8 	.word	0x200000d8
 8001538:	40013800 	.word	0x40013800

0800153c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <MX_USART2_UART_Init+0x50>)
 8001544:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001548:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800154c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800155a:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001572:	4805      	ldr	r0, [pc, #20]	; (8001588 <MX_USART2_UART_Init+0x4c>)
 8001574:	f002 f85a 	bl	800362c <HAL_UART_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157e:	f000 f88d 	bl	800169c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000120 	.word	0x20000120
 800158c:	40004400 	.word	0x40004400

08001590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a4:	4b39      	ldr	r3, [pc, #228]	; (800168c <MX_GPIO_Init+0xfc>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	4a38      	ldr	r2, [pc, #224]	; (800168c <MX_GPIO_Init+0xfc>)
 80015aa:	f043 0310 	orr.w	r3, r3, #16
 80015ae:	6193      	str	r3, [r2, #24]
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <MX_GPIO_Init+0xfc>)
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015bc:	4b33      	ldr	r3, [pc, #204]	; (800168c <MX_GPIO_Init+0xfc>)
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	4a32      	ldr	r2, [pc, #200]	; (800168c <MX_GPIO_Init+0xfc>)
 80015c2:	f043 0320 	orr.w	r3, r3, #32
 80015c6:	6193      	str	r3, [r2, #24]
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <MX_GPIO_Init+0xfc>)
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	f003 0320 	and.w	r3, r3, #32
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <MX_GPIO_Init+0xfc>)
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	4a2c      	ldr	r2, [pc, #176]	; (800168c <MX_GPIO_Init+0xfc>)
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	6193      	str	r3, [r2, #24]
 80015e0:	4b2a      	ldr	r3, [pc, #168]	; (800168c <MX_GPIO_Init+0xfc>)
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ec:	4b27      	ldr	r3, [pc, #156]	; (800168c <MX_GPIO_Init+0xfc>)
 80015ee:	699b      	ldr	r3, [r3, #24]
 80015f0:	4a26      	ldr	r2, [pc, #152]	; (800168c <MX_GPIO_Init+0xfc>)
 80015f2:	f043 0308 	orr.w	r3, r3, #8
 80015f6:	6193      	str	r3, [r2, #24]
 80015f8:	4b24      	ldr	r3, [pc, #144]	; (800168c <MX_GPIO_Init+0xfc>)
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	603b      	str	r3, [r7, #0]
 8001602:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800160a:	4821      	ldr	r0, [pc, #132]	; (8001690 <MX_GPIO_Init+0x100>)
 800160c:	f001 f8f4 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|DIN_Pin|DC_Pin|CE_Pin
 8001610:	2200      	movs	r2, #0
 8001612:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001616:	481f      	ldr	r0, [pc, #124]	; (8001694 <MX_GPIO_Init+0x104>)
 8001618:	f001 f8ee 	bl	80027f8 <HAL_GPIO_WritePin>
                          |RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_RESET);
 800161c:	2200      	movs	r2, #0
 800161e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001622:	481d      	ldr	r0, [pc, #116]	; (8001698 <MX_GPIO_Init+0x108>)
 8001624:	f001 f8e8 	bl	80027f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2302      	movs	r3, #2
 8001638:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4619      	mov	r1, r3
 8001640:	4813      	ldr	r0, [pc, #76]	; (8001690 <MX_GPIO_Init+0x100>)
 8001642:	f000 ff5d 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DIN_Pin DC_Pin CE_Pin
                           RST_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DIN_Pin|DC_Pin|CE_Pin
 8001646:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800164a:	613b      	str	r3, [r7, #16]
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2302      	movs	r3, #2
 8001656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001658:	f107 0310 	add.w	r3, r7, #16
 800165c:	4619      	mov	r1, r3
 800165e:	480d      	ldr	r0, [pc, #52]	; (8001694 <MX_GPIO_Init+0x104>)
 8001660:	f000 ff4e 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RESET_Pin */
  GPIO_InitStruct.Pin = GSM_RESET_Pin;
 8001664:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001668:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166a:	2301      	movs	r3, #1
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	2302      	movs	r3, #2
 8001674:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_RESET_GPIO_Port, &GPIO_InitStruct);
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	4619      	mov	r1, r3
 800167c:	4806      	ldr	r0, [pc, #24]	; (8001698 <MX_GPIO_Init+0x108>)
 800167e:	f000 ff3f 	bl	8002500 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001682:	bf00      	nop
 8001684:	3720      	adds	r7, #32
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40021000 	.word	0x40021000
 8001690:	40011000 	.word	0x40011000
 8001694:	40010c00 	.word	0x40010c00
 8001698:	40010800 	.word	0x40010800

0800169c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a0:	b672      	cpsid	i
}
 80016a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <Error_Handler+0x8>
	...

080016a8 <LCD_setRST>:
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 80016b4:	4a05      	ldr	r2, [pc, #20]	; (80016cc <LCD_setRST+0x24>)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <LCD_setRST+0x24>)
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	8093      	strh	r3, [r2, #4]
}
 80016c0:	bf00      	nop
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	200003b0 	.word	0x200003b0

080016d0 <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 80016dc:	4a05      	ldr	r2, [pc, #20]	; (80016f4 <LCD_setCE+0x24>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <LCD_setCE+0x24>)
 80016e4:	887b      	ldrh	r3, [r7, #2]
 80016e6:	8193      	strh	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	200003b0 	.word	0x200003b0

080016f8 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	460b      	mov	r3, r1
 8001702:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <LCD_setDC+0x24>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 800170a:	4a04      	ldr	r2, [pc, #16]	; (800171c <LCD_setDC+0x24>)
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	8293      	strh	r3, [r2, #20]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	200003b0 	.word	0x200003b0

08001720 <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <LCD_setDIN+0x24>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <LCD_setDIN+0x24>)
 8001734:	887b      	ldrh	r3, [r7, #2]
 8001736:	8393      	strh	r3, [r2, #28]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200003b0 	.word	0x200003b0

08001748 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8001754:	4a05      	ldr	r2, [pc, #20]	; (800176c <LCD_setCLK+0x24>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <LCD_setCLK+0x24>)
 800175c:	887b      	ldrh	r3, [r7, #2]
 800175e:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	200003b0 	.word	0x200003b0

08001770 <LCD_send>:
/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++)
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	e026      	b.n	80017ce <LCD_send+0x5e>
  {
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <LCD_send+0x70>)
 8001782:	6998      	ldr	r0, [r3, #24]
 8001784:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <LCD_send+0x70>)
 8001786:	8b99      	ldrh	r1, [r3, #28]
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	f1c3 0307 	rsb	r3, r3, #7
 8001790:	fa42 f303 	asr.w	r3, r2, r3
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	461a      	mov	r2, r3
 80017a4:	f001 f828 	bl	80027f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 80017a8:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <LCD_send+0x70>)
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <LCD_send+0x70>)
 80017ae:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 80017b0:	2201      	movs	r2, #1
 80017b2:	4618      	mov	r0, r3
 80017b4:	f001 f820 	bl	80027f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <LCD_send+0x70>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a08      	ldr	r2, [pc, #32]	; (80017e0 <LCD_send+0x70>)
 80017be:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 80017c0:	2200      	movs	r2, #0
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 f818 	bl	80027f8 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++)
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	3301      	adds	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d9d5      	bls.n	8001780 <LCD_send+0x10>
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200003b0 	.word	0x200003b0

080017e4 <LCD_write>:
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	71fb      	strb	r3, [r7, #7]
 80017f0:	4613      	mov	r3, r2
 80017f2:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND)
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d11c      	bne.n	8001834 <LCD_write+0x50>
  {
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 80017fa:	4b1e      	ldr	r3, [pc, #120]	; (8001874 <LCD_write+0x90>)
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	4a1d      	ldr	r2, [pc, #116]	; (8001874 <LCD_write+0x90>)
 8001800:	8a91      	ldrh	r1, [r2, #20]
 8001802:	2200      	movs	r2, #0
 8001804:	4618      	mov	r0, r3
 8001806:	f000 fff7 	bl	80027f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 800180a:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <LCD_write+0x90>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4a19      	ldr	r2, [pc, #100]	; (8001874 <LCD_write+0x90>)
 8001810:	8991      	ldrh	r1, [r2, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	4618      	mov	r0, r3
 8001816:	f000 ffef 	bl	80027f8 <HAL_GPIO_WritePin>
    LCD_send(data);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ffa7 	bl	8001770 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001822:	4b14      	ldr	r3, [pc, #80]	; (8001874 <LCD_write+0x90>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	4a13      	ldr	r2, [pc, #76]	; (8001874 <LCD_write+0x90>)
 8001828:	8991      	ldrh	r1, [r2, #12]
 800182a:	2201      	movs	r2, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f000 ffe3 	bl	80027f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 8001832:	e01b      	b.n	800186c <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8001834:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <LCD_write+0x90>)
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <LCD_write+0x90>)
 800183a:	8a91      	ldrh	r1, [r2, #20]
 800183c:	2201      	movs	r2, #1
 800183e:	4618      	mov	r0, r3
 8001840:	f000 ffda 	bl	80027f8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001844:	4b0b      	ldr	r3, [pc, #44]	; (8001874 <LCD_write+0x90>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <LCD_write+0x90>)
 800184a:	8991      	ldrh	r1, [r2, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f000 ffd2 	bl	80027f8 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001854:	79fb      	ldrb	r3, [r7, #7]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff ff8a 	bl	8001770 <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 800185c:	4b05      	ldr	r3, [pc, #20]	; (8001874 <LCD_write+0x90>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	4a04      	ldr	r2, [pc, #16]	; (8001874 <LCD_write+0x90>)
 8001862:	8991      	ldrh	r1, [r2, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	4618      	mov	r0, r3
 8001868:	f000 ffc6 	bl	80027f8 <HAL_GPIO_WritePin>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	200003b0 	.word	0x200003b0

08001878 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init()
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <LCD_init+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a16      	ldr	r2, [pc, #88]	; (80018dc <LCD_init+0x64>)
 8001882:	8891      	ldrh	r1, [r2, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f000 ffb6 	bl	80027f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 800188c:	4b13      	ldr	r3, [pc, #76]	; (80018dc <LCD_init+0x64>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <LCD_init+0x64>)
 8001892:	8891      	ldrh	r1, [r2, #4]
 8001894:	2201      	movs	r2, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f000 ffae 	bl	80027f8 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 800189c:	2100      	movs	r1, #0
 800189e:	2021      	movs	r0, #33	; 0x21
 80018a0:	f7ff ffa0 	bl	80017e4 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 80018a4:	2100      	movs	r1, #0
 80018a6:	20b8      	movs	r0, #184	; 0xb8
 80018a8:	f7ff ff9c 	bl	80017e4 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 80018ac:	2100      	movs	r1, #0
 80018ae:	2004      	movs	r0, #4
 80018b0:	f7ff ff98 	bl	80017e4 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 80018b4:	2100      	movs	r1, #0
 80018b6:	2014      	movs	r0, #20
 80018b8:	f7ff ff94 	bl	80017e4 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 80018bc:	2100      	movs	r1, #0
 80018be:	2020      	movs	r0, #32
 80018c0:	f7ff ff90 	bl	80017e4 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 80018c4:	2100      	movs	r1, #0
 80018c6:	200c      	movs	r0, #12
 80018c8:	f7ff ff8c 	bl	80017e4 <LCD_write>
  LCD_clrScr();
 80018cc:	f000 f884 	bl	80019d8 <LCD_clrScr>
  lcd.inverttext = false;
 80018d0:	4b03      	ldr	r3, [pc, #12]	; (80018e0 <LCD_init+0x68>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	200003b0 	.word	0x200003b0
 80018e0:	200001b4 	.word	0x200001b4

080018e4 <LCD_invertText>:
/*
 * @brief Invert the colour of any text sent to the display
 * @param mode: true = inverted / false = normal
 */
void LCD_invertText(bool mode)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if(mode == true)
 80018ee:	79fb      	ldrb	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d004      	beq.n	80018fe <LCD_invertText+0x1a>
  {
    lcd.inverttext = true;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <LCD_invertText+0x2c>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  }
  else
  {
    lcd.inverttext = false;
  }
}
 80018fc:	e003      	b.n	8001906 <LCD_invertText+0x22>
    lcd.inverttext = false;
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <LCD_invertText+0x2c>)
 8001900:	2200      	movs	r2, #0
 8001902:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8001906:	bf00      	nop
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	200001b4 	.word	0x200001b4

08001914 <LCD_putChar>:
/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++)
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	e02d      	b.n	8001980 <LCD_putChar+0x6c>
  {
    if(lcd.inverttext != true)
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <LCD_putChar+0x7c>)
 8001926:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 800192a:	f083 0301 	eor.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d010      	beq.n	8001956 <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	f1a3 0220 	sub.w	r2, r3, #32
 800193a:	4916      	ldr	r1, [pc, #88]	; (8001994 <LCD_putChar+0x80>)
 800193c:	4613      	mov	r3, r2
 800193e:	005b      	lsls	r3, r3, #1
 8001940:	4413      	add	r3, r2
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	18ca      	adds	r2, r1, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2101      	movs	r1, #1
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff ff48 	bl	80017e4 <LCD_write>
 8001954:	e011      	b.n	800197a <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f1a3 0220 	sub.w	r2, r3, #32
 800195c:	490d      	ldr	r1, [pc, #52]	; (8001994 <LCD_putChar+0x80>)
 800195e:	4613      	mov	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4413      	add	r3, r2
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	18ca      	adds	r2, r1, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	43db      	mvns	r3, r3
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2101      	movs	r1, #1
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff35 	bl	80017e4 <LCD_write>
  for(int i = 0; i < 6; i++)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	3301      	adds	r3, #1
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2b05      	cmp	r3, #5
 8001984:	ddce      	ble.n	8001924 <LCD_putChar+0x10>
  }
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200001b4 	.word	0x200001b4
 8001994:	08005c0c 	.word	0x08005c0c

08001998 <LCD_print>:
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
 80019a4:	4613      	mov	r3, r2
 80019a6:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 80019a8:	78ba      	ldrb	r2, [r7, #2]
 80019aa:	78fb      	ldrb	r3, [r7, #3]
 80019ac:	4611      	mov	r1, r2
 80019ae:	4618      	mov	r0, r3
 80019b0:	f000 f830 	bl	8001a14 <LCD_goXY>

  while(*str)
 80019b4:	e006      	b.n	80019c4 <LCD_print+0x2c>
  {
    LCD_putChar(*str++);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff ffa8 	bl	8001914 <LCD_putChar>
  while(*str)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1f4      	bne.n	80019b6 <LCD_print+0x1e>
  }
}
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
	...

080019d8 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr()
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++)
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	e00b      	b.n	80019fc <LCD_clrScr+0x24>
  {
    LCD_write(0x00, LCD_DATA);
 80019e4:	2101      	movs	r1, #1
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fefc 	bl	80017e4 <LCD_write>
    lcd.buffer[i] = 0;
 80019ec:	4a08      	ldr	r2, [pc, #32]	; (8001a10 <LCD_clrScr+0x38>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3301      	adds	r3, #1
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001a02:	dbef      	blt.n	80019e4 <LCD_clrScr+0xc>
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200001b4 	.word	0x200001b4

08001a14 <LCD_goXY>:
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460a      	mov	r2, r1
 8001a1e:	71fb      	strb	r3, [r7, #7]
 8001a20:	4613      	mov	r3, r2
 8001a22:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7ff fed8 	bl	80017e4 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fed0 	bl	80017e4 <LCD_write>
}
 8001a44:	bf00      	nop
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_MspInit+0x5c>)
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	4a14      	ldr	r2, [pc, #80]	; (8001aa8 <HAL_MspInit+0x5c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6193      	str	r3, [r2, #24]
 8001a5e:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <HAL_MspInit+0x5c>)
 8001a60:	699b      	ldr	r3, [r3, #24]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <HAL_MspInit+0x5c>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <HAL_MspInit+0x5c>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a74:	61d3      	str	r3, [r2, #28]
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_MspInit+0x5c>)
 8001a78:	69db      	ldr	r3, [r3, #28]
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a82:	4b0a      	ldr	r3, [pc, #40]	; (8001aac <HAL_MspInit+0x60>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	4a04      	ldr	r2, [pc, #16]	; (8001aac <HAL_MspInit+0x60>)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010000 	.word	0x40010000

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a09      	ldr	r2, [pc, #36]	; (8001ae4 <HAL_TIM_Base_MspInit+0x34>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10b      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <HAL_TIM_Base_MspInit+0x38>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a08      	ldr	r2, [pc, #32]	; (8001ae8 <HAL_TIM_Base_MspInit+0x38>)
 8001ac8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <HAL_TIM_Base_MspInit+0x38>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001ada:	bf00      	nop
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bc80      	pop	{r7}
 8001ae2:	4770      	bx	lr
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000

08001aec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	; 0x28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a3f      	ldr	r2, [pc, #252]	; (8001c04 <HAL_UART_MspInit+0x118>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d13a      	bne.n	8001b82 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b0c:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a3d      	ldr	r2, [pc, #244]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b20:	617b      	str	r3, [r7, #20]
 8001b22:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b24:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	4a37      	ldr	r2, [pc, #220]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b2a:	f043 0304 	orr.w	r3, r3, #4
 8001b2e:	6193      	str	r3, [r2, #24]
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4a:	f107 0318 	add.w	r3, r7, #24
 8001b4e:	4619      	mov	r1, r3
 8001b50:	482e      	ldr	r0, [pc, #184]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b52:	f000 fcd5 	bl	8002500 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b64:	f107 0318 	add.w	r3, r7, #24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4828      	ldr	r0, [pc, #160]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001b6c:	f000 fcc8 	bl	8002500 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2100      	movs	r1, #0
 8001b74:	2025      	movs	r0, #37	; 0x25
 8001b76:	f000 fbd6 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b7a:	2025      	movs	r0, #37	; 0x25
 8001b7c:	f000 fbef 	bl	800235e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b80:	e03c      	b.n	8001bfc <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a22      	ldr	r2, [pc, #136]	; (8001c10 <HAL_UART_MspInit+0x124>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d137      	bne.n	8001bfc <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8c:	4b1e      	ldr	r3, [pc, #120]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b96:	61d3      	str	r3, [r2, #28]
 8001b98:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba4:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	6193      	str	r3, [r2, #24]
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_UART_MspInit+0x11c>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc8:	f107 0318 	add.w	r3, r7, #24
 8001bcc:	4619      	mov	r1, r3
 8001bce:	480f      	ldr	r0, [pc, #60]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001bd0:	f000 fc96 	bl	8002500 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be0:	f107 0318 	add.w	r3, r7, #24
 8001be4:	4619      	mov	r1, r3
 8001be6:	4809      	ldr	r0, [pc, #36]	; (8001c0c <HAL_UART_MspInit+0x120>)
 8001be8:	f000 fc8a 	bl	8002500 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2026      	movs	r0, #38	; 0x26
 8001bf2:	f000 fb98 	bl	8002326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bf6:	2026      	movs	r0, #38	; 0x26
 8001bf8:	f000 fbb1 	bl	800235e <HAL_NVIC_EnableIRQ>
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40010800 	.word	0x40010800
 8001c10:	40004400 	.word	0x40004400

08001c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <NMI_Handler+0x4>

08001c1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <HardFault_Handler+0x4>

08001c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <MemManage_Handler+0x4>

08001c26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2a:	e7fe      	b.n	8001c2a <BusFault_Handler+0x4>

08001c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <UsageFault_Handler+0x4>

08001c32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc80      	pop	{r7}
 8001c3c:	4770      	bx	lr

08001c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr

08001c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c5a:	f000 fa37 	bl	80020cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <USART1_IRQHandler+0x64>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d022      	beq.n	8001cbe <USART1_IRQHandler+0x5a>
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <USART1_IRQHandler+0x64>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 0320 	and.w	r3, r3, #32
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d01b      	beq.n	8001cbe <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <USART1_IRQHandler+0x64>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8001c8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <USART1_IRQHandler+0x68>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	3301      	adds	r3, #1
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c9c:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8001c9e:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <USART1_IRQHandler+0x6c>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	79ba      	ldrb	r2, [r7, #6]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d009      	beq.n	8001cbe <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <USART1_IRQHandler+0x68>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4a08      	ldr	r2, [pc, #32]	; (8001cd4 <USART1_IRQHandler+0x70>)
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <USART1_IRQHandler+0x68>)
 8001cba:	79bb      	ldrb	r3, [r7, #6]
 8001cbc:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8001cbe:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr
 8001cc8:	200000d8 	.word	0x200000d8
 8001ccc:	200003dc 	.word	0x200003dc
 8001cd0:	200003dd 	.word	0x200003dd
 8001cd4:	200003e0 	.word	0x200003e0

08001cd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001cde:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <USART2_IRQHandler+0x68>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d022      	beq.n	8001d32 <USART2_IRQHandler+0x5a>
 8001cec:	4b14      	ldr	r3, [pc, #80]	; (8001d40 <USART2_IRQHandler+0x68>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d01b      	beq.n	8001d32 <USART2_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <USART2_IRQHandler+0x68>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <USART2_IRQHandler+0x6c>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d10:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <USART2_IRQHandler+0x70>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	79ba      	ldrb	r2, [r7, #6]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d009      	beq.n	8001d32 <USART2_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <USART2_IRQHandler+0x6c>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	4619      	mov	r1, r3
 8001d26:	4a09      	ldr	r2, [pc, #36]	; (8001d4c <USART2_IRQHandler+0x74>)
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <USART2_IRQHandler+0x6c>)
 8001d2e:	79bb      	ldrb	r3, [r7, #6]
 8001d30:	7013      	strb	r3, [r2, #0]
		}
	}

	return
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d32:	4803      	ldr	r0, [pc, #12]	; (8001d40 <USART2_IRQHandler+0x68>)
 8001d34:	f001 fd4e 	bl	80037d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000120 	.word	0x20000120
 8001d44:	20000420 	.word	0x20000420
 8001d48:	20000421 	.word	0x20000421
 8001d4c:	20000424 	.word	0x20000424

08001d50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return 1;
 8001d54:	2301      	movs	r3, #1
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr

08001d5e <_kill>:

int _kill(int pid, int sig)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b082      	sub	sp, #8
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d68:	f002 fd04 	bl	8004774 <__errno>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2216      	movs	r2, #22
 8001d70:	601a      	str	r2, [r3, #0]
  return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_exit>:

void _exit (int status)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d86:	f04f 31ff 	mov.w	r1, #4294967295
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ffe7 	bl	8001d5e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d90:	e7fe      	b.n	8001d90 <_exit+0x12>

08001d92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e00a      	b.n	8001dba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001da4:	f3af 8000 	nop.w
 8001da8:	4601      	mov	r1, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	60ba      	str	r2, [r7, #8]
 8001db0:	b2ca      	uxtb	r2, r1
 8001db2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	3301      	adds	r3, #1
 8001db8:	617b      	str	r3, [r7, #20]
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	dbf0      	blt.n	8001da4 <_read+0x12>
  }

  return len;
 8001dc2:	687b      	ldr	r3, [r7, #4]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e009      	b.n	8001df2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	1c5a      	adds	r2, r3, #1
 8001de2:	60ba      	str	r2, [r7, #8]
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	dbf1      	blt.n	8001dde <_write+0x12>
  }
  return len;
 8001dfa:	687b      	ldr	r3, [r7, #4]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_close>:

int _close(int file)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b083      	sub	sp, #12
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e2a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr

08001e38 <_isatty>:

int _isatty(int file)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bc80      	pop	{r7}
 8001e62:	4770      	bx	lr

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f002 fc6e 	bl	8004774 <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20002800 	.word	0x20002800
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	200003d8 	.word	0x200003d8
 8001ecc:	200005b8 	.word	0x200005b8

08001ed0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ed4:	bf00      	nop
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <gsm_available>:
volatile gsm_rx_buffer_index_t gsm_rx_buffer_head = 0;
volatile gsm_rx_buffer_index_t gsm_rx_buffer_tail = 0;
uint8_t gsm_rx_buffer[GSM_RX_BUFFER_SIZE] = {0,};

int16_t gsm_available(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
	return ((uint16_t)(GSM_RX_BUFFER_SIZE + gsm_rx_buffer_head - gsm_rx_buffer_tail)) % GSM_RX_BUFFER_SIZE;
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <gsm_available+0x2c>)
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <gsm_available+0x30>)
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3340      	adds	r3, #64	; 0x40
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	b21b      	sxth	r3, r3
 8001efa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001efe:	b21b      	sxth	r3, r3
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr
 8001f08:	200003dc 	.word	0x200003dc
 8001f0c:	200003dd 	.word	0x200003dd

08001f10 <gsm_read>:

int16_t gsm_read(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
	if(gsm_rx_buffer_head == gsm_rx_buffer_tail)
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <gsm_read+0x4c>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <gsm_read+0x50>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d102      	bne.n	8001f2c <gsm_read+0x1c>
	{
		return -1;
 8001f26:	f04f 33ff 	mov.w	r3, #4294967295
 8001f2a:	e012      	b.n	8001f52 <gsm_read+0x42>
	}
	else
	{
		unsigned char c = gsm_rx_buffer[gsm_rx_buffer_tail];
 8001f2c:	4b0c      	ldr	r3, [pc, #48]	; (8001f60 <gsm_read+0x50>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	461a      	mov	r2, r3
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <gsm_read+0x54>)
 8001f36:	5c9b      	ldrb	r3, [r3, r2]
 8001f38:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_tail = (gsm_rx_buffer_index_t)(gsm_rx_buffer_tail + 1) % GSM_RX_BUFFER_SIZE;
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <gsm_read+0x50>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	3301      	adds	r3, #1
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <gsm_read+0x50>)
 8001f4c:	701a      	strb	r2, [r3, #0]
		return c;
 8001f4e:	79fb      	ldrb	r3, [r7, #7]
 8001f50:	b21b      	sxth	r3, r3
	}
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	200003dc 	.word	0x200003dc
 8001f60:	200003dd 	.word	0x200003dd
 8001f64:	200003e0 	.word	0x200003e0

08001f68 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <dbg_available+0x2c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <dbg_available+0x30>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	3340      	adds	r3, #64	; 0x40
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f8a:	b21b      	sxth	r3, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000420 	.word	0x20000420
 8001f98:	20000421 	.word	0x20000421

08001f9c <dbg_read>:

int16_t dbg_read(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <dbg_read+0x4c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2da      	uxtb	r2, r3
 8001fa8:	4b10      	ldr	r3, [pc, #64]	; (8001fec <dbg_read+0x50>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d102      	bne.n	8001fb8 <dbg_read+0x1c>
	{
		return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb6:	e012      	b.n	8001fde <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <dbg_read+0x50>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <dbg_read+0x54>)
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <dbg_read+0x50>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	3301      	adds	r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <dbg_read+0x50>)
 8001fd8:	701a      	strb	r2, [r3, #0]
		return c;
 8001fda:	79fb      	ldrb	r3, [r7, #7]
 8001fdc:	b21b      	sxth	r3, r3
	}
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	20000420 	.word	0x20000420
 8001fec:	20000421 	.word	0x20000421
 8001ff0:	20000424 	.word	0x20000424

08001ff4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ff4:	f7ff ff6c 	bl	8001ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff8:	480b      	ldr	r0, [pc, #44]	; (8002028 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ffa:	490c      	ldr	r1, [pc, #48]	; (800202c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ffc:	4a0c      	ldr	r2, [pc, #48]	; (8002030 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001ffe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002000:	e002      	b.n	8002008 <LoopCopyDataInit>

08002002 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002002:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002004:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002006:	3304      	adds	r3, #4

08002008 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002008:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800200a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800200c:	d3f9      	bcc.n	8002002 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800200e:	4a09      	ldr	r2, [pc, #36]	; (8002034 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002010:	4c09      	ldr	r4, [pc, #36]	; (8002038 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002012:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002014:	e001      	b.n	800201a <LoopFillZerobss>

08002016 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002016:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002018:	3204      	adds	r2, #4

0800201a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800201a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800201c:	d3fb      	bcc.n	8002016 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800201e:	f002 fbaf 	bl	8004780 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002022:	f7fe fe73 	bl	8000d0c <main>
  bx lr
 8002026:	4770      	bx	lr
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800202c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002030:	08006060 	.word	0x08006060
  ldr r2, =_sbss
 8002034:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002038:	200005b4 	.word	0x200005b4

0800203c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC1_2_IRQHandler>
	...

08002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_Init+0x28>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_Init+0x28>)
 800204a:	f043 0310 	orr.w	r3, r3, #16
 800204e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002050:	2003      	movs	r0, #3
 8002052:	f000 f95d 	bl	8002310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002056:	200f      	movs	r0, #15
 8002058:	f000 f808 	bl	800206c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800205c:	f7ff fcf6 	bl	8001a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40022000 	.word	0x40022000

0800206c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002074:	4b12      	ldr	r3, [pc, #72]	; (80020c0 <HAL_InitTick+0x54>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b12      	ldr	r3, [pc, #72]	; (80020c4 <HAL_InitTick+0x58>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002082:	fbb3 f3f1 	udiv	r3, r3, r1
 8002086:	fbb2 f3f3 	udiv	r3, r2, r3
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f979 	bl	8002382 <HAL_SYSTICK_Config>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e00e      	b.n	80020b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2b0f      	cmp	r3, #15
 800209e:	d80a      	bhi.n	80020b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a0:	2200      	movs	r2, #0
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	f04f 30ff 	mov.w	r0, #4294967295
 80020a8:	f000 f93d 	bl	8002326 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020ac:	4a06      	ldr	r2, [pc, #24]	; (80020c8 <HAL_InitTick+0x5c>)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000004 	.word	0x20000004
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	20000008 	.word	0x20000008

080020cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_IncTick+0x1c>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	461a      	mov	r2, r3
 80020d6:	4b05      	ldr	r3, [pc, #20]	; (80020ec <HAL_IncTick+0x20>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4413      	add	r3, r2
 80020dc:	4a03      	ldr	r2, [pc, #12]	; (80020ec <HAL_IncTick+0x20>)
 80020de:	6013      	str	r3, [r2, #0]
}
 80020e0:	bf00      	nop
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	2000000c 	.word	0x2000000c
 80020ec:	20000464 	.word	0x20000464

080020f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b02      	ldr	r3, [pc, #8]	; (8002100 <HAL_GetTick+0x10>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr
 8002100:	20000464 	.word	0x20000464

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff fff0 	bl	80020f0 <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffe0 	bl	80020f0 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	2000000c 	.word	0x2000000c

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4906      	ldr	r1, [pc, #24]	; (80021e4 <__NVIC_EnableIRQ+0x34>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	; (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	; (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	bc80      	pop	{r7}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	; 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	; 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022a4:	f3bf 8f4f 	dsb	sy
}
 80022a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <__NVIC_SystemReset+0x24>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80022b2:	4904      	ldr	r1, [pc, #16]	; (80022c4 <__NVIC_SystemReset+0x24>)
 80022b4:	4b04      	ldr	r3, [pc, #16]	; (80022c8 <__NVIC_SystemReset+0x28>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80022ba:	f3bf 8f4f 	dsb	sy
}
 80022be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <__NVIC_SystemReset+0x20>
 80022c4:	e000ed00 	.word	0xe000ed00
 80022c8:	05fa0004 	.word	0x05fa0004

080022cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022dc:	d301      	bcc.n	80022e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022de:	2301      	movs	r3, #1
 80022e0:	e00f      	b.n	8002302 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e2:	4a0a      	ldr	r2, [pc, #40]	; (800230c <SysTick_Config+0x40>)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ea:	210f      	movs	r1, #15
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f7ff ff7a 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f4:	4b05      	ldr	r3, [pc, #20]	; (800230c <SysTick_Config+0x40>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fa:	4b04      	ldr	r3, [pc, #16]	; (800230c <SysTick_Config+0x40>)
 80022fc:	2207      	movs	r2, #7
 80022fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	e000e010 	.word	0xe000e010

08002310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff17 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002326:	b580      	push	{r7, lr}
 8002328:	b086      	sub	sp, #24
 800232a:	af00      	add	r7, sp, #0
 800232c:	4603      	mov	r3, r0
 800232e:	60b9      	str	r1, [r7, #8]
 8002330:	607a      	str	r2, [r7, #4]
 8002332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002338:	f7ff ff2c 	bl	8002194 <__NVIC_GetPriorityGrouping>
 800233c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	68b9      	ldr	r1, [r7, #8]
 8002342:	6978      	ldr	r0, [r7, #20]
 8002344:	f7ff ff7a 	bl	800223c <NVIC_EncodePriority>
 8002348:	4602      	mov	r2, r0
 800234a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800234e:	4611      	mov	r1, r2
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff ff49 	bl	80021e8 <__NVIC_SetPriority>
}
 8002356:	bf00      	nop
 8002358:	3718      	adds	r7, #24
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	4603      	mov	r3, r0
 8002366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff ff1f 	bl	80021b0 <__NVIC_EnableIRQ>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800237e:	f7ff ff8f 	bl	80022a0 <__NVIC_SystemReset>

08002382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b082      	sub	sp, #8
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7ff ff9e 	bl	80022cc <SysTick_Config>
 8002390:	4603      	mov	r3, r0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}

0800239a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800239a:	b480      	push	{r7}
 800239c:	b085      	sub	sp, #20
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d008      	beq.n	80023c4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2204      	movs	r2, #4
 80023b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e020      	b.n	8002406 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 020e 	bic.w	r2, r2, #14
 80023d2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0201 	bic.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	2101      	movs	r1, #1
 80023ee:	fa01 f202 	lsl.w	r2, r1, r2
 80023f2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	bc80      	pop	{r7}
 800240e:	4770      	bx	lr

08002410 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d005      	beq.n	8002434 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2204      	movs	r2, #4
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	73fb      	strb	r3, [r7, #15]
 8002432:	e051      	b.n	80024d8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f022 020e 	bic.w	r2, r2, #14
 8002442:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a22      	ldr	r2, [pc, #136]	; (80024e4 <HAL_DMA_Abort_IT+0xd4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d029      	beq.n	80024b2 <HAL_DMA_Abort_IT+0xa2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a21      	ldr	r2, [pc, #132]	; (80024e8 <HAL_DMA_Abort_IT+0xd8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d022      	beq.n	80024ae <HAL_DMA_Abort_IT+0x9e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a1f      	ldr	r2, [pc, #124]	; (80024ec <HAL_DMA_Abort_IT+0xdc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01a      	beq.n	80024a8 <HAL_DMA_Abort_IT+0x98>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a1e      	ldr	r2, [pc, #120]	; (80024f0 <HAL_DMA_Abort_IT+0xe0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d012      	beq.n	80024a2 <HAL_DMA_Abort_IT+0x92>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_DMA_Abort_IT+0xe4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d00a      	beq.n	800249c <HAL_DMA_Abort_IT+0x8c>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a1b      	ldr	r2, [pc, #108]	; (80024f8 <HAL_DMA_Abort_IT+0xe8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d102      	bne.n	8002496 <HAL_DMA_Abort_IT+0x86>
 8002490:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002494:	e00e      	b.n	80024b4 <HAL_DMA_Abort_IT+0xa4>
 8002496:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800249a:	e00b      	b.n	80024b4 <HAL_DMA_Abort_IT+0xa4>
 800249c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024a0:	e008      	b.n	80024b4 <HAL_DMA_Abort_IT+0xa4>
 80024a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024a6:	e005      	b.n	80024b4 <HAL_DMA_Abort_IT+0xa4>
 80024a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ac:	e002      	b.n	80024b4 <HAL_DMA_Abort_IT+0xa4>
 80024ae:	2310      	movs	r3, #16
 80024b0:	e000      	b.n	80024b4 <HAL_DMA_Abort_IT+0xa4>
 80024b2:	2301      	movs	r3, #1
 80024b4:	4a11      	ldr	r2, [pc, #68]	; (80024fc <HAL_DMA_Abort_IT+0xec>)
 80024b6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	4798      	blx	r3
    } 
  }
  return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40020008 	.word	0x40020008
 80024e8:	4002001c 	.word	0x4002001c
 80024ec:	40020030 	.word	0x40020030
 80024f0:	40020044 	.word	0x40020044
 80024f4:	40020058 	.word	0x40020058
 80024f8:	4002006c 	.word	0x4002006c
 80024fc:	40020000 	.word	0x40020000

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b08b      	sub	sp, #44	; 0x2c
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800250a:	2300      	movs	r3, #0
 800250c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800250e:	2300      	movs	r3, #0
 8002510:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002512:	e161      	b.n	80027d8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002514:	2201      	movs	r2, #1
 8002516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	429a      	cmp	r2, r3
 800252e:	f040 8150 	bne.w	80027d2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4a97      	ldr	r2, [pc, #604]	; (8002794 <HAL_GPIO_Init+0x294>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d05e      	beq.n	80025fa <HAL_GPIO_Init+0xfa>
 800253c:	4a95      	ldr	r2, [pc, #596]	; (8002794 <HAL_GPIO_Init+0x294>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d875      	bhi.n	800262e <HAL_GPIO_Init+0x12e>
 8002542:	4a95      	ldr	r2, [pc, #596]	; (8002798 <HAL_GPIO_Init+0x298>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d058      	beq.n	80025fa <HAL_GPIO_Init+0xfa>
 8002548:	4a93      	ldr	r2, [pc, #588]	; (8002798 <HAL_GPIO_Init+0x298>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d86f      	bhi.n	800262e <HAL_GPIO_Init+0x12e>
 800254e:	4a93      	ldr	r2, [pc, #588]	; (800279c <HAL_GPIO_Init+0x29c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d052      	beq.n	80025fa <HAL_GPIO_Init+0xfa>
 8002554:	4a91      	ldr	r2, [pc, #580]	; (800279c <HAL_GPIO_Init+0x29c>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d869      	bhi.n	800262e <HAL_GPIO_Init+0x12e>
 800255a:	4a91      	ldr	r2, [pc, #580]	; (80027a0 <HAL_GPIO_Init+0x2a0>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d04c      	beq.n	80025fa <HAL_GPIO_Init+0xfa>
 8002560:	4a8f      	ldr	r2, [pc, #572]	; (80027a0 <HAL_GPIO_Init+0x2a0>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d863      	bhi.n	800262e <HAL_GPIO_Init+0x12e>
 8002566:	4a8f      	ldr	r2, [pc, #572]	; (80027a4 <HAL_GPIO_Init+0x2a4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d046      	beq.n	80025fa <HAL_GPIO_Init+0xfa>
 800256c:	4a8d      	ldr	r2, [pc, #564]	; (80027a4 <HAL_GPIO_Init+0x2a4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d85d      	bhi.n	800262e <HAL_GPIO_Init+0x12e>
 8002572:	2b12      	cmp	r3, #18
 8002574:	d82a      	bhi.n	80025cc <HAL_GPIO_Init+0xcc>
 8002576:	2b12      	cmp	r3, #18
 8002578:	d859      	bhi.n	800262e <HAL_GPIO_Init+0x12e>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <HAL_GPIO_Init+0x80>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	080025fb 	.word	0x080025fb
 8002584:	080025d5 	.word	0x080025d5
 8002588:	080025e7 	.word	0x080025e7
 800258c:	08002629 	.word	0x08002629
 8002590:	0800262f 	.word	0x0800262f
 8002594:	0800262f 	.word	0x0800262f
 8002598:	0800262f 	.word	0x0800262f
 800259c:	0800262f 	.word	0x0800262f
 80025a0:	0800262f 	.word	0x0800262f
 80025a4:	0800262f 	.word	0x0800262f
 80025a8:	0800262f 	.word	0x0800262f
 80025ac:	0800262f 	.word	0x0800262f
 80025b0:	0800262f 	.word	0x0800262f
 80025b4:	0800262f 	.word	0x0800262f
 80025b8:	0800262f 	.word	0x0800262f
 80025bc:	0800262f 	.word	0x0800262f
 80025c0:	0800262f 	.word	0x0800262f
 80025c4:	080025dd 	.word	0x080025dd
 80025c8:	080025f1 	.word	0x080025f1
 80025cc:	4a76      	ldr	r2, [pc, #472]	; (80027a8 <HAL_GPIO_Init+0x2a8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d013      	beq.n	80025fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025d2:	e02c      	b.n	800262e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	623b      	str	r3, [r7, #32]
          break;
 80025da:	e029      	b.n	8002630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	3304      	adds	r3, #4
 80025e2:	623b      	str	r3, [r7, #32]
          break;
 80025e4:	e024      	b.n	8002630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	3308      	adds	r3, #8
 80025ec:	623b      	str	r3, [r7, #32]
          break;
 80025ee:	e01f      	b.n	8002630 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	330c      	adds	r3, #12
 80025f6:	623b      	str	r3, [r7, #32]
          break;
 80025f8:	e01a      	b.n	8002630 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d102      	bne.n	8002608 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002602:	2304      	movs	r3, #4
 8002604:	623b      	str	r3, [r7, #32]
          break;
 8002606:	e013      	b.n	8002630 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d105      	bne.n	800261c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002610:	2308      	movs	r3, #8
 8002612:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	611a      	str	r2, [r3, #16]
          break;
 800261a:	e009      	b.n	8002630 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800261c:	2308      	movs	r3, #8
 800261e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	615a      	str	r2, [r3, #20]
          break;
 8002626:	e003      	b.n	8002630 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002628:	2300      	movs	r3, #0
 800262a:	623b      	str	r3, [r7, #32]
          break;
 800262c:	e000      	b.n	8002630 <HAL_GPIO_Init+0x130>
          break;
 800262e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	2bff      	cmp	r3, #255	; 0xff
 8002634:	d801      	bhi.n	800263a <HAL_GPIO_Init+0x13a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	e001      	b.n	800263e <HAL_GPIO_Init+0x13e>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3304      	adds	r3, #4
 800263e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2bff      	cmp	r3, #255	; 0xff
 8002644:	d802      	bhi.n	800264c <HAL_GPIO_Init+0x14c>
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	e002      	b.n	8002652 <HAL_GPIO_Init+0x152>
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	3b08      	subs	r3, #8
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	210f      	movs	r1, #15
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	fa01 f303 	lsl.w	r3, r1, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	401a      	ands	r2, r3
 8002664:	6a39      	ldr	r1, [r7, #32]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	fa01 f303 	lsl.w	r3, r1, r3
 800266c:	431a      	orrs	r2, r3
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 80a9 	beq.w	80027d2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002680:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_GPIO_Init+0x2ac>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	4a49      	ldr	r2, [pc, #292]	; (80027ac <HAL_GPIO_Init+0x2ac>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6193      	str	r3, [r2, #24]
 800268c:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_GPIO_Init+0x2ac>)
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	60bb      	str	r3, [r7, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002698:	4a45      	ldr	r2, [pc, #276]	; (80027b0 <HAL_GPIO_Init+0x2b0>)
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	089b      	lsrs	r3, r3, #2
 800269e:	3302      	adds	r3, #2
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	220f      	movs	r2, #15
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a3d      	ldr	r2, [pc, #244]	; (80027b4 <HAL_GPIO_Init+0x2b4>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_GPIO_Init+0x1e0>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a3c      	ldr	r2, [pc, #240]	; (80027b8 <HAL_GPIO_Init+0x2b8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <HAL_GPIO_Init+0x1dc>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a3b      	ldr	r2, [pc, #236]	; (80027bc <HAL_GPIO_Init+0x2bc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d101      	bne.n	80026d8 <HAL_GPIO_Init+0x1d8>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e004      	b.n	80026e2 <HAL_GPIO_Init+0x1e2>
 80026d8:	2303      	movs	r3, #3
 80026da:	e002      	b.n	80026e2 <HAL_GPIO_Init+0x1e2>
 80026dc:	2301      	movs	r3, #1
 80026de:	e000      	b.n	80026e2 <HAL_GPIO_Init+0x1e2>
 80026e0:	2300      	movs	r3, #0
 80026e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e4:	f002 0203 	and.w	r2, r2, #3
 80026e8:	0092      	lsls	r2, r2, #2
 80026ea:	4093      	lsls	r3, r2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80026f2:	492f      	ldr	r1, [pc, #188]	; (80027b0 <HAL_GPIO_Init+0x2b0>)
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	089b      	lsrs	r3, r3, #2
 80026f8:	3302      	adds	r3, #2
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d006      	beq.n	800271a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	492b      	ldr	r1, [pc, #172]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	4313      	orrs	r3, r2
 8002716:	608b      	str	r3, [r1, #8]
 8002718:	e006      	b.n	8002728 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	43db      	mvns	r3, r3
 8002722:	4927      	ldr	r1, [pc, #156]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002724:	4013      	ands	r3, r2
 8002726:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d006      	beq.n	8002742 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002736:	68da      	ldr	r2, [r3, #12]
 8002738:	4921      	ldr	r1, [pc, #132]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	60cb      	str	r3, [r1, #12]
 8002740:	e006      	b.n	8002750 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002742:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	43db      	mvns	r3, r3
 800274a:	491d      	ldr	r1, [pc, #116]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 800274c:	4013      	ands	r3, r2
 800274e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	4917      	ldr	r1, [pc, #92]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	604b      	str	r3, [r1, #4]
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800276a:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	43db      	mvns	r3, r3
 8002772:	4913      	ldr	r1, [pc, #76]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002774:	4013      	ands	r3, r2
 8002776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d01f      	beq.n	80027c4 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	490d      	ldr	r1, [pc, #52]	; (80027c0 <HAL_GPIO_Init+0x2c0>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	600b      	str	r3, [r1, #0]
 8002790:	e01f      	b.n	80027d2 <HAL_GPIO_Init+0x2d2>
 8002792:	bf00      	nop
 8002794:	10320000 	.word	0x10320000
 8002798:	10310000 	.word	0x10310000
 800279c:	10220000 	.word	0x10220000
 80027a0:	10210000 	.word	0x10210000
 80027a4:	10120000 	.word	0x10120000
 80027a8:	10110000 	.word	0x10110000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40010800 	.word	0x40010800
 80027b8:	40010c00 	.word	0x40010c00
 80027bc:	40011000 	.word	0x40011000
 80027c0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_GPIO_Init+0x2f4>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	43db      	mvns	r3, r3
 80027cc:	4909      	ldr	r1, [pc, #36]	; (80027f4 <HAL_GPIO_Init+0x2f4>)
 80027ce:	4013      	ands	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	3301      	adds	r3, #1
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	fa22 f303 	lsr.w	r3, r2, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f47f ae96 	bne.w	8002514 <HAL_GPIO_Init+0x14>
  }
}
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	372c      	adds	r7, #44	; 0x2c
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr
 80027f4:	40010400 	.word	0x40010400

080027f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	807b      	strh	r3, [r7, #2]
 8002804:	4613      	mov	r3, r2
 8002806:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002808:	787b      	ldrb	r3, [r7, #1]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800280e:	887a      	ldrh	r2, [r7, #2]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002814:	e003      	b.n	800281e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002816:	887b      	ldrh	r3, [r7, #2]
 8002818:	041a      	lsls	r2, r3, #16
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	611a      	str	r2, [r3, #16]
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	460b      	mov	r3, r1
 8002832:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800283a:	887a      	ldrh	r2, [r7, #2]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	041a      	lsls	r2, r3, #16
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	43d9      	mvns	r1, r3
 8002846:	887b      	ldrh	r3, [r7, #2]
 8002848:	400b      	ands	r3, r1
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	611a      	str	r2, [r3, #16]
}
 8002850:	bf00      	nop
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	bc80      	pop	{r7}
 8002858:	4770      	bx	lr
	...

0800285c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e272      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 8087 	beq.w	800298a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800287c:	4b92      	ldr	r3, [pc, #584]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 030c 	and.w	r3, r3, #12
 8002884:	2b04      	cmp	r3, #4
 8002886:	d00c      	beq.n	80028a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002888:	4b8f      	ldr	r3, [pc, #572]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 030c 	and.w	r3, r3, #12
 8002890:	2b08      	cmp	r3, #8
 8002892:	d112      	bne.n	80028ba <HAL_RCC_OscConfig+0x5e>
 8002894:	4b8c      	ldr	r3, [pc, #560]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800289c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028a0:	d10b      	bne.n	80028ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a2:	4b89      	ldr	r3, [pc, #548]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d06c      	beq.n	8002988 <HAL_RCC_OscConfig+0x12c>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d168      	bne.n	8002988 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e24c      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c2:	d106      	bne.n	80028d2 <HAL_RCC_OscConfig+0x76>
 80028c4:	4b80      	ldr	r3, [pc, #512]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a7f      	ldr	r2, [pc, #508]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ce:	6013      	str	r3, [r2, #0]
 80028d0:	e02e      	b.n	8002930 <HAL_RCC_OscConfig+0xd4>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCC_OscConfig+0x98>
 80028da:	4b7b      	ldr	r3, [pc, #492]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a7a      	ldr	r2, [pc, #488]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028e4:	6013      	str	r3, [r2, #0]
 80028e6:	4b78      	ldr	r3, [pc, #480]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a77      	ldr	r2, [pc, #476]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80028ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	e01d      	b.n	8002930 <HAL_RCC_OscConfig+0xd4>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0xbc>
 80028fe:	4b72      	ldr	r3, [pc, #456]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a71      	ldr	r2, [pc, #452]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002904:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b6f      	ldr	r3, [pc, #444]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a6e      	ldr	r2, [pc, #440]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e00b      	b.n	8002930 <HAL_RCC_OscConfig+0xd4>
 8002918:	4b6b      	ldr	r3, [pc, #428]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a6a      	ldr	r2, [pc, #424]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	6013      	str	r3, [r2, #0]
 8002924:	4b68      	ldr	r3, [pc, #416]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a67      	ldr	r2, [pc, #412]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800292a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800292e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d013      	beq.n	8002960 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff fbda 	bl	80020f0 <HAL_GetTick>
 800293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002940:	f7ff fbd6 	bl	80020f0 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b64      	cmp	r3, #100	; 0x64
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e200      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b5d      	ldr	r3, [pc, #372]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0xe4>
 800295e:	e014      	b.n	800298a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002960:	f7ff fbc6 	bl	80020f0 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002968:	f7ff fbc2 	bl	80020f0 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b64      	cmp	r3, #100	; 0x64
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e1ec      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800297a:	4b53      	ldr	r3, [pc, #332]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x10c>
 8002986:	e000      	b.n	800298a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d063      	beq.n	8002a5e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002996:	4b4c      	ldr	r3, [pc, #304]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029a2:	4b49      	ldr	r3, [pc, #292]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 030c 	and.w	r3, r3, #12
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x18c>
 80029ae:	4b46      	ldr	r3, [pc, #280]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x176>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1c0      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b3d      	ldr	r3, [pc, #244]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4939      	ldr	r1, [pc, #228]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e03a      	b.n	8002a5e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b36      	ldr	r3, [pc, #216]	; (8002acc <HAL_RCC_OscConfig+0x270>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f6:	f7ff fb7b 	bl	80020f0 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fe:	f7ff fb77 	bl	80020f0 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1a1      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	4b2d      	ldr	r3, [pc, #180]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b2a      	ldr	r3, [pc, #168]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4927      	ldr	r1, [pc, #156]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e015      	b.n	8002a5e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b26      	ldr	r3, [pc, #152]	; (8002acc <HAL_RCC_OscConfig+0x270>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff fb5a 	bl	80020f0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7ff fb56 	bl	80020f0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e180      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d03a      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	699b      	ldr	r3, [r3, #24]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d019      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	4b17      	ldr	r3, [pc, #92]	; (8002ad0 <HAL_RCC_OscConfig+0x274>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7ff fb3a 	bl	80020f0 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7ff fb36 	bl	80020f0 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e160      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	4b0d      	ldr	r3, [pc, #52]	; (8002ac8 <HAL_RCC_OscConfig+0x26c>)
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f000 face 	bl	8003040 <RCC_Delay>
 8002aa4:	e01c      	b.n	8002ae0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7ff fb20 	bl	80020f0 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab2:	e00f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7ff fb1c 	bl	80020f0 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d908      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e146      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	42420000 	.word	0x42420000
 8002ad0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad4:	4b92      	ldr	r3, [pc, #584]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e9      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0304 	and.w	r3, r3, #4
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80a6 	beq.w	8002c3a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aee:	2300      	movs	r3, #0
 8002af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002af2:	4b8b      	ldr	r3, [pc, #556]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10d      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002afe:	4b88      	ldr	r3, [pc, #544]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b00:	69db      	ldr	r3, [r3, #28]
 8002b02:	4a87      	ldr	r2, [pc, #540]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b08:	61d3      	str	r3, [r2, #28]
 8002b0a:	4b85      	ldr	r3, [pc, #532]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b12:	60bb      	str	r3, [r7, #8]
 8002b14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b16:	2301      	movs	r3, #1
 8002b18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b1a:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <HAL_RCC_OscConfig+0x4c8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d118      	bne.n	8002b58 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b26:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x4c8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	; (8002d24 <HAL_RCC_OscConfig+0x4c8>)
 8002b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b32:	f7ff fadd 	bl	80020f0 <HAL_GetTick>
 8002b36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b38:	e008      	b.n	8002b4c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b3a:	f7ff fad9 	bl	80020f0 <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b64      	cmp	r3, #100	; 0x64
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e103      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b75      	ldr	r3, [pc, #468]	; (8002d24 <HAL_RCC_OscConfig+0x4c8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0f0      	beq.n	8002b3a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d106      	bne.n	8002b6e <HAL_RCC_OscConfig+0x312>
 8002b60:	4b6f      	ldr	r3, [pc, #444]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4a6e      	ldr	r2, [pc, #440]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b66:	f043 0301 	orr.w	r3, r3, #1
 8002b6a:	6213      	str	r3, [r2, #32]
 8002b6c:	e02d      	b.n	8002bca <HAL_RCC_OscConfig+0x36e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0x334>
 8002b76:	4b6a      	ldr	r3, [pc, #424]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	4a69      	ldr	r2, [pc, #420]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b7c:	f023 0301 	bic.w	r3, r3, #1
 8002b80:	6213      	str	r3, [r2, #32]
 8002b82:	4b67      	ldr	r3, [pc, #412]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	4a66      	ldr	r2, [pc, #408]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b88:	f023 0304 	bic.w	r3, r3, #4
 8002b8c:	6213      	str	r3, [r2, #32]
 8002b8e:	e01c      	b.n	8002bca <HAL_RCC_OscConfig+0x36e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d10c      	bne.n	8002bb2 <HAL_RCC_OscConfig+0x356>
 8002b98:	4b61      	ldr	r3, [pc, #388]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4a60      	ldr	r2, [pc, #384]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002b9e:	f043 0304 	orr.w	r3, r3, #4
 8002ba2:	6213      	str	r3, [r2, #32]
 8002ba4:	4b5e      	ldr	r3, [pc, #376]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6213      	str	r3, [r2, #32]
 8002bb0:	e00b      	b.n	8002bca <HAL_RCC_OscConfig+0x36e>
 8002bb2:	4b5b      	ldr	r3, [pc, #364]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4a5a      	ldr	r2, [pc, #360]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	f023 0301 	bic.w	r3, r3, #1
 8002bbc:	6213      	str	r3, [r2, #32]
 8002bbe:	4b58      	ldr	r3, [pc, #352]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bc0:	6a1b      	ldr	r3, [r3, #32]
 8002bc2:	4a57      	ldr	r2, [pc, #348]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bc4:	f023 0304 	bic.w	r3, r3, #4
 8002bc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d015      	beq.n	8002bfe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bd2:	f7ff fa8d 	bl	80020f0 <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd8:	e00a      	b.n	8002bf0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bda:	f7ff fa89 	bl	80020f0 <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d901      	bls.n	8002bf0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e0b1      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf0:	4b4b      	ldr	r3, [pc, #300]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002bf2:	6a1b      	ldr	r3, [r3, #32]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ee      	beq.n	8002bda <HAL_RCC_OscConfig+0x37e>
 8002bfc:	e014      	b.n	8002c28 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bfe:	f7ff fa77 	bl	80020f0 <HAL_GetTick>
 8002c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c04:	e00a      	b.n	8002c1c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c06:	f7ff fa73 	bl	80020f0 <HAL_GetTick>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e09b      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c1c:	4b40      	ldr	r3, [pc, #256]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ee      	bne.n	8002c06 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c2e:	4b3c      	ldr	r3, [pc, #240]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	4a3b      	ldr	r2, [pc, #236]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c38:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f000 8087 	beq.w	8002d52 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c44:	4b36      	ldr	r3, [pc, #216]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f003 030c 	and.w	r3, r3, #12
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d061      	beq.n	8002d14 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d146      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5e:	f7ff fa47 	bl	80020f0 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c66:	f7ff fa43 	bl	80020f0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e06d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c78:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f0      	bne.n	8002c66 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c8c:	d108      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c8e:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4921      	ldr	r1, [pc, #132]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ca0:	4b1f      	ldr	r3, [pc, #124]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a19      	ldr	r1, [r3, #32]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	491b      	ldr	r1, [pc, #108]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <HAL_RCC_OscConfig+0x4cc>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cbe:	f7ff fa17 	bl	80020f0 <HAL_GetTick>
 8002cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc4:	e008      	b.n	8002cd8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc6:	f7ff fa13 	bl	80020f0 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e03d      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0f0      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x46a>
 8002ce4:	e035      	b.n	8002d52 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_OscConfig+0x4cc>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cec:	f7ff fa00 	bl	80020f0 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7ff f9fc 	bl	80020f0 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e026      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_OscConfig+0x4c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x498>
 8002d12:	e01e      	b.n	8002d52 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d107      	bne.n	8002d2c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e019      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
 8002d20:	40021000 	.word	0x40021000
 8002d24:	40007000 	.word	0x40007000
 8002d28:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_OscConfig+0x500>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d106      	bne.n	8002d4e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d001      	beq.n	8002d52 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e000      	b.n	8002d54 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40021000 	.word	0x40021000

08002d60 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0d0      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d910      	bls.n	8002da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b67      	ldr	r3, [pc, #412]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0207 	bic.w	r2, r3, #7
 8002d8a:	4965      	ldr	r1, [pc, #404]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d92:	4b63      	ldr	r3, [pc, #396]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d001      	beq.n	8002da4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e0b8      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d020      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0304 	and.w	r3, r3, #4
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dbc:	4b59      	ldr	r3, [pc, #356]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4a58      	ldr	r2, [pc, #352]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002dc6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d005      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd4:	4b53      	ldr	r3, [pc, #332]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	4a52      	ldr	r2, [pc, #328]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dda:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002dde:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de0:	4b50      	ldr	r3, [pc, #320]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	494d      	ldr	r1, [pc, #308]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d040      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d107      	bne.n	8002e16 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e06:	4b47      	ldr	r3, [pc, #284]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d115      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e07f      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d107      	bne.n	8002e2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1e:	4b41      	ldr	r3, [pc, #260]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d109      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e073      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2e:	4b3d      	ldr	r3, [pc, #244]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e06b      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e3e:	4b39      	ldr	r3, [pc, #228]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f023 0203 	bic.w	r2, r3, #3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	4936      	ldr	r1, [pc, #216]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e50:	f7ff f94e 	bl	80020f0 <HAL_GetTick>
 8002e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e56:	e00a      	b.n	8002e6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e58:	f7ff f94a 	bl	80020f0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e053      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e6e:	4b2d      	ldr	r3, [pc, #180]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 020c 	and.w	r2, r3, #12
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d1eb      	bne.n	8002e58 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e80:	4b27      	ldr	r3, [pc, #156]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d210      	bcs.n	8002eb0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e8e:	4b24      	ldr	r3, [pc, #144]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f023 0207 	bic.w	r2, r3, #7
 8002e96:	4922      	ldr	r1, [pc, #136]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e9e:	4b20      	ldr	r3, [pc, #128]	; (8002f20 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e032      	b.n	8002f16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ebc:	4b19      	ldr	r3, [pc, #100]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	4916      	ldr	r1, [pc, #88]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d009      	beq.n	8002eee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002eda:	4b12      	ldr	r3, [pc, #72]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	490e      	ldr	r1, [pc, #56]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002eee:	f000 f821 	bl	8002f34 <HAL_RCC_GetSysClockFreq>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	; (8002f24 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	091b      	lsrs	r3, r3, #4
 8002efa:	f003 030f 	and.w	r3, r3, #15
 8002efe:	490a      	ldr	r1, [pc, #40]	; (8002f28 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	5ccb      	ldrb	r3, [r1, r3]
 8002f02:	fa22 f303 	lsr.w	r3, r2, r3
 8002f06:	4a09      	ldr	r2, [pc, #36]	; (8002f2c <HAL_RCC_ClockConfig+0x1cc>)
 8002f08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f0a:	4b09      	ldr	r3, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1d0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff f8ac 	bl	800206c <HAL_InitTick>

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3710      	adds	r7, #16
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40022000 	.word	0x40022000
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08005e4c 	.word	0x08005e4c
 8002f2c:	20000004 	.word	0x20000004
 8002f30:	20000008 	.word	0x20000008

08002f34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	60bb      	str	r3, [r7, #8]
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b04      	cmp	r3, #4
 8002f5c:	d002      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x30>
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d003      	beq.n	8002f6a <HAL_RCC_GetSysClockFreq+0x36>
 8002f62:	e027      	b.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f64:	4b19      	ldr	r3, [pc, #100]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002f66:	613b      	str	r3, [r7, #16]
      break;
 8002f68:	e027      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	0c9b      	lsrs	r3, r3, #18
 8002f6e:	f003 030f 	and.w	r3, r3, #15
 8002f72:	4a17      	ldr	r2, [pc, #92]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d010      	beq.n	8002fa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f82:	4b11      	ldr	r3, [pc, #68]	; (8002fc8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	0c5b      	lsrs	r3, r3, #17
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002f96:	fb03 f202 	mul.w	r2, r3, r2
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa0:	617b      	str	r3, [r7, #20]
 8002fa2:	e004      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a0c      	ldr	r2, [pc, #48]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	613b      	str	r3, [r7, #16]
      break;
 8002fb2:	e002      	b.n	8002fba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <HAL_RCC_GetSysClockFreq+0x98>)
 8002fb6:	613b      	str	r3, [r7, #16]
      break;
 8002fb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fba:	693b      	ldr	r3, [r7, #16]
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000
 8002fcc:	007a1200 	.word	0x007a1200
 8002fd0:	08005e64 	.word	0x08005e64
 8002fd4:	08005e74 	.word	0x08005e74
 8002fd8:	003d0900 	.word	0x003d0900

08002fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe0:	4b02      	ldr	r3, [pc, #8]	; (8002fec <HAL_RCC_GetHCLKFreq+0x10>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	20000004 	.word	0x20000004

08002ff0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ff4:	f7ff fff2 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	; (8003010 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	; (8003014 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40021000 	.word	0x40021000
 8003014:	08005e5c 	.word	0x08005e5c

08003018 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800301c:	f7ff ffde 	bl	8002fdc <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	0adb      	lsrs	r3, r3, #11
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	; (800303c <HAL_RCC_GetPCLK2Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	08005e5c 	.word	0x08005e5c

08003040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003048:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <RCC_Delay+0x34>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	; (8003078 <RCC_Delay+0x38>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a5b      	lsrs	r3, r3, #9
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800305c:	bf00      	nop
  }
  while (Delay --);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e5a      	subs	r2, r3, #1
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f9      	bne.n	800305c <RCC_Delay+0x1c>
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	20000004 	.word	0x20000004
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e041      	b.n	8003112 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe fd04 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	4619      	mov	r1, r3
 80030ba:	4610      	mov	r0, r2
 80030bc:	f000 f970 	bl	80033a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2201      	movs	r2, #1
 80030ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
	...

0800311c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d001      	beq.n	8003134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e035      	b.n	80031a0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f042 0201 	orr.w	r2, r2, #1
 800314a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_TIM_Base_Start_IT+0x90>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_TIM_Base_Start_IT+0x4e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315e:	d004      	beq.n	800316a <HAL_TIM_Base_Start_IT+0x4e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a12      	ldr	r2, [pc, #72]	; (80031b0 <HAL_TIM_Base_Start_IT+0x94>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d111      	bne.n	800318e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b06      	cmp	r3, #6
 800317a:	d010      	beq.n	800319e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318c:	e007      	b.n	800319e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0201 	orr.w	r2, r2, #1
 800319c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	40012c00 	.word	0x40012c00
 80031b0:	40000400 	.word	0x40000400

080031b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6a1a      	ldr	r2, [r3, #32]
 80031d2:	f241 1311 	movw	r3, #4369	; 0x1111
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10f      	bne.n	80031fc <HAL_TIM_Base_Stop_IT+0x48>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6a1a      	ldr	r2, [r3, #32]
 80031e2:	f240 4344 	movw	r3, #1092	; 0x444
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d107      	bne.n	80031fc <HAL_TIM_Base_Stop_IT+0x48>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f022 0201 	bic.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003224:	2b01      	cmp	r3, #1
 8003226:	d101      	bne.n	800322c <HAL_TIM_ConfigClockSource+0x1c>
 8003228:	2302      	movs	r3, #2
 800322a:	e0b4      	b.n	8003396 <HAL_TIM_ConfigClockSource+0x186>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800324a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003252:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003264:	d03e      	beq.n	80032e4 <HAL_TIM_ConfigClockSource+0xd4>
 8003266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800326a:	f200 8087 	bhi.w	800337c <HAL_TIM_ConfigClockSource+0x16c>
 800326e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003272:	f000 8086 	beq.w	8003382 <HAL_TIM_ConfigClockSource+0x172>
 8003276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800327a:	d87f      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 800327c:	2b70      	cmp	r3, #112	; 0x70
 800327e:	d01a      	beq.n	80032b6 <HAL_TIM_ConfigClockSource+0xa6>
 8003280:	2b70      	cmp	r3, #112	; 0x70
 8003282:	d87b      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 8003284:	2b60      	cmp	r3, #96	; 0x60
 8003286:	d050      	beq.n	800332a <HAL_TIM_ConfigClockSource+0x11a>
 8003288:	2b60      	cmp	r3, #96	; 0x60
 800328a:	d877      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 800328c:	2b50      	cmp	r3, #80	; 0x50
 800328e:	d03c      	beq.n	800330a <HAL_TIM_ConfigClockSource+0xfa>
 8003290:	2b50      	cmp	r3, #80	; 0x50
 8003292:	d873      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 8003294:	2b40      	cmp	r3, #64	; 0x40
 8003296:	d058      	beq.n	800334a <HAL_TIM_ConfigClockSource+0x13a>
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d86f      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 800329c:	2b30      	cmp	r3, #48	; 0x30
 800329e:	d064      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x15a>
 80032a0:	2b30      	cmp	r3, #48	; 0x30
 80032a2:	d86b      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d060      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x15a>
 80032a8:	2b20      	cmp	r3, #32
 80032aa:	d867      	bhi.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d05c      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x15a>
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d05a      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x15a>
 80032b4:	e062      	b.n	800337c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032c6:	f000 f93a 	bl	800353e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80032d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	609a      	str	r2, [r3, #8]
      break;
 80032e2:	e04f      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032f4:	f000 f923 	bl	800353e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003306:	609a      	str	r2, [r3, #8]
      break;
 8003308:	e03c      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003316:	461a      	mov	r2, r3
 8003318:	f000 f89a 	bl	8003450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2150      	movs	r1, #80	; 0x50
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f8f1 	bl	800350a <TIM_ITRx_SetConfig>
      break;
 8003328:	e02c      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003336:	461a      	mov	r2, r3
 8003338:	f000 f8b8 	bl	80034ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2160      	movs	r1, #96	; 0x60
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f8e1 	bl	800350a <TIM_ITRx_SetConfig>
      break;
 8003348:	e01c      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003356:	461a      	mov	r2, r3
 8003358:	f000 f87a 	bl	8003450 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2140      	movs	r1, #64	; 0x40
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f8d1 	bl	800350a <TIM_ITRx_SetConfig>
      break;
 8003368:	e00c      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4619      	mov	r1, r3
 8003374:	4610      	mov	r0, r2
 8003376:	f000 f8c8 	bl	800350a <TIM_ITRx_SetConfig>
      break;
 800337a:	e003      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	73fb      	strb	r3, [r7, #15]
      break;
 8003380:	e000      	b.n	8003384 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003382:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003394:	7bfb      	ldrb	r3, [r7, #15]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
	...

080033a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a25      	ldr	r2, [pc, #148]	; (8003448 <TIM_Base_SetConfig+0xa8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <TIM_Base_SetConfig+0x28>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033be:	d003      	beq.n	80033c8 <TIM_Base_SetConfig+0x28>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a22      	ldr	r2, [pc, #136]	; (800344c <TIM_Base_SetConfig+0xac>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d108      	bne.n	80033da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a1a      	ldr	r2, [pc, #104]	; (8003448 <TIM_Base_SetConfig+0xa8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <TIM_Base_SetConfig+0x52>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e8:	d003      	beq.n	80033f2 <TIM_Base_SetConfig+0x52>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a17      	ldr	r2, [pc, #92]	; (800344c <TIM_Base_SetConfig+0xac>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d108      	bne.n	8003404 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <TIM_Base_SetConfig+0xa8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d103      	bne.n	8003438 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	691a      	ldr	r2, [r3, #16]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	615a      	str	r2, [r3, #20]
}
 800343e:	bf00      	nop
 8003440:	3714      	adds	r7, #20
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40000400 	.word	0x40000400

08003450 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a1b      	ldr	r3, [r3, #32]
 8003460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	f023 0201 	bic.w	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800347a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4313      	orrs	r3, r2
 8003484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	f023 030a 	bic.w	r3, r3, #10
 800348c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	4313      	orrs	r3, r2
 8003494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	621a      	str	r2, [r3, #32]
}
 80034a2:	bf00      	nop
 80034a4:	371c      	adds	r7, #28
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	f023 0210 	bic.w	r2, r3, #16
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	031b      	lsls	r3, r3, #12
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	621a      	str	r2, [r3, #32]
}
 8003500:	bf00      	nop
 8003502:	371c      	adds	r7, #28
 8003504:	46bd      	mov	sp, r7
 8003506:	bc80      	pop	{r7}
 8003508:	4770      	bx	lr

0800350a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800350a:	b480      	push	{r7}
 800350c:	b085      	sub	sp, #20
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003520:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	f043 0307 	orr.w	r3, r3, #7
 800352c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]
}
 8003534:	bf00      	nop
 8003536:	3714      	adds	r7, #20
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800353e:	b480      	push	{r7}
 8003540:	b087      	sub	sp, #28
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003558:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	021a      	lsls	r2, r3, #8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	431a      	orrs	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	697a      	ldr	r2, [r7, #20]
 8003568:	4313      	orrs	r3, r2
 800356a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	609a      	str	r2, [r3, #8]
}
 8003572:	bf00      	nop
 8003574:	371c      	adds	r7, #28
 8003576:	46bd      	mov	sp, r7
 8003578:	bc80      	pop	{r7}
 800357a:	4770      	bx	lr

0800357c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800358c:	2b01      	cmp	r3, #1
 800358e:	d101      	bne.n	8003594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003590:	2302      	movs	r3, #2
 8003592:	e041      	b.n	8003618 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2202      	movs	r2, #2
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a14      	ldr	r2, [pc, #80]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e0:	d004      	beq.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a10      	ldr	r2, [pc, #64]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d10c      	bne.n	8003606 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	68ba      	ldr	r2, [r7, #8]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40012c00 	.word	0x40012c00
 8003628:	40000400 	.word	0x40000400

0800362c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b082      	sub	sp, #8
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e042      	b.n	80036c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fe fa4a 	bl	8001aec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800366e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 fd71 	bl	8004158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003684:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695a      	ldr	r2, [r3, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003694:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68da      	ldr	r2, [r3, #12]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d16d      	bne.n	80037c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_UART_Transmit+0x2c>
 80036f2:	88fb      	ldrh	r3, [r7, #6]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e066      	b.n	80037ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2221      	movs	r2, #33	; 0x21
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800370a:	f7fe fcf1 	bl	80020f0 <HAL_GetTick>
 800370e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	88fa      	ldrh	r2, [r7, #6]
 800371a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	d108      	bne.n	8003738 <HAL_UART_Transmit+0x6c>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d104      	bne.n	8003738 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	61bb      	str	r3, [r7, #24]
 8003736:	e003      	b.n	8003740 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003740:	e02a      	b.n	8003798 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	2200      	movs	r2, #0
 800374a:	2180      	movs	r1, #128	; 0x80
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 faf9 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e036      	b.n	80037ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10b      	bne.n	800377a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	881b      	ldrh	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003770:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	3302      	adds	r3, #2
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	e007      	b.n	800378a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	3301      	adds	r3, #1
 8003788:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800378e:	b29b      	uxth	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1cf      	bne.n	8003742 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2140      	movs	r1, #64	; 0x40
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fac9 	bl	8003d44 <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e006      	b.n	80037ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b0ba      	sub	sp, #232	; 0xe8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003800:	2300      	movs	r3, #0
 8003802:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10f      	bne.n	800383a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800381a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <HAL_UART_IRQHandler+0x66>
 8003826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fbd1 	bl	8003fda <UART_Receive_IT>
      return;
 8003838:	e25b      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800383a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80de 	beq.w	8003a00 <HAL_UART_IRQHandler+0x22c>
 8003844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d106      	bne.n	800385e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003854:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80d1 	beq.w	8003a00 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800385e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00b      	beq.n	8003882 <HAL_UART_IRQHandler+0xae>
 800386a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800386e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003872:	2b00      	cmp	r3, #0
 8003874:	d005      	beq.n	8003882 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0201 	orr.w	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003886:	f003 0304 	and.w	r3, r3, #4
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00b      	beq.n	80038a6 <HAL_UART_IRQHandler+0xd2>
 800388e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f043 0202 	orr.w	r2, r3, #2
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80038a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00b      	beq.n	80038ca <HAL_UART_IRQHandler+0xf6>
 80038b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d005      	beq.n	80038ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f043 0204 	orr.w	r2, r3, #4
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80038ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d011      	beq.n	80038fa <HAL_UART_IRQHandler+0x126>
 80038d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d105      	bne.n	80038ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80038e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d005      	beq.n	80038fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f2:	f043 0208 	orr.w	r2, r3, #8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 81f2 	beq.w	8003ce8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	2b00      	cmp	r3, #0
 800390e:	d008      	beq.n	8003922 <HAL_UART_IRQHandler+0x14e>
 8003910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb5c 	bl	8003fda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	695b      	ldr	r3, [r3, #20]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <HAL_UART_IRQHandler+0x17a>
 8003946:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d04f      	beq.n	80039ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fa66 	bl	8003e20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395e:	2b00      	cmp	r3, #0
 8003960:	d041      	beq.n	80039e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3314      	adds	r3, #20
 8003968:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003978:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800397c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3314      	adds	r3, #20
 800398a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800398e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003992:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800399a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1d9      	bne.n	8003962 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d013      	beq.n	80039de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	4a7e      	ldr	r2, [pc, #504]	; (8003bb4 <HAL_UART_IRQHandler+0x3e0>)
 80039bc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fd24 	bl	8002410 <HAL_DMA_Abort_IT>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039d8:	4610      	mov	r0, r2
 80039da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039dc:	e00e      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f99c 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e4:	e00a      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f998 	bl	8003d1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ec:	e006      	b.n	80039fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f000 f994 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80039fa:	e175      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039fc:	bf00      	nop
    return;
 80039fe:	e173      	b.n	8003ce8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 814f 	bne.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 8148 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a1c:	f003 0310 	and.w	r3, r3, #16
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 8141 	beq.w	8003ca8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60bb      	str	r3, [r7, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80b6 	beq.w	8003bb8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a58:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8145 	beq.w	8003cec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	f080 813e 	bcs.w	8003cec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a76:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	f000 8088 	beq.w	8003b94 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003a9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	330c      	adds	r3, #12
 8003aac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ab0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ab4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003abc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ac8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1d9      	bne.n	8003a84 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3314      	adds	r3, #20
 8003ad6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003ae0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003af8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003afc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b00:	e841 2300 	strex	r3, r2, [r1]
 8003b04:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d1e1      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b16:	e853 3f00 	ldrex	r3, [r3]
 8003b1a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3314      	adds	r3, #20
 8003b2c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b30:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b32:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b34:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b36:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b38:	e841 2300 	strex	r3, r2, [r1]
 8003b3c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1e3      	bne.n	8003b0c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b5c:	e853 3f00 	ldrex	r3, [r3]
 8003b60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b64:	f023 0310 	bic.w	r3, r3, #16
 8003b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	330c      	adds	r3, #12
 8003b72:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003b76:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b7e:	e841 2300 	strex	r3, r2, [r1]
 8003b82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1e3      	bne.n	8003b52 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7fe fc03 	bl	800239a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2202      	movs	r2, #2
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	4619      	mov	r1, r3
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 f8bf 	bl	8003d2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bb0:	e09c      	b.n	8003cec <HAL_UART_IRQHandler+0x518>
 8003bb2:	bf00      	nop
 8003bb4:	08003ee5 	.word	0x08003ee5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 808e 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8089 	beq.w	8003cf0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	e853 3f00 	ldrex	r3, [r3]
 8003bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003c02:	647a      	str	r2, [r7, #68]	; 0x44
 8003c04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c0a:	e841 2300 	strex	r3, r2, [r1]
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e3      	bne.n	8003bde <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3314      	adds	r3, #20
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	e853 3f00 	ldrex	r3, [r3]
 8003c24:	623b      	str	r3, [r7, #32]
   return(result);
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3314      	adds	r3, #20
 8003c36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c3a:	633a      	str	r2, [r7, #48]	; 0x30
 8003c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1e3      	bne.n	8003c16 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2220      	movs	r2, #32
 8003c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	e853 3f00 	ldrex	r3, [r3]
 8003c6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0310 	bic.w	r3, r3, #16
 8003c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	330c      	adds	r3, #12
 8003c7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003c80:	61fa      	str	r2, [r7, #28]
 8003c82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c84:	69b9      	ldr	r1, [r7, #24]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	e841 2300 	strex	r3, r2, [r1]
 8003c8c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e3      	bne.n	8003c5c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f844 	bl	8003d2e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ca6:	e023      	b.n	8003cf0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d009      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x4f4>
 8003cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d003      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 f923 	bl	8003f0c <UART_Transmit_IT>
    return;
 8003cc6:	e014      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00e      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d008      	beq.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 f962 	bl	8003faa <UART_EndTransmit_IT>
    return;
 8003ce6:	e004      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
    return;
 8003ce8:	bf00      	nop
 8003cea:	e002      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cec:	bf00      	nop
 8003cee:	e000      	b.n	8003cf2 <HAL_UART_IRQHandler+0x51e>
      return;
 8003cf0:	bf00      	nop
  }
}
 8003cf2:	37e8      	adds	r7, #232	; 0xe8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr

08003d0a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	b083      	sub	sp, #12
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr

08003d1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr

08003d2e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003d3a:	bf00      	nop
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr

08003d44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b090      	sub	sp, #64	; 0x40
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	603b      	str	r3, [r7, #0]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d54:	e050      	b.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d04c      	beq.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d007      	beq.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d64:	f7fe f9c4 	bl	80020f0 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d241      	bcs.n	8003df8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d94:	637a      	str	r2, [r7, #52]	; 0x34
 8003d96:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	613b      	str	r3, [r7, #16]
   return(result);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003dc8:	623a      	str	r2, [r7, #32]
 8003dca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	69f9      	ldr	r1, [r7, #28]
 8003dce:	6a3a      	ldr	r2, [r7, #32]
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e00f      	b.n	8003e18 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	461a      	mov	r2, r3
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d09f      	beq.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3740      	adds	r7, #64	; 0x40
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b095      	sub	sp, #84	; 0x54
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	330c      	adds	r3, #12
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e48:	643a      	str	r2, [r7, #64]	; 0x40
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e5      	bne.n	8003e28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3314      	adds	r3, #20
 8003e62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	6a3b      	ldr	r3, [r7, #32]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3314      	adds	r3, #20
 8003e7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d119      	bne.n	8003ecc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	647b      	str	r3, [r7, #68]	; 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003eb8:	61ba      	str	r2, [r7, #24]
 8003eba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ebc:	6979      	ldr	r1, [r7, #20]
 8003ebe:	69ba      	ldr	r2, [r7, #24]
 8003ec0:	e841 2300 	strex	r3, r2, [r1]
 8003ec4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1e5      	bne.n	8003e98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003eda:	bf00      	nop
 8003edc:	3754      	adds	r7, #84	; 0x54
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bc80      	pop	{r7}
 8003ee2:	4770      	bx	lr

08003ee4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003efe:	68f8      	ldr	r0, [r7, #12]
 8003f00:	f7ff ff0c 	bl	8003d1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b21      	cmp	r3, #33	; 0x21
 8003f1e:	d13e      	bne.n	8003f9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f28:	d114      	bne.n	8003f54 <UART_Transmit_IT+0x48>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d110      	bne.n	8003f54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	881b      	ldrh	r3, [r3, #0]
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	1c9a      	adds	r2, r3, #2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	621a      	str	r2, [r3, #32]
 8003f52:	e008      	b.n	8003f66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	1c59      	adds	r1, r3, #1
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6211      	str	r1, [r2, #32]
 8003f5e:	781a      	ldrb	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10f      	bne.n	8003f9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68da      	ldr	r2, [r3, #12]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e000      	b.n	8003fa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
  }
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bc80      	pop	{r7}
 8003fa8:	4770      	bx	lr

08003faa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68da      	ldr	r2, [r3, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7ff fe94 	bl	8003cf8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b08c      	sub	sp, #48	; 0x30
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b22      	cmp	r3, #34	; 0x22
 8003fec:	f040 80ae 	bne.w	800414c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff8:	d117      	bne.n	800402a <UART_Receive_IT+0x50>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d113      	bne.n	800402a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004002:	2300      	movs	r3, #0
 8004004:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	b29b      	uxth	r3, r3
 8004014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004018:	b29a      	uxth	r2, r3
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004022:	1c9a      	adds	r2, r3, #2
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
 8004028:	e026      	b.n	8004078 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004030:	2300      	movs	r3, #0
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403c:	d007      	beq.n	800404e <UART_Receive_IT+0x74>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d10a      	bne.n	800405c <UART_Receive_IT+0x82>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d106      	bne.n	800405c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	b2da      	uxtb	r2, r3
 8004056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004058:	701a      	strb	r2, [r3, #0]
 800405a:	e008      	b.n	800406e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004068:	b2da      	uxtb	r2, r3
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800407c:	b29b      	uxth	r3, r3
 800407e:	3b01      	subs	r3, #1
 8004080:	b29b      	uxth	r3, r3
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4619      	mov	r1, r3
 8004086:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004088:	2b00      	cmp	r3, #0
 800408a:	d15d      	bne.n	8004148 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68da      	ldr	r2, [r3, #12]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0220 	bic.w	r2, r2, #32
 800409a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0201 	bic.w	r2, r2, #1
 80040ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d135      	bne.n	800413e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	e853 3f00 	ldrex	r3, [r3]
 80040e6:	613b      	str	r3, [r7, #16]
   return(result);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f023 0310 	bic.w	r3, r3, #16
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	330c      	adds	r3, #12
 80040f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f8:	623a      	str	r2, [r7, #32]
 80040fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	69f9      	ldr	r1, [r7, #28]
 80040fe:	6a3a      	ldr	r2, [r7, #32]
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	61bb      	str	r3, [r7, #24]
   return(result);
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e5      	bne.n	80040d8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b10      	cmp	r3, #16
 8004118:	d10a      	bne.n	8004130 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004134:	4619      	mov	r1, r3
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fdf9 	bl	8003d2e <HAL_UARTEx_RxEventCallback>
 800413c:	e002      	b.n	8004144 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f7ff fde3 	bl	8003d0a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004144:	2300      	movs	r3, #0
 8004146:	e002      	b.n	800414e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	e000      	b.n	800414e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800414c:	2302      	movs	r3, #2
  }
}
 800414e:	4618      	mov	r0, r3
 8004150:	3730      	adds	r7, #48	; 0x30
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
	...

08004158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	430a      	orrs	r2, r1
 8004174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689a      	ldr	r2, [r3, #8]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	431a      	orrs	r2, r3
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004192:	f023 030c 	bic.w	r3, r3, #12
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	430b      	orrs	r3, r1
 800419e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2c      	ldr	r2, [pc, #176]	; (800426c <UART_SetConfig+0x114>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d103      	bne.n	80041c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041c0:	f7fe ff2a 	bl	8003018 <HAL_RCC_GetPCLK2Freq>
 80041c4:	60f8      	str	r0, [r7, #12]
 80041c6:	e002      	b.n	80041ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041c8:	f7fe ff12 	bl	8002ff0 <HAL_RCC_GetPCLK1Freq>
 80041cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041ce:	68fa      	ldr	r2, [r7, #12]
 80041d0:	4613      	mov	r3, r2
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	4413      	add	r3, r2
 80041d6:	009a      	lsls	r2, r3, #2
 80041d8:	441a      	add	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e4:	4a22      	ldr	r2, [pc, #136]	; (8004270 <UART_SetConfig+0x118>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	0119      	lsls	r1, r3, #4
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4613      	mov	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4413      	add	r3, r2
 80041f6:	009a      	lsls	r2, r3, #2
 80041f8:	441a      	add	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	fbb2 f2f3 	udiv	r2, r2, r3
 8004204:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <UART_SetConfig+0x118>)
 8004206:	fba3 0302 	umull	r0, r3, r3, r2
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2064      	movs	r0, #100	; 0x64
 800420e:	fb00 f303 	mul.w	r3, r0, r3
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	3332      	adds	r3, #50	; 0x32
 8004218:	4a15      	ldr	r2, [pc, #84]	; (8004270 <UART_SetConfig+0x118>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004224:	4419      	add	r1, r3
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	009a      	lsls	r2, r3, #2
 8004230:	441a      	add	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	fbb2 f2f3 	udiv	r2, r2, r3
 800423c:	4b0c      	ldr	r3, [pc, #48]	; (8004270 <UART_SetConfig+0x118>)
 800423e:	fba3 0302 	umull	r0, r3, r3, r2
 8004242:	095b      	lsrs	r3, r3, #5
 8004244:	2064      	movs	r0, #100	; 0x64
 8004246:	fb00 f303 	mul.w	r3, r0, r3
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	3332      	adds	r3, #50	; 0x32
 8004250:	4a07      	ldr	r2, [pc, #28]	; (8004270 <UART_SetConfig+0x118>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	f003 020f 	and.w	r2, r3, #15
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	440a      	add	r2, r1
 8004262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004264:	bf00      	nop
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	40013800 	.word	0x40013800
 8004270:	51eb851f 	.word	0x51eb851f

08004274 <atoi>:
 8004274:	220a      	movs	r2, #10
 8004276:	2100      	movs	r1, #0
 8004278:	f000 b87e 	b.w	8004378 <strtol>

0800427c <_strtol_l.constprop.0>:
 800427c:	2b01      	cmp	r3, #1
 800427e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004282:	4686      	mov	lr, r0
 8004284:	4690      	mov	r8, r2
 8004286:	d001      	beq.n	800428c <_strtol_l.constprop.0+0x10>
 8004288:	2b24      	cmp	r3, #36	; 0x24
 800428a:	d906      	bls.n	800429a <_strtol_l.constprop.0+0x1e>
 800428c:	f000 fa72 	bl	8004774 <__errno>
 8004290:	2316      	movs	r3, #22
 8004292:	6003      	str	r3, [r0, #0]
 8004294:	2000      	movs	r0, #0
 8004296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429a:	460d      	mov	r5, r1
 800429c:	4835      	ldr	r0, [pc, #212]	; (8004374 <_strtol_l.constprop.0+0xf8>)
 800429e:	462a      	mov	r2, r5
 80042a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80042a4:	5d06      	ldrb	r6, [r0, r4]
 80042a6:	f016 0608 	ands.w	r6, r6, #8
 80042aa:	d1f8      	bne.n	800429e <_strtol_l.constprop.0+0x22>
 80042ac:	2c2d      	cmp	r4, #45	; 0x2d
 80042ae:	d12e      	bne.n	800430e <_strtol_l.constprop.0+0x92>
 80042b0:	2601      	movs	r6, #1
 80042b2:	782c      	ldrb	r4, [r5, #0]
 80042b4:	1c95      	adds	r5, r2, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d057      	beq.n	800436a <_strtol_l.constprop.0+0xee>
 80042ba:	2b10      	cmp	r3, #16
 80042bc:	d109      	bne.n	80042d2 <_strtol_l.constprop.0+0x56>
 80042be:	2c30      	cmp	r4, #48	; 0x30
 80042c0:	d107      	bne.n	80042d2 <_strtol_l.constprop.0+0x56>
 80042c2:	782a      	ldrb	r2, [r5, #0]
 80042c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80042c8:	2a58      	cmp	r2, #88	; 0x58
 80042ca:	d149      	bne.n	8004360 <_strtol_l.constprop.0+0xe4>
 80042cc:	2310      	movs	r3, #16
 80042ce:	786c      	ldrb	r4, [r5, #1]
 80042d0:	3502      	adds	r5, #2
 80042d2:	2200      	movs	r2, #0
 80042d4:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80042d8:	f10c 3cff 	add.w	ip, ip, #4294967295
 80042dc:	fbbc f9f3 	udiv	r9, ip, r3
 80042e0:	4610      	mov	r0, r2
 80042e2:	fb03 ca19 	mls	sl, r3, r9, ip
 80042e6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80042ea:	2f09      	cmp	r7, #9
 80042ec:	d814      	bhi.n	8004318 <_strtol_l.constprop.0+0x9c>
 80042ee:	463c      	mov	r4, r7
 80042f0:	42a3      	cmp	r3, r4
 80042f2:	dd20      	ble.n	8004336 <_strtol_l.constprop.0+0xba>
 80042f4:	1c57      	adds	r7, r2, #1
 80042f6:	d007      	beq.n	8004308 <_strtol_l.constprop.0+0x8c>
 80042f8:	4581      	cmp	r9, r0
 80042fa:	d319      	bcc.n	8004330 <_strtol_l.constprop.0+0xb4>
 80042fc:	d101      	bne.n	8004302 <_strtol_l.constprop.0+0x86>
 80042fe:	45a2      	cmp	sl, r4
 8004300:	db16      	blt.n	8004330 <_strtol_l.constprop.0+0xb4>
 8004302:	2201      	movs	r2, #1
 8004304:	fb00 4003 	mla	r0, r0, r3, r4
 8004308:	f815 4b01 	ldrb.w	r4, [r5], #1
 800430c:	e7eb      	b.n	80042e6 <_strtol_l.constprop.0+0x6a>
 800430e:	2c2b      	cmp	r4, #43	; 0x2b
 8004310:	bf04      	itt	eq
 8004312:	782c      	ldrbeq	r4, [r5, #0]
 8004314:	1c95      	addeq	r5, r2, #2
 8004316:	e7ce      	b.n	80042b6 <_strtol_l.constprop.0+0x3a>
 8004318:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800431c:	2f19      	cmp	r7, #25
 800431e:	d801      	bhi.n	8004324 <_strtol_l.constprop.0+0xa8>
 8004320:	3c37      	subs	r4, #55	; 0x37
 8004322:	e7e5      	b.n	80042f0 <_strtol_l.constprop.0+0x74>
 8004324:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8004328:	2f19      	cmp	r7, #25
 800432a:	d804      	bhi.n	8004336 <_strtol_l.constprop.0+0xba>
 800432c:	3c57      	subs	r4, #87	; 0x57
 800432e:	e7df      	b.n	80042f0 <_strtol_l.constprop.0+0x74>
 8004330:	f04f 32ff 	mov.w	r2, #4294967295
 8004334:	e7e8      	b.n	8004308 <_strtol_l.constprop.0+0x8c>
 8004336:	1c53      	adds	r3, r2, #1
 8004338:	d108      	bne.n	800434c <_strtol_l.constprop.0+0xd0>
 800433a:	2322      	movs	r3, #34	; 0x22
 800433c:	4660      	mov	r0, ip
 800433e:	f8ce 3000 	str.w	r3, [lr]
 8004342:	f1b8 0f00 	cmp.w	r8, #0
 8004346:	d0a6      	beq.n	8004296 <_strtol_l.constprop.0+0x1a>
 8004348:	1e69      	subs	r1, r5, #1
 800434a:	e006      	b.n	800435a <_strtol_l.constprop.0+0xde>
 800434c:	b106      	cbz	r6, 8004350 <_strtol_l.constprop.0+0xd4>
 800434e:	4240      	negs	r0, r0
 8004350:	f1b8 0f00 	cmp.w	r8, #0
 8004354:	d09f      	beq.n	8004296 <_strtol_l.constprop.0+0x1a>
 8004356:	2a00      	cmp	r2, #0
 8004358:	d1f6      	bne.n	8004348 <_strtol_l.constprop.0+0xcc>
 800435a:	f8c8 1000 	str.w	r1, [r8]
 800435e:	e79a      	b.n	8004296 <_strtol_l.constprop.0+0x1a>
 8004360:	2430      	movs	r4, #48	; 0x30
 8004362:	2b00      	cmp	r3, #0
 8004364:	d1b5      	bne.n	80042d2 <_strtol_l.constprop.0+0x56>
 8004366:	2308      	movs	r3, #8
 8004368:	e7b3      	b.n	80042d2 <_strtol_l.constprop.0+0x56>
 800436a:	2c30      	cmp	r4, #48	; 0x30
 800436c:	d0a9      	beq.n	80042c2 <_strtol_l.constprop.0+0x46>
 800436e:	230a      	movs	r3, #10
 8004370:	e7af      	b.n	80042d2 <_strtol_l.constprop.0+0x56>
 8004372:	bf00      	nop
 8004374:	08005e77 	.word	0x08005e77

08004378 <strtol>:
 8004378:	4613      	mov	r3, r2
 800437a:	460a      	mov	r2, r1
 800437c:	4601      	mov	r1, r0
 800437e:	4802      	ldr	r0, [pc, #8]	; (8004388 <strtol+0x10>)
 8004380:	6800      	ldr	r0, [r0, #0]
 8004382:	f7ff bf7b 	b.w	800427c <_strtol_l.constprop.0>
 8004386:	bf00      	nop
 8004388:	20000068 	.word	0x20000068

0800438c <std>:
 800438c:	2300      	movs	r3, #0
 800438e:	b510      	push	{r4, lr}
 8004390:	4604      	mov	r4, r0
 8004392:	e9c0 3300 	strd	r3, r3, [r0]
 8004396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800439a:	6083      	str	r3, [r0, #8]
 800439c:	8181      	strh	r1, [r0, #12]
 800439e:	6643      	str	r3, [r0, #100]	; 0x64
 80043a0:	81c2      	strh	r2, [r0, #14]
 80043a2:	6183      	str	r3, [r0, #24]
 80043a4:	4619      	mov	r1, r3
 80043a6:	2208      	movs	r2, #8
 80043a8:	305c      	adds	r0, #92	; 0x5c
 80043aa:	f000 f916 	bl	80045da <memset>
 80043ae:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <std+0x38>)
 80043b0:	6224      	str	r4, [r4, #32]
 80043b2:	6263      	str	r3, [r4, #36]	; 0x24
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <std+0x3c>)
 80043b6:	62a3      	str	r3, [r4, #40]	; 0x28
 80043b8:	4b04      	ldr	r3, [pc, #16]	; (80043cc <std+0x40>)
 80043ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 80043bc:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <std+0x44>)
 80043be:	6323      	str	r3, [r4, #48]	; 0x30
 80043c0:	bd10      	pop	{r4, pc}
 80043c2:	bf00      	nop
 80043c4:	08004555 	.word	0x08004555
 80043c8:	08004577 	.word	0x08004577
 80043cc:	080045af 	.word	0x080045af
 80043d0:	080045d3 	.word	0x080045d3

080043d4 <stdio_exit_handler>:
 80043d4:	4a02      	ldr	r2, [pc, #8]	; (80043e0 <stdio_exit_handler+0xc>)
 80043d6:	4903      	ldr	r1, [pc, #12]	; (80043e4 <stdio_exit_handler+0x10>)
 80043d8:	4803      	ldr	r0, [pc, #12]	; (80043e8 <stdio_exit_handler+0x14>)
 80043da:	f000 b869 	b.w	80044b0 <_fwalk_sglue>
 80043de:	bf00      	nop
 80043e0:	20000010 	.word	0x20000010
 80043e4:	080050dd 	.word	0x080050dd
 80043e8:	2000001c 	.word	0x2000001c

080043ec <cleanup_stdio>:
 80043ec:	6841      	ldr	r1, [r0, #4]
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <cleanup_stdio+0x34>)
 80043f0:	b510      	push	{r4, lr}
 80043f2:	4299      	cmp	r1, r3
 80043f4:	4604      	mov	r4, r0
 80043f6:	d001      	beq.n	80043fc <cleanup_stdio+0x10>
 80043f8:	f000 fe70 	bl	80050dc <_fflush_r>
 80043fc:	68a1      	ldr	r1, [r4, #8]
 80043fe:	4b09      	ldr	r3, [pc, #36]	; (8004424 <cleanup_stdio+0x38>)
 8004400:	4299      	cmp	r1, r3
 8004402:	d002      	beq.n	800440a <cleanup_stdio+0x1e>
 8004404:	4620      	mov	r0, r4
 8004406:	f000 fe69 	bl	80050dc <_fflush_r>
 800440a:	68e1      	ldr	r1, [r4, #12]
 800440c:	4b06      	ldr	r3, [pc, #24]	; (8004428 <cleanup_stdio+0x3c>)
 800440e:	4299      	cmp	r1, r3
 8004410:	d004      	beq.n	800441c <cleanup_stdio+0x30>
 8004412:	4620      	mov	r0, r4
 8004414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004418:	f000 be60 	b.w	80050dc <_fflush_r>
 800441c:	bd10      	pop	{r4, pc}
 800441e:	bf00      	nop
 8004420:	20000468 	.word	0x20000468
 8004424:	200004d0 	.word	0x200004d0
 8004428:	20000538 	.word	0x20000538

0800442c <global_stdio_init.part.0>:
 800442c:	b510      	push	{r4, lr}
 800442e:	4b0b      	ldr	r3, [pc, #44]	; (800445c <global_stdio_init.part.0+0x30>)
 8004430:	4c0b      	ldr	r4, [pc, #44]	; (8004460 <global_stdio_init.part.0+0x34>)
 8004432:	4a0c      	ldr	r2, [pc, #48]	; (8004464 <global_stdio_init.part.0+0x38>)
 8004434:	4620      	mov	r0, r4
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	2104      	movs	r1, #4
 800443a:	2200      	movs	r2, #0
 800443c:	f7ff ffa6 	bl	800438c <std>
 8004440:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004444:	2201      	movs	r2, #1
 8004446:	2109      	movs	r1, #9
 8004448:	f7ff ffa0 	bl	800438c <std>
 800444c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004450:	2202      	movs	r2, #2
 8004452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004456:	2112      	movs	r1, #18
 8004458:	f7ff bf98 	b.w	800438c <std>
 800445c:	200005a0 	.word	0x200005a0
 8004460:	20000468 	.word	0x20000468
 8004464:	080043d5 	.word	0x080043d5

08004468 <__sfp_lock_acquire>:
 8004468:	4801      	ldr	r0, [pc, #4]	; (8004470 <__sfp_lock_acquire+0x8>)
 800446a:	f000 b9ad 	b.w	80047c8 <__retarget_lock_acquire_recursive>
 800446e:	bf00      	nop
 8004470:	200005a9 	.word	0x200005a9

08004474 <__sfp_lock_release>:
 8004474:	4801      	ldr	r0, [pc, #4]	; (800447c <__sfp_lock_release+0x8>)
 8004476:	f000 b9a8 	b.w	80047ca <__retarget_lock_release_recursive>
 800447a:	bf00      	nop
 800447c:	200005a9 	.word	0x200005a9

08004480 <__sinit>:
 8004480:	b510      	push	{r4, lr}
 8004482:	4604      	mov	r4, r0
 8004484:	f7ff fff0 	bl	8004468 <__sfp_lock_acquire>
 8004488:	6a23      	ldr	r3, [r4, #32]
 800448a:	b11b      	cbz	r3, 8004494 <__sinit+0x14>
 800448c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004490:	f7ff bff0 	b.w	8004474 <__sfp_lock_release>
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <__sinit+0x28>)
 8004496:	6223      	str	r3, [r4, #32]
 8004498:	4b04      	ldr	r3, [pc, #16]	; (80044ac <__sinit+0x2c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1f5      	bne.n	800448c <__sinit+0xc>
 80044a0:	f7ff ffc4 	bl	800442c <global_stdio_init.part.0>
 80044a4:	e7f2      	b.n	800448c <__sinit+0xc>
 80044a6:	bf00      	nop
 80044a8:	080043ed 	.word	0x080043ed
 80044ac:	200005a0 	.word	0x200005a0

080044b0 <_fwalk_sglue>:
 80044b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b4:	4607      	mov	r7, r0
 80044b6:	4688      	mov	r8, r1
 80044b8:	4614      	mov	r4, r2
 80044ba:	2600      	movs	r6, #0
 80044bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044c0:	f1b9 0901 	subs.w	r9, r9, #1
 80044c4:	d505      	bpl.n	80044d2 <_fwalk_sglue+0x22>
 80044c6:	6824      	ldr	r4, [r4, #0]
 80044c8:	2c00      	cmp	r4, #0
 80044ca:	d1f7      	bne.n	80044bc <_fwalk_sglue+0xc>
 80044cc:	4630      	mov	r0, r6
 80044ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044d2:	89ab      	ldrh	r3, [r5, #12]
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d907      	bls.n	80044e8 <_fwalk_sglue+0x38>
 80044d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044dc:	3301      	adds	r3, #1
 80044de:	d003      	beq.n	80044e8 <_fwalk_sglue+0x38>
 80044e0:	4629      	mov	r1, r5
 80044e2:	4638      	mov	r0, r7
 80044e4:	47c0      	blx	r8
 80044e6:	4306      	orrs	r6, r0
 80044e8:	3568      	adds	r5, #104	; 0x68
 80044ea:	e7e9      	b.n	80044c0 <_fwalk_sglue+0x10>

080044ec <sniprintf>:
 80044ec:	b40c      	push	{r2, r3}
 80044ee:	b530      	push	{r4, r5, lr}
 80044f0:	4b17      	ldr	r3, [pc, #92]	; (8004550 <sniprintf+0x64>)
 80044f2:	1e0c      	subs	r4, r1, #0
 80044f4:	681d      	ldr	r5, [r3, #0]
 80044f6:	b09d      	sub	sp, #116	; 0x74
 80044f8:	da08      	bge.n	800450c <sniprintf+0x20>
 80044fa:	238b      	movs	r3, #139	; 0x8b
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	b01d      	add	sp, #116	; 0x74
 8004504:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004508:	b002      	add	sp, #8
 800450a:	4770      	bx	lr
 800450c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004510:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004514:	bf0c      	ite	eq
 8004516:	4623      	moveq	r3, r4
 8004518:	f104 33ff 	addne.w	r3, r4, #4294967295
 800451c:	9304      	str	r3, [sp, #16]
 800451e:	9307      	str	r3, [sp, #28]
 8004520:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004524:	9002      	str	r0, [sp, #8]
 8004526:	9006      	str	r0, [sp, #24]
 8004528:	f8ad 3016 	strh.w	r3, [sp, #22]
 800452c:	4628      	mov	r0, r5
 800452e:	ab21      	add	r3, sp, #132	; 0x84
 8004530:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004532:	a902      	add	r1, sp, #8
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	f000 fabd 	bl	8004ab4 <_svfiprintf_r>
 800453a:	1c43      	adds	r3, r0, #1
 800453c:	bfbc      	itt	lt
 800453e:	238b      	movlt	r3, #139	; 0x8b
 8004540:	602b      	strlt	r3, [r5, #0]
 8004542:	2c00      	cmp	r4, #0
 8004544:	d0dd      	beq.n	8004502 <sniprintf+0x16>
 8004546:	2200      	movs	r2, #0
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	701a      	strb	r2, [r3, #0]
 800454c:	e7d9      	b.n	8004502 <sniprintf+0x16>
 800454e:	bf00      	nop
 8004550:	20000068 	.word	0x20000068

08004554 <__sread>:
 8004554:	b510      	push	{r4, lr}
 8004556:	460c      	mov	r4, r1
 8004558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800455c:	f000 f8e6 	bl	800472c <_read_r>
 8004560:	2800      	cmp	r0, #0
 8004562:	bfab      	itete	ge
 8004564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004566:	89a3      	ldrhlt	r3, [r4, #12]
 8004568:	181b      	addge	r3, r3, r0
 800456a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800456e:	bfac      	ite	ge
 8004570:	6563      	strge	r3, [r4, #84]	; 0x54
 8004572:	81a3      	strhlt	r3, [r4, #12]
 8004574:	bd10      	pop	{r4, pc}

08004576 <__swrite>:
 8004576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800457a:	461f      	mov	r7, r3
 800457c:	898b      	ldrh	r3, [r1, #12]
 800457e:	4605      	mov	r5, r0
 8004580:	05db      	lsls	r3, r3, #23
 8004582:	460c      	mov	r4, r1
 8004584:	4616      	mov	r6, r2
 8004586:	d505      	bpl.n	8004594 <__swrite+0x1e>
 8004588:	2302      	movs	r3, #2
 800458a:	2200      	movs	r2, #0
 800458c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004590:	f000 f8ba 	bl	8004708 <_lseek_r>
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	4632      	mov	r2, r6
 8004598:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800459c:	81a3      	strh	r3, [r4, #12]
 800459e:	4628      	mov	r0, r5
 80045a0:	463b      	mov	r3, r7
 80045a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045aa:	f000 b8d1 	b.w	8004750 <_write_r>

080045ae <__sseek>:
 80045ae:	b510      	push	{r4, lr}
 80045b0:	460c      	mov	r4, r1
 80045b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b6:	f000 f8a7 	bl	8004708 <_lseek_r>
 80045ba:	1c43      	adds	r3, r0, #1
 80045bc:	89a3      	ldrh	r3, [r4, #12]
 80045be:	bf15      	itete	ne
 80045c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80045c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045ca:	81a3      	strheq	r3, [r4, #12]
 80045cc:	bf18      	it	ne
 80045ce:	81a3      	strhne	r3, [r4, #12]
 80045d0:	bd10      	pop	{r4, pc}

080045d2 <__sclose>:
 80045d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d6:	f000 b887 	b.w	80046e8 <_close_r>

080045da <memset>:
 80045da:	4603      	mov	r3, r0
 80045dc:	4402      	add	r2, r0
 80045de:	4293      	cmp	r3, r2
 80045e0:	d100      	bne.n	80045e4 <memset+0xa>
 80045e2:	4770      	bx	lr
 80045e4:	f803 1b01 	strb.w	r1, [r3], #1
 80045e8:	e7f9      	b.n	80045de <memset+0x4>

080045ea <strchr>:
 80045ea:	4603      	mov	r3, r0
 80045ec:	b2c9      	uxtb	r1, r1
 80045ee:	4618      	mov	r0, r3
 80045f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f4:	b112      	cbz	r2, 80045fc <strchr+0x12>
 80045f6:	428a      	cmp	r2, r1
 80045f8:	d1f9      	bne.n	80045ee <strchr+0x4>
 80045fa:	4770      	bx	lr
 80045fc:	2900      	cmp	r1, #0
 80045fe:	bf18      	it	ne
 8004600:	2000      	movne	r0, #0
 8004602:	4770      	bx	lr

08004604 <strtok>:
 8004604:	4b16      	ldr	r3, [pc, #88]	; (8004660 <strtok+0x5c>)
 8004606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800460a:	681f      	ldr	r7, [r3, #0]
 800460c:	4605      	mov	r5, r0
 800460e:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004610:	460e      	mov	r6, r1
 8004612:	b9ec      	cbnz	r4, 8004650 <strtok+0x4c>
 8004614:	2050      	movs	r0, #80	; 0x50
 8004616:	f000 f93f 	bl	8004898 <malloc>
 800461a:	4602      	mov	r2, r0
 800461c:	6478      	str	r0, [r7, #68]	; 0x44
 800461e:	b920      	cbnz	r0, 800462a <strtok+0x26>
 8004620:	215b      	movs	r1, #91	; 0x5b
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <strtok+0x60>)
 8004624:	4810      	ldr	r0, [pc, #64]	; (8004668 <strtok+0x64>)
 8004626:	f000 f8d1 	bl	80047cc <__assert_func>
 800462a:	e9c0 4400 	strd	r4, r4, [r0]
 800462e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004632:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004636:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800463a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800463e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004642:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004646:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800464a:	6184      	str	r4, [r0, #24]
 800464c:	7704      	strb	r4, [r0, #28]
 800464e:	6244      	str	r4, [r0, #36]	; 0x24
 8004650:	4631      	mov	r1, r6
 8004652:	4628      	mov	r0, r5
 8004654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004656:	2301      	movs	r3, #1
 8004658:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800465c:	f000 b806 	b.w	800466c <__strtok_r>
 8004660:	20000068 	.word	0x20000068
 8004664:	08005f77 	.word	0x08005f77
 8004668:	08005f8e 	.word	0x08005f8e

0800466c <__strtok_r>:
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b908      	cbnz	r0, 8004674 <__strtok_r+0x8>
 8004670:	6810      	ldr	r0, [r2, #0]
 8004672:	b188      	cbz	r0, 8004698 <__strtok_r+0x2c>
 8004674:	4604      	mov	r4, r0
 8004676:	460f      	mov	r7, r1
 8004678:	4620      	mov	r0, r4
 800467a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800467e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004682:	b91e      	cbnz	r6, 800468c <__strtok_r+0x20>
 8004684:	b965      	cbnz	r5, 80046a0 <__strtok_r+0x34>
 8004686:	4628      	mov	r0, r5
 8004688:	6015      	str	r5, [r2, #0]
 800468a:	e005      	b.n	8004698 <__strtok_r+0x2c>
 800468c:	42b5      	cmp	r5, r6
 800468e:	d1f6      	bne.n	800467e <__strtok_r+0x12>
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1f0      	bne.n	8004676 <__strtok_r+0xa>
 8004694:	6014      	str	r4, [r2, #0]
 8004696:	7003      	strb	r3, [r0, #0]
 8004698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800469a:	461c      	mov	r4, r3
 800469c:	e00c      	b.n	80046b8 <__strtok_r+0x4c>
 800469e:	b915      	cbnz	r5, 80046a6 <__strtok_r+0x3a>
 80046a0:	460e      	mov	r6, r1
 80046a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80046a6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80046aa:	42ab      	cmp	r3, r5
 80046ac:	d1f7      	bne.n	800469e <__strtok_r+0x32>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d0f3      	beq.n	800469a <__strtok_r+0x2e>
 80046b2:	2300      	movs	r3, #0
 80046b4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80046b8:	6014      	str	r4, [r2, #0]
 80046ba:	e7ed      	b.n	8004698 <__strtok_r+0x2c>

080046bc <strstr>:
 80046bc:	780a      	ldrb	r2, [r1, #0]
 80046be:	b570      	push	{r4, r5, r6, lr}
 80046c0:	b96a      	cbnz	r2, 80046de <strstr+0x22>
 80046c2:	bd70      	pop	{r4, r5, r6, pc}
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d109      	bne.n	80046dc <strstr+0x20>
 80046c8:	460c      	mov	r4, r1
 80046ca:	4605      	mov	r5, r0
 80046cc:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f6      	beq.n	80046c2 <strstr+0x6>
 80046d4:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80046d8:	429e      	cmp	r6, r3
 80046da:	d0f7      	beq.n	80046cc <strstr+0x10>
 80046dc:	3001      	adds	r0, #1
 80046de:	7803      	ldrb	r3, [r0, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1ef      	bne.n	80046c4 <strstr+0x8>
 80046e4:	4618      	mov	r0, r3
 80046e6:	e7ec      	b.n	80046c2 <strstr+0x6>

080046e8 <_close_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	2300      	movs	r3, #0
 80046ec:	4d05      	ldr	r5, [pc, #20]	; (8004704 <_close_r+0x1c>)
 80046ee:	4604      	mov	r4, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	602b      	str	r3, [r5, #0]
 80046f4:	f7fd fb86 	bl	8001e04 <_close>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_close_r+0x1a>
 80046fc:	682b      	ldr	r3, [r5, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_close_r+0x1a>
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	200005a4 	.word	0x200005a4

08004708 <_lseek_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4604      	mov	r4, r0
 800470c:	4608      	mov	r0, r1
 800470e:	4611      	mov	r1, r2
 8004710:	2200      	movs	r2, #0
 8004712:	4d05      	ldr	r5, [pc, #20]	; (8004728 <_lseek_r+0x20>)
 8004714:	602a      	str	r2, [r5, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	f7fd fb98 	bl	8001e4c <_lseek>
 800471c:	1c43      	adds	r3, r0, #1
 800471e:	d102      	bne.n	8004726 <_lseek_r+0x1e>
 8004720:	682b      	ldr	r3, [r5, #0]
 8004722:	b103      	cbz	r3, 8004726 <_lseek_r+0x1e>
 8004724:	6023      	str	r3, [r4, #0]
 8004726:	bd38      	pop	{r3, r4, r5, pc}
 8004728:	200005a4 	.word	0x200005a4

0800472c <_read_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	2200      	movs	r2, #0
 8004736:	4d05      	ldr	r5, [pc, #20]	; (800474c <_read_r+0x20>)
 8004738:	602a      	str	r2, [r5, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	f7fd fb29 	bl	8001d92 <_read>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d102      	bne.n	800474a <_read_r+0x1e>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	b103      	cbz	r3, 800474a <_read_r+0x1e>
 8004748:	6023      	str	r3, [r4, #0]
 800474a:	bd38      	pop	{r3, r4, r5, pc}
 800474c:	200005a4 	.word	0x200005a4

08004750 <_write_r>:
 8004750:	b538      	push	{r3, r4, r5, lr}
 8004752:	4604      	mov	r4, r0
 8004754:	4608      	mov	r0, r1
 8004756:	4611      	mov	r1, r2
 8004758:	2200      	movs	r2, #0
 800475a:	4d05      	ldr	r5, [pc, #20]	; (8004770 <_write_r+0x20>)
 800475c:	602a      	str	r2, [r5, #0]
 800475e:	461a      	mov	r2, r3
 8004760:	f7fd fb34 	bl	8001dcc <_write>
 8004764:	1c43      	adds	r3, r0, #1
 8004766:	d102      	bne.n	800476e <_write_r+0x1e>
 8004768:	682b      	ldr	r3, [r5, #0]
 800476a:	b103      	cbz	r3, 800476e <_write_r+0x1e>
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	bd38      	pop	{r3, r4, r5, pc}
 8004770:	200005a4 	.word	0x200005a4

08004774 <__errno>:
 8004774:	4b01      	ldr	r3, [pc, #4]	; (800477c <__errno+0x8>)
 8004776:	6818      	ldr	r0, [r3, #0]
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20000068 	.word	0x20000068

08004780 <__libc_init_array>:
 8004780:	b570      	push	{r4, r5, r6, lr}
 8004782:	2600      	movs	r6, #0
 8004784:	4d0c      	ldr	r5, [pc, #48]	; (80047b8 <__libc_init_array+0x38>)
 8004786:	4c0d      	ldr	r4, [pc, #52]	; (80047bc <__libc_init_array+0x3c>)
 8004788:	1b64      	subs	r4, r4, r5
 800478a:	10a4      	asrs	r4, r4, #2
 800478c:	42a6      	cmp	r6, r4
 800478e:	d109      	bne.n	80047a4 <__libc_init_array+0x24>
 8004790:	f001 f802 	bl	8005798 <_init>
 8004794:	2600      	movs	r6, #0
 8004796:	4d0a      	ldr	r5, [pc, #40]	; (80047c0 <__libc_init_array+0x40>)
 8004798:	4c0a      	ldr	r4, [pc, #40]	; (80047c4 <__libc_init_array+0x44>)
 800479a:	1b64      	subs	r4, r4, r5
 800479c:	10a4      	asrs	r4, r4, #2
 800479e:	42a6      	cmp	r6, r4
 80047a0:	d105      	bne.n	80047ae <__libc_init_array+0x2e>
 80047a2:	bd70      	pop	{r4, r5, r6, pc}
 80047a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047a8:	4798      	blx	r3
 80047aa:	3601      	adds	r6, #1
 80047ac:	e7ee      	b.n	800478c <__libc_init_array+0xc>
 80047ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b2:	4798      	blx	r3
 80047b4:	3601      	adds	r6, #1
 80047b6:	e7f2      	b.n	800479e <__libc_init_array+0x1e>
 80047b8:	08006058 	.word	0x08006058
 80047bc:	08006058 	.word	0x08006058
 80047c0:	08006058 	.word	0x08006058
 80047c4:	0800605c 	.word	0x0800605c

080047c8 <__retarget_lock_acquire_recursive>:
 80047c8:	4770      	bx	lr

080047ca <__retarget_lock_release_recursive>:
 80047ca:	4770      	bx	lr

080047cc <__assert_func>:
 80047cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80047ce:	4614      	mov	r4, r2
 80047d0:	461a      	mov	r2, r3
 80047d2:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <__assert_func+0x2c>)
 80047d4:	4605      	mov	r5, r0
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68d8      	ldr	r0, [r3, #12]
 80047da:	b14c      	cbz	r4, 80047f0 <__assert_func+0x24>
 80047dc:	4b07      	ldr	r3, [pc, #28]	; (80047fc <__assert_func+0x30>)
 80047de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80047e2:	9100      	str	r1, [sp, #0]
 80047e4:	462b      	mov	r3, r5
 80047e6:	4906      	ldr	r1, [pc, #24]	; (8004800 <__assert_func+0x34>)
 80047e8:	f000 fca0 	bl	800512c <fiprintf>
 80047ec:	f000 fcf6 	bl	80051dc <abort>
 80047f0:	4b04      	ldr	r3, [pc, #16]	; (8004804 <__assert_func+0x38>)
 80047f2:	461c      	mov	r4, r3
 80047f4:	e7f3      	b.n	80047de <__assert_func+0x12>
 80047f6:	bf00      	nop
 80047f8:	20000068 	.word	0x20000068
 80047fc:	08005fe8 	.word	0x08005fe8
 8004800:	08005ff5 	.word	0x08005ff5
 8004804:	08006023 	.word	0x08006023

08004808 <_free_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4605      	mov	r5, r0
 800480c:	2900      	cmp	r1, #0
 800480e:	d040      	beq.n	8004892 <_free_r+0x8a>
 8004810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004814:	1f0c      	subs	r4, r1, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	bfb8      	it	lt
 800481a:	18e4      	addlt	r4, r4, r3
 800481c:	f000 f8e4 	bl	80049e8 <__malloc_lock>
 8004820:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <_free_r+0x8c>)
 8004822:	6813      	ldr	r3, [r2, #0]
 8004824:	b933      	cbnz	r3, 8004834 <_free_r+0x2c>
 8004826:	6063      	str	r3, [r4, #4]
 8004828:	6014      	str	r4, [r2, #0]
 800482a:	4628      	mov	r0, r5
 800482c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004830:	f000 b8e0 	b.w	80049f4 <__malloc_unlock>
 8004834:	42a3      	cmp	r3, r4
 8004836:	d908      	bls.n	800484a <_free_r+0x42>
 8004838:	6820      	ldr	r0, [r4, #0]
 800483a:	1821      	adds	r1, r4, r0
 800483c:	428b      	cmp	r3, r1
 800483e:	bf01      	itttt	eq
 8004840:	6819      	ldreq	r1, [r3, #0]
 8004842:	685b      	ldreq	r3, [r3, #4]
 8004844:	1809      	addeq	r1, r1, r0
 8004846:	6021      	streq	r1, [r4, #0]
 8004848:	e7ed      	b.n	8004826 <_free_r+0x1e>
 800484a:	461a      	mov	r2, r3
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b10b      	cbz	r3, 8004854 <_free_r+0x4c>
 8004850:	42a3      	cmp	r3, r4
 8004852:	d9fa      	bls.n	800484a <_free_r+0x42>
 8004854:	6811      	ldr	r1, [r2, #0]
 8004856:	1850      	adds	r0, r2, r1
 8004858:	42a0      	cmp	r0, r4
 800485a:	d10b      	bne.n	8004874 <_free_r+0x6c>
 800485c:	6820      	ldr	r0, [r4, #0]
 800485e:	4401      	add	r1, r0
 8004860:	1850      	adds	r0, r2, r1
 8004862:	4283      	cmp	r3, r0
 8004864:	6011      	str	r1, [r2, #0]
 8004866:	d1e0      	bne.n	800482a <_free_r+0x22>
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	4408      	add	r0, r1
 800486e:	6010      	str	r0, [r2, #0]
 8004870:	6053      	str	r3, [r2, #4]
 8004872:	e7da      	b.n	800482a <_free_r+0x22>
 8004874:	d902      	bls.n	800487c <_free_r+0x74>
 8004876:	230c      	movs	r3, #12
 8004878:	602b      	str	r3, [r5, #0]
 800487a:	e7d6      	b.n	800482a <_free_r+0x22>
 800487c:	6820      	ldr	r0, [r4, #0]
 800487e:	1821      	adds	r1, r4, r0
 8004880:	428b      	cmp	r3, r1
 8004882:	bf01      	itttt	eq
 8004884:	6819      	ldreq	r1, [r3, #0]
 8004886:	685b      	ldreq	r3, [r3, #4]
 8004888:	1809      	addeq	r1, r1, r0
 800488a:	6021      	streq	r1, [r4, #0]
 800488c:	6063      	str	r3, [r4, #4]
 800488e:	6054      	str	r4, [r2, #4]
 8004890:	e7cb      	b.n	800482a <_free_r+0x22>
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	200005ac 	.word	0x200005ac

08004898 <malloc>:
 8004898:	4b02      	ldr	r3, [pc, #8]	; (80048a4 <malloc+0xc>)
 800489a:	4601      	mov	r1, r0
 800489c:	6818      	ldr	r0, [r3, #0]
 800489e:	f000 b823 	b.w	80048e8 <_malloc_r>
 80048a2:	bf00      	nop
 80048a4:	20000068 	.word	0x20000068

080048a8 <sbrk_aligned>:
 80048a8:	b570      	push	{r4, r5, r6, lr}
 80048aa:	4e0e      	ldr	r6, [pc, #56]	; (80048e4 <sbrk_aligned+0x3c>)
 80048ac:	460c      	mov	r4, r1
 80048ae:	6831      	ldr	r1, [r6, #0]
 80048b0:	4605      	mov	r5, r0
 80048b2:	b911      	cbnz	r1, 80048ba <sbrk_aligned+0x12>
 80048b4:	f000 fc66 	bl	8005184 <_sbrk_r>
 80048b8:	6030      	str	r0, [r6, #0]
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 fc61 	bl	8005184 <_sbrk_r>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	d00a      	beq.n	80048dc <sbrk_aligned+0x34>
 80048c6:	1cc4      	adds	r4, r0, #3
 80048c8:	f024 0403 	bic.w	r4, r4, #3
 80048cc:	42a0      	cmp	r0, r4
 80048ce:	d007      	beq.n	80048e0 <sbrk_aligned+0x38>
 80048d0:	1a21      	subs	r1, r4, r0
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 fc56 	bl	8005184 <_sbrk_r>
 80048d8:	3001      	adds	r0, #1
 80048da:	d101      	bne.n	80048e0 <sbrk_aligned+0x38>
 80048dc:	f04f 34ff 	mov.w	r4, #4294967295
 80048e0:	4620      	mov	r0, r4
 80048e2:	bd70      	pop	{r4, r5, r6, pc}
 80048e4:	200005b0 	.word	0x200005b0

080048e8 <_malloc_r>:
 80048e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048ec:	1ccd      	adds	r5, r1, #3
 80048ee:	f025 0503 	bic.w	r5, r5, #3
 80048f2:	3508      	adds	r5, #8
 80048f4:	2d0c      	cmp	r5, #12
 80048f6:	bf38      	it	cc
 80048f8:	250c      	movcc	r5, #12
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	4607      	mov	r7, r0
 80048fe:	db01      	blt.n	8004904 <_malloc_r+0x1c>
 8004900:	42a9      	cmp	r1, r5
 8004902:	d905      	bls.n	8004910 <_malloc_r+0x28>
 8004904:	230c      	movs	r3, #12
 8004906:	2600      	movs	r6, #0
 8004908:	603b      	str	r3, [r7, #0]
 800490a:	4630      	mov	r0, r6
 800490c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004910:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049e4 <_malloc_r+0xfc>
 8004914:	f000 f868 	bl	80049e8 <__malloc_lock>
 8004918:	f8d8 3000 	ldr.w	r3, [r8]
 800491c:	461c      	mov	r4, r3
 800491e:	bb5c      	cbnz	r4, 8004978 <_malloc_r+0x90>
 8004920:	4629      	mov	r1, r5
 8004922:	4638      	mov	r0, r7
 8004924:	f7ff ffc0 	bl	80048a8 <sbrk_aligned>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	4604      	mov	r4, r0
 800492c:	d155      	bne.n	80049da <_malloc_r+0xf2>
 800492e:	f8d8 4000 	ldr.w	r4, [r8]
 8004932:	4626      	mov	r6, r4
 8004934:	2e00      	cmp	r6, #0
 8004936:	d145      	bne.n	80049c4 <_malloc_r+0xdc>
 8004938:	2c00      	cmp	r4, #0
 800493a:	d048      	beq.n	80049ce <_malloc_r+0xe6>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	4631      	mov	r1, r6
 8004940:	4638      	mov	r0, r7
 8004942:	eb04 0903 	add.w	r9, r4, r3
 8004946:	f000 fc1d 	bl	8005184 <_sbrk_r>
 800494a:	4581      	cmp	r9, r0
 800494c:	d13f      	bne.n	80049ce <_malloc_r+0xe6>
 800494e:	6821      	ldr	r1, [r4, #0]
 8004950:	4638      	mov	r0, r7
 8004952:	1a6d      	subs	r5, r5, r1
 8004954:	4629      	mov	r1, r5
 8004956:	f7ff ffa7 	bl	80048a8 <sbrk_aligned>
 800495a:	3001      	adds	r0, #1
 800495c:	d037      	beq.n	80049ce <_malloc_r+0xe6>
 800495e:	6823      	ldr	r3, [r4, #0]
 8004960:	442b      	add	r3, r5
 8004962:	6023      	str	r3, [r4, #0]
 8004964:	f8d8 3000 	ldr.w	r3, [r8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d038      	beq.n	80049de <_malloc_r+0xf6>
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	42a2      	cmp	r2, r4
 8004970:	d12b      	bne.n	80049ca <_malloc_r+0xe2>
 8004972:	2200      	movs	r2, #0
 8004974:	605a      	str	r2, [r3, #4]
 8004976:	e00f      	b.n	8004998 <_malloc_r+0xb0>
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	1b52      	subs	r2, r2, r5
 800497c:	d41f      	bmi.n	80049be <_malloc_r+0xd6>
 800497e:	2a0b      	cmp	r2, #11
 8004980:	d917      	bls.n	80049b2 <_malloc_r+0xca>
 8004982:	1961      	adds	r1, r4, r5
 8004984:	42a3      	cmp	r3, r4
 8004986:	6025      	str	r5, [r4, #0]
 8004988:	bf18      	it	ne
 800498a:	6059      	strne	r1, [r3, #4]
 800498c:	6863      	ldr	r3, [r4, #4]
 800498e:	bf08      	it	eq
 8004990:	f8c8 1000 	streq.w	r1, [r8]
 8004994:	5162      	str	r2, [r4, r5]
 8004996:	604b      	str	r3, [r1, #4]
 8004998:	4638      	mov	r0, r7
 800499a:	f104 060b 	add.w	r6, r4, #11
 800499e:	f000 f829 	bl	80049f4 <__malloc_unlock>
 80049a2:	f026 0607 	bic.w	r6, r6, #7
 80049a6:	1d23      	adds	r3, r4, #4
 80049a8:	1af2      	subs	r2, r6, r3
 80049aa:	d0ae      	beq.n	800490a <_malloc_r+0x22>
 80049ac:	1b9b      	subs	r3, r3, r6
 80049ae:	50a3      	str	r3, [r4, r2]
 80049b0:	e7ab      	b.n	800490a <_malloc_r+0x22>
 80049b2:	42a3      	cmp	r3, r4
 80049b4:	6862      	ldr	r2, [r4, #4]
 80049b6:	d1dd      	bne.n	8004974 <_malloc_r+0x8c>
 80049b8:	f8c8 2000 	str.w	r2, [r8]
 80049bc:	e7ec      	b.n	8004998 <_malloc_r+0xb0>
 80049be:	4623      	mov	r3, r4
 80049c0:	6864      	ldr	r4, [r4, #4]
 80049c2:	e7ac      	b.n	800491e <_malloc_r+0x36>
 80049c4:	4634      	mov	r4, r6
 80049c6:	6876      	ldr	r6, [r6, #4]
 80049c8:	e7b4      	b.n	8004934 <_malloc_r+0x4c>
 80049ca:	4613      	mov	r3, r2
 80049cc:	e7cc      	b.n	8004968 <_malloc_r+0x80>
 80049ce:	230c      	movs	r3, #12
 80049d0:	4638      	mov	r0, r7
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	f000 f80e 	bl	80049f4 <__malloc_unlock>
 80049d8:	e797      	b.n	800490a <_malloc_r+0x22>
 80049da:	6025      	str	r5, [r4, #0]
 80049dc:	e7dc      	b.n	8004998 <_malloc_r+0xb0>
 80049de:	605b      	str	r3, [r3, #4]
 80049e0:	deff      	udf	#255	; 0xff
 80049e2:	bf00      	nop
 80049e4:	200005ac 	.word	0x200005ac

080049e8 <__malloc_lock>:
 80049e8:	4801      	ldr	r0, [pc, #4]	; (80049f0 <__malloc_lock+0x8>)
 80049ea:	f7ff beed 	b.w	80047c8 <__retarget_lock_acquire_recursive>
 80049ee:	bf00      	nop
 80049f0:	200005a8 	.word	0x200005a8

080049f4 <__malloc_unlock>:
 80049f4:	4801      	ldr	r0, [pc, #4]	; (80049fc <__malloc_unlock+0x8>)
 80049f6:	f7ff bee8 	b.w	80047ca <__retarget_lock_release_recursive>
 80049fa:	bf00      	nop
 80049fc:	200005a8 	.word	0x200005a8

08004a00 <__ssputs_r>:
 8004a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a04:	461f      	mov	r7, r3
 8004a06:	688e      	ldr	r6, [r1, #8]
 8004a08:	4682      	mov	sl, r0
 8004a0a:	42be      	cmp	r6, r7
 8004a0c:	460c      	mov	r4, r1
 8004a0e:	4690      	mov	r8, r2
 8004a10:	680b      	ldr	r3, [r1, #0]
 8004a12:	d82c      	bhi.n	8004a6e <__ssputs_r+0x6e>
 8004a14:	898a      	ldrh	r2, [r1, #12]
 8004a16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a1a:	d026      	beq.n	8004a6a <__ssputs_r+0x6a>
 8004a1c:	6965      	ldr	r5, [r4, #20]
 8004a1e:	6909      	ldr	r1, [r1, #16]
 8004a20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a24:	eba3 0901 	sub.w	r9, r3, r1
 8004a28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a2c:	1c7b      	adds	r3, r7, #1
 8004a2e:	444b      	add	r3, r9
 8004a30:	106d      	asrs	r5, r5, #1
 8004a32:	429d      	cmp	r5, r3
 8004a34:	bf38      	it	cc
 8004a36:	461d      	movcc	r5, r3
 8004a38:	0553      	lsls	r3, r2, #21
 8004a3a:	d527      	bpl.n	8004a8c <__ssputs_r+0x8c>
 8004a3c:	4629      	mov	r1, r5
 8004a3e:	f7ff ff53 	bl	80048e8 <_malloc_r>
 8004a42:	4606      	mov	r6, r0
 8004a44:	b360      	cbz	r0, 8004aa0 <__ssputs_r+0xa0>
 8004a46:	464a      	mov	r2, r9
 8004a48:	6921      	ldr	r1, [r4, #16]
 8004a4a:	f000 fbb9 	bl	80051c0 <memcpy>
 8004a4e:	89a3      	ldrh	r3, [r4, #12]
 8004a50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a58:	81a3      	strh	r3, [r4, #12]
 8004a5a:	6126      	str	r6, [r4, #16]
 8004a5c:	444e      	add	r6, r9
 8004a5e:	6026      	str	r6, [r4, #0]
 8004a60:	463e      	mov	r6, r7
 8004a62:	6165      	str	r5, [r4, #20]
 8004a64:	eba5 0509 	sub.w	r5, r5, r9
 8004a68:	60a5      	str	r5, [r4, #8]
 8004a6a:	42be      	cmp	r6, r7
 8004a6c:	d900      	bls.n	8004a70 <__ssputs_r+0x70>
 8004a6e:	463e      	mov	r6, r7
 8004a70:	4632      	mov	r2, r6
 8004a72:	4641      	mov	r1, r8
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	f000 fb6b 	bl	8005150 <memmove>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	1b9b      	subs	r3, r3, r6
 8004a80:	60a3      	str	r3, [r4, #8]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	4433      	add	r3, r6
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a8c:	462a      	mov	r2, r5
 8004a8e:	f000 fbac 	bl	80051ea <_realloc_r>
 8004a92:	4606      	mov	r6, r0
 8004a94:	2800      	cmp	r0, #0
 8004a96:	d1e0      	bne.n	8004a5a <__ssputs_r+0x5a>
 8004a98:	4650      	mov	r0, sl
 8004a9a:	6921      	ldr	r1, [r4, #16]
 8004a9c:	f7ff feb4 	bl	8004808 <_free_r>
 8004aa0:	230c      	movs	r3, #12
 8004aa2:	f8ca 3000 	str.w	r3, [sl]
 8004aa6:	89a3      	ldrh	r3, [r4, #12]
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	e7e9      	b.n	8004a88 <__ssputs_r+0x88>

08004ab4 <_svfiprintf_r>:
 8004ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ab8:	4698      	mov	r8, r3
 8004aba:	898b      	ldrh	r3, [r1, #12]
 8004abc:	4607      	mov	r7, r0
 8004abe:	061b      	lsls	r3, r3, #24
 8004ac0:	460d      	mov	r5, r1
 8004ac2:	4614      	mov	r4, r2
 8004ac4:	b09d      	sub	sp, #116	; 0x74
 8004ac6:	d50e      	bpl.n	8004ae6 <_svfiprintf_r+0x32>
 8004ac8:	690b      	ldr	r3, [r1, #16]
 8004aca:	b963      	cbnz	r3, 8004ae6 <_svfiprintf_r+0x32>
 8004acc:	2140      	movs	r1, #64	; 0x40
 8004ace:	f7ff ff0b 	bl	80048e8 <_malloc_r>
 8004ad2:	6028      	str	r0, [r5, #0]
 8004ad4:	6128      	str	r0, [r5, #16]
 8004ad6:	b920      	cbnz	r0, 8004ae2 <_svfiprintf_r+0x2e>
 8004ad8:	230c      	movs	r3, #12
 8004ada:	603b      	str	r3, [r7, #0]
 8004adc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae0:	e0d0      	b.n	8004c84 <_svfiprintf_r+0x1d0>
 8004ae2:	2340      	movs	r3, #64	; 0x40
 8004ae4:	616b      	str	r3, [r5, #20]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	9309      	str	r3, [sp, #36]	; 0x24
 8004aea:	2320      	movs	r3, #32
 8004aec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004af0:	2330      	movs	r3, #48	; 0x30
 8004af2:	f04f 0901 	mov.w	r9, #1
 8004af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004afa:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004c9c <_svfiprintf_r+0x1e8>
 8004afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b02:	4623      	mov	r3, r4
 8004b04:	469a      	mov	sl, r3
 8004b06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b0a:	b10a      	cbz	r2, 8004b10 <_svfiprintf_r+0x5c>
 8004b0c:	2a25      	cmp	r2, #37	; 0x25
 8004b0e:	d1f9      	bne.n	8004b04 <_svfiprintf_r+0x50>
 8004b10:	ebba 0b04 	subs.w	fp, sl, r4
 8004b14:	d00b      	beq.n	8004b2e <_svfiprintf_r+0x7a>
 8004b16:	465b      	mov	r3, fp
 8004b18:	4622      	mov	r2, r4
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f7ff ff6f 	bl	8004a00 <__ssputs_r>
 8004b22:	3001      	adds	r0, #1
 8004b24:	f000 80a9 	beq.w	8004c7a <_svfiprintf_r+0x1c6>
 8004b28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b2a:	445a      	add	r2, fp
 8004b2c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f000 80a1 	beq.w	8004c7a <_svfiprintf_r+0x1c6>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b42:	f10a 0a01 	add.w	sl, sl, #1
 8004b46:	9304      	str	r3, [sp, #16]
 8004b48:	9307      	str	r3, [sp, #28]
 8004b4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b4e:	931a      	str	r3, [sp, #104]	; 0x68
 8004b50:	4654      	mov	r4, sl
 8004b52:	2205      	movs	r2, #5
 8004b54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b58:	4850      	ldr	r0, [pc, #320]	; (8004c9c <_svfiprintf_r+0x1e8>)
 8004b5a:	f000 fb23 	bl	80051a4 <memchr>
 8004b5e:	9a04      	ldr	r2, [sp, #16]
 8004b60:	b9d8      	cbnz	r0, 8004b9a <_svfiprintf_r+0xe6>
 8004b62:	06d0      	lsls	r0, r2, #27
 8004b64:	bf44      	itt	mi
 8004b66:	2320      	movmi	r3, #32
 8004b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b6c:	0711      	lsls	r1, r2, #28
 8004b6e:	bf44      	itt	mi
 8004b70:	232b      	movmi	r3, #43	; 0x2b
 8004b72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b76:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7a:	2b2a      	cmp	r3, #42	; 0x2a
 8004b7c:	d015      	beq.n	8004baa <_svfiprintf_r+0xf6>
 8004b7e:	4654      	mov	r4, sl
 8004b80:	2000      	movs	r0, #0
 8004b82:	f04f 0c0a 	mov.w	ip, #10
 8004b86:	9a07      	ldr	r2, [sp, #28]
 8004b88:	4621      	mov	r1, r4
 8004b8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b8e:	3b30      	subs	r3, #48	; 0x30
 8004b90:	2b09      	cmp	r3, #9
 8004b92:	d94d      	bls.n	8004c30 <_svfiprintf_r+0x17c>
 8004b94:	b1b0      	cbz	r0, 8004bc4 <_svfiprintf_r+0x110>
 8004b96:	9207      	str	r2, [sp, #28]
 8004b98:	e014      	b.n	8004bc4 <_svfiprintf_r+0x110>
 8004b9a:	eba0 0308 	sub.w	r3, r0, r8
 8004b9e:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	46a2      	mov	sl, r4
 8004ba6:	9304      	str	r3, [sp, #16]
 8004ba8:	e7d2      	b.n	8004b50 <_svfiprintf_r+0x9c>
 8004baa:	9b03      	ldr	r3, [sp, #12]
 8004bac:	1d19      	adds	r1, r3, #4
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	9103      	str	r1, [sp, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bfbb      	ittet	lt
 8004bb6:	425b      	neglt	r3, r3
 8004bb8:	f042 0202 	orrlt.w	r2, r2, #2
 8004bbc:	9307      	strge	r3, [sp, #28]
 8004bbe:	9307      	strlt	r3, [sp, #28]
 8004bc0:	bfb8      	it	lt
 8004bc2:	9204      	strlt	r2, [sp, #16]
 8004bc4:	7823      	ldrb	r3, [r4, #0]
 8004bc6:	2b2e      	cmp	r3, #46	; 0x2e
 8004bc8:	d10c      	bne.n	8004be4 <_svfiprintf_r+0x130>
 8004bca:	7863      	ldrb	r3, [r4, #1]
 8004bcc:	2b2a      	cmp	r3, #42	; 0x2a
 8004bce:	d134      	bne.n	8004c3a <_svfiprintf_r+0x186>
 8004bd0:	9b03      	ldr	r3, [sp, #12]
 8004bd2:	3402      	adds	r4, #2
 8004bd4:	1d1a      	adds	r2, r3, #4
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	9203      	str	r2, [sp, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bfb8      	it	lt
 8004bde:	f04f 33ff 	movlt.w	r3, #4294967295
 8004be2:	9305      	str	r3, [sp, #20]
 8004be4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004ca0 <_svfiprintf_r+0x1ec>
 8004be8:	2203      	movs	r2, #3
 8004bea:	4650      	mov	r0, sl
 8004bec:	7821      	ldrb	r1, [r4, #0]
 8004bee:	f000 fad9 	bl	80051a4 <memchr>
 8004bf2:	b138      	cbz	r0, 8004c04 <_svfiprintf_r+0x150>
 8004bf4:	2240      	movs	r2, #64	; 0x40
 8004bf6:	9b04      	ldr	r3, [sp, #16]
 8004bf8:	eba0 000a 	sub.w	r0, r0, sl
 8004bfc:	4082      	lsls	r2, r0
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	3401      	adds	r4, #1
 8004c02:	9304      	str	r3, [sp, #16]
 8004c04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c08:	2206      	movs	r2, #6
 8004c0a:	4826      	ldr	r0, [pc, #152]	; (8004ca4 <_svfiprintf_r+0x1f0>)
 8004c0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c10:	f000 fac8 	bl	80051a4 <memchr>
 8004c14:	2800      	cmp	r0, #0
 8004c16:	d038      	beq.n	8004c8a <_svfiprintf_r+0x1d6>
 8004c18:	4b23      	ldr	r3, [pc, #140]	; (8004ca8 <_svfiprintf_r+0x1f4>)
 8004c1a:	bb1b      	cbnz	r3, 8004c64 <_svfiprintf_r+0x1b0>
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	3307      	adds	r3, #7
 8004c20:	f023 0307 	bic.w	r3, r3, #7
 8004c24:	3308      	adds	r3, #8
 8004c26:	9303      	str	r3, [sp, #12]
 8004c28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2a:	4433      	add	r3, r6
 8004c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2e:	e768      	b.n	8004b02 <_svfiprintf_r+0x4e>
 8004c30:	460c      	mov	r4, r1
 8004c32:	2001      	movs	r0, #1
 8004c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c38:	e7a6      	b.n	8004b88 <_svfiprintf_r+0xd4>
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f04f 0c0a 	mov.w	ip, #10
 8004c40:	4619      	mov	r1, r3
 8004c42:	3401      	adds	r4, #1
 8004c44:	9305      	str	r3, [sp, #20]
 8004c46:	4620      	mov	r0, r4
 8004c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c4c:	3a30      	subs	r2, #48	; 0x30
 8004c4e:	2a09      	cmp	r2, #9
 8004c50:	d903      	bls.n	8004c5a <_svfiprintf_r+0x1a6>
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0c6      	beq.n	8004be4 <_svfiprintf_r+0x130>
 8004c56:	9105      	str	r1, [sp, #20]
 8004c58:	e7c4      	b.n	8004be4 <_svfiprintf_r+0x130>
 8004c5a:	4604      	mov	r4, r0
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c62:	e7f0      	b.n	8004c46 <_svfiprintf_r+0x192>
 8004c64:	ab03      	add	r3, sp, #12
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	462a      	mov	r2, r5
 8004c6a:	4638      	mov	r0, r7
 8004c6c:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <_svfiprintf_r+0x1f8>)
 8004c6e:	a904      	add	r1, sp, #16
 8004c70:	f3af 8000 	nop.w
 8004c74:	1c42      	adds	r2, r0, #1
 8004c76:	4606      	mov	r6, r0
 8004c78:	d1d6      	bne.n	8004c28 <_svfiprintf_r+0x174>
 8004c7a:	89ab      	ldrh	r3, [r5, #12]
 8004c7c:	065b      	lsls	r3, r3, #25
 8004c7e:	f53f af2d 	bmi.w	8004adc <_svfiprintf_r+0x28>
 8004c82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c84:	b01d      	add	sp, #116	; 0x74
 8004c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8a:	ab03      	add	r3, sp, #12
 8004c8c:	9300      	str	r3, [sp, #0]
 8004c8e:	462a      	mov	r2, r5
 8004c90:	4638      	mov	r0, r7
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <_svfiprintf_r+0x1f8>)
 8004c94:	a904      	add	r1, sp, #16
 8004c96:	f000 f87d 	bl	8004d94 <_printf_i>
 8004c9a:	e7eb      	b.n	8004c74 <_svfiprintf_r+0x1c0>
 8004c9c:	08006024 	.word	0x08006024
 8004ca0:	0800602a 	.word	0x0800602a
 8004ca4:	0800602e 	.word	0x0800602e
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	08004a01 	.word	0x08004a01

08004cb0 <_printf_common>:
 8004cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb4:	4616      	mov	r6, r2
 8004cb6:	4699      	mov	r9, r3
 8004cb8:	688a      	ldr	r2, [r1, #8]
 8004cba:	690b      	ldr	r3, [r1, #16]
 8004cbc:	4607      	mov	r7, r0
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	bfb8      	it	lt
 8004cc2:	4613      	movlt	r3, r2
 8004cc4:	6033      	str	r3, [r6, #0]
 8004cc6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cca:	460c      	mov	r4, r1
 8004ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cd0:	b10a      	cbz	r2, 8004cd6 <_printf_common+0x26>
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	6033      	str	r3, [r6, #0]
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	0699      	lsls	r1, r3, #26
 8004cda:	bf42      	ittt	mi
 8004cdc:	6833      	ldrmi	r3, [r6, #0]
 8004cde:	3302      	addmi	r3, #2
 8004ce0:	6033      	strmi	r3, [r6, #0]
 8004ce2:	6825      	ldr	r5, [r4, #0]
 8004ce4:	f015 0506 	ands.w	r5, r5, #6
 8004ce8:	d106      	bne.n	8004cf8 <_printf_common+0x48>
 8004cea:	f104 0a19 	add.w	sl, r4, #25
 8004cee:	68e3      	ldr	r3, [r4, #12]
 8004cf0:	6832      	ldr	r2, [r6, #0]
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	42ab      	cmp	r3, r5
 8004cf6:	dc2b      	bgt.n	8004d50 <_printf_common+0xa0>
 8004cf8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004cfc:	1e13      	subs	r3, r2, #0
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	bf18      	it	ne
 8004d02:	2301      	movne	r3, #1
 8004d04:	0692      	lsls	r2, r2, #26
 8004d06:	d430      	bmi.n	8004d6a <_printf_common+0xba>
 8004d08:	4649      	mov	r1, r9
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d10:	47c0      	blx	r8
 8004d12:	3001      	adds	r0, #1
 8004d14:	d023      	beq.n	8004d5e <_printf_common+0xae>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	6922      	ldr	r2, [r4, #16]
 8004d1a:	f003 0306 	and.w	r3, r3, #6
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	bf14      	ite	ne
 8004d22:	2500      	movne	r5, #0
 8004d24:	6833      	ldreq	r3, [r6, #0]
 8004d26:	f04f 0600 	mov.w	r6, #0
 8004d2a:	bf08      	it	eq
 8004d2c:	68e5      	ldreq	r5, [r4, #12]
 8004d2e:	f104 041a 	add.w	r4, r4, #26
 8004d32:	bf08      	it	eq
 8004d34:	1aed      	subeq	r5, r5, r3
 8004d36:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004d3a:	bf08      	it	eq
 8004d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d40:	4293      	cmp	r3, r2
 8004d42:	bfc4      	itt	gt
 8004d44:	1a9b      	subgt	r3, r3, r2
 8004d46:	18ed      	addgt	r5, r5, r3
 8004d48:	42b5      	cmp	r5, r6
 8004d4a:	d11a      	bne.n	8004d82 <_printf_common+0xd2>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	e008      	b.n	8004d62 <_printf_common+0xb2>
 8004d50:	2301      	movs	r3, #1
 8004d52:	4652      	mov	r2, sl
 8004d54:	4649      	mov	r1, r9
 8004d56:	4638      	mov	r0, r7
 8004d58:	47c0      	blx	r8
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d103      	bne.n	8004d66 <_printf_common+0xb6>
 8004d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d66:	3501      	adds	r5, #1
 8004d68:	e7c1      	b.n	8004cee <_printf_common+0x3e>
 8004d6a:	2030      	movs	r0, #48	; 0x30
 8004d6c:	18e1      	adds	r1, r4, r3
 8004d6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d78:	4422      	add	r2, r4
 8004d7a:	3302      	adds	r3, #2
 8004d7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d80:	e7c2      	b.n	8004d08 <_printf_common+0x58>
 8004d82:	2301      	movs	r3, #1
 8004d84:	4622      	mov	r2, r4
 8004d86:	4649      	mov	r1, r9
 8004d88:	4638      	mov	r0, r7
 8004d8a:	47c0      	blx	r8
 8004d8c:	3001      	adds	r0, #1
 8004d8e:	d0e6      	beq.n	8004d5e <_printf_common+0xae>
 8004d90:	3601      	adds	r6, #1
 8004d92:	e7d9      	b.n	8004d48 <_printf_common+0x98>

08004d94 <_printf_i>:
 8004d94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d98:	7e0f      	ldrb	r7, [r1, #24]
 8004d9a:	4691      	mov	r9, r2
 8004d9c:	2f78      	cmp	r7, #120	; 0x78
 8004d9e:	4680      	mov	r8, r0
 8004da0:	460c      	mov	r4, r1
 8004da2:	469a      	mov	sl, r3
 8004da4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004da6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004daa:	d807      	bhi.n	8004dbc <_printf_i+0x28>
 8004dac:	2f62      	cmp	r7, #98	; 0x62
 8004dae:	d80a      	bhi.n	8004dc6 <_printf_i+0x32>
 8004db0:	2f00      	cmp	r7, #0
 8004db2:	f000 80d5 	beq.w	8004f60 <_printf_i+0x1cc>
 8004db6:	2f58      	cmp	r7, #88	; 0x58
 8004db8:	f000 80c1 	beq.w	8004f3e <_printf_i+0x1aa>
 8004dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dc4:	e03a      	b.n	8004e3c <_printf_i+0xa8>
 8004dc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dca:	2b15      	cmp	r3, #21
 8004dcc:	d8f6      	bhi.n	8004dbc <_printf_i+0x28>
 8004dce:	a101      	add	r1, pc, #4	; (adr r1, 8004dd4 <_printf_i+0x40>)
 8004dd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dd4:	08004e2d 	.word	0x08004e2d
 8004dd8:	08004e41 	.word	0x08004e41
 8004ddc:	08004dbd 	.word	0x08004dbd
 8004de0:	08004dbd 	.word	0x08004dbd
 8004de4:	08004dbd 	.word	0x08004dbd
 8004de8:	08004dbd 	.word	0x08004dbd
 8004dec:	08004e41 	.word	0x08004e41
 8004df0:	08004dbd 	.word	0x08004dbd
 8004df4:	08004dbd 	.word	0x08004dbd
 8004df8:	08004dbd 	.word	0x08004dbd
 8004dfc:	08004dbd 	.word	0x08004dbd
 8004e00:	08004f47 	.word	0x08004f47
 8004e04:	08004e6d 	.word	0x08004e6d
 8004e08:	08004f01 	.word	0x08004f01
 8004e0c:	08004dbd 	.word	0x08004dbd
 8004e10:	08004dbd 	.word	0x08004dbd
 8004e14:	08004f69 	.word	0x08004f69
 8004e18:	08004dbd 	.word	0x08004dbd
 8004e1c:	08004e6d 	.word	0x08004e6d
 8004e20:	08004dbd 	.word	0x08004dbd
 8004e24:	08004dbd 	.word	0x08004dbd
 8004e28:	08004f09 	.word	0x08004f09
 8004e2c:	682b      	ldr	r3, [r5, #0]
 8004e2e:	1d1a      	adds	r2, r3, #4
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	602a      	str	r2, [r5, #0]
 8004e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0a0      	b.n	8004f82 <_printf_i+0x1ee>
 8004e40:	6820      	ldr	r0, [r4, #0]
 8004e42:	682b      	ldr	r3, [r5, #0]
 8004e44:	0607      	lsls	r7, r0, #24
 8004e46:	f103 0104 	add.w	r1, r3, #4
 8004e4a:	6029      	str	r1, [r5, #0]
 8004e4c:	d501      	bpl.n	8004e52 <_printf_i+0xbe>
 8004e4e:	681e      	ldr	r6, [r3, #0]
 8004e50:	e003      	b.n	8004e5a <_printf_i+0xc6>
 8004e52:	0646      	lsls	r6, r0, #25
 8004e54:	d5fb      	bpl.n	8004e4e <_printf_i+0xba>
 8004e56:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e5a:	2e00      	cmp	r6, #0
 8004e5c:	da03      	bge.n	8004e66 <_printf_i+0xd2>
 8004e5e:	232d      	movs	r3, #45	; 0x2d
 8004e60:	4276      	negs	r6, r6
 8004e62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e66:	230a      	movs	r3, #10
 8004e68:	4859      	ldr	r0, [pc, #356]	; (8004fd0 <_printf_i+0x23c>)
 8004e6a:	e012      	b.n	8004e92 <_printf_i+0xfe>
 8004e6c:	682b      	ldr	r3, [r5, #0]
 8004e6e:	6820      	ldr	r0, [r4, #0]
 8004e70:	1d19      	adds	r1, r3, #4
 8004e72:	6029      	str	r1, [r5, #0]
 8004e74:	0605      	lsls	r5, r0, #24
 8004e76:	d501      	bpl.n	8004e7c <_printf_i+0xe8>
 8004e78:	681e      	ldr	r6, [r3, #0]
 8004e7a:	e002      	b.n	8004e82 <_printf_i+0xee>
 8004e7c:	0641      	lsls	r1, r0, #25
 8004e7e:	d5fb      	bpl.n	8004e78 <_printf_i+0xe4>
 8004e80:	881e      	ldrh	r6, [r3, #0]
 8004e82:	2f6f      	cmp	r7, #111	; 0x6f
 8004e84:	bf0c      	ite	eq
 8004e86:	2308      	moveq	r3, #8
 8004e88:	230a      	movne	r3, #10
 8004e8a:	4851      	ldr	r0, [pc, #324]	; (8004fd0 <_printf_i+0x23c>)
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e92:	6865      	ldr	r5, [r4, #4]
 8004e94:	2d00      	cmp	r5, #0
 8004e96:	bfa8      	it	ge
 8004e98:	6821      	ldrge	r1, [r4, #0]
 8004e9a:	60a5      	str	r5, [r4, #8]
 8004e9c:	bfa4      	itt	ge
 8004e9e:	f021 0104 	bicge.w	r1, r1, #4
 8004ea2:	6021      	strge	r1, [r4, #0]
 8004ea4:	b90e      	cbnz	r6, 8004eaa <_printf_i+0x116>
 8004ea6:	2d00      	cmp	r5, #0
 8004ea8:	d04b      	beq.n	8004f42 <_printf_i+0x1ae>
 8004eaa:	4615      	mov	r5, r2
 8004eac:	fbb6 f1f3 	udiv	r1, r6, r3
 8004eb0:	fb03 6711 	mls	r7, r3, r1, r6
 8004eb4:	5dc7      	ldrb	r7, [r0, r7]
 8004eb6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004eba:	4637      	mov	r7, r6
 8004ebc:	42bb      	cmp	r3, r7
 8004ebe:	460e      	mov	r6, r1
 8004ec0:	d9f4      	bls.n	8004eac <_printf_i+0x118>
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d10b      	bne.n	8004ede <_printf_i+0x14a>
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	07de      	lsls	r6, r3, #31
 8004eca:	d508      	bpl.n	8004ede <_printf_i+0x14a>
 8004ecc:	6923      	ldr	r3, [r4, #16]
 8004ece:	6861      	ldr	r1, [r4, #4]
 8004ed0:	4299      	cmp	r1, r3
 8004ed2:	bfde      	ittt	le
 8004ed4:	2330      	movle	r3, #48	; 0x30
 8004ed6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004eda:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ede:	1b52      	subs	r2, r2, r5
 8004ee0:	6122      	str	r2, [r4, #16]
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f8cd a000 	str.w	sl, [sp]
 8004eec:	aa03      	add	r2, sp, #12
 8004eee:	f7ff fedf 	bl	8004cb0 <_printf_common>
 8004ef2:	3001      	adds	r0, #1
 8004ef4:	d14a      	bne.n	8004f8c <_printf_i+0x1f8>
 8004ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8004efa:	b004      	add	sp, #16
 8004efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	f043 0320 	orr.w	r3, r3, #32
 8004f06:	6023      	str	r3, [r4, #0]
 8004f08:	2778      	movs	r7, #120	; 0x78
 8004f0a:	4832      	ldr	r0, [pc, #200]	; (8004fd4 <_printf_i+0x240>)
 8004f0c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	6829      	ldr	r1, [r5, #0]
 8004f14:	061f      	lsls	r7, r3, #24
 8004f16:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f1a:	d402      	bmi.n	8004f22 <_printf_i+0x18e>
 8004f1c:	065f      	lsls	r7, r3, #25
 8004f1e:	bf48      	it	mi
 8004f20:	b2b6      	uxthmi	r6, r6
 8004f22:	07df      	lsls	r7, r3, #31
 8004f24:	bf48      	it	mi
 8004f26:	f043 0320 	orrmi.w	r3, r3, #32
 8004f2a:	6029      	str	r1, [r5, #0]
 8004f2c:	bf48      	it	mi
 8004f2e:	6023      	strmi	r3, [r4, #0]
 8004f30:	b91e      	cbnz	r6, 8004f3a <_printf_i+0x1a6>
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	f023 0320 	bic.w	r3, r3, #32
 8004f38:	6023      	str	r3, [r4, #0]
 8004f3a:	2310      	movs	r3, #16
 8004f3c:	e7a6      	b.n	8004e8c <_printf_i+0xf8>
 8004f3e:	4824      	ldr	r0, [pc, #144]	; (8004fd0 <_printf_i+0x23c>)
 8004f40:	e7e4      	b.n	8004f0c <_printf_i+0x178>
 8004f42:	4615      	mov	r5, r2
 8004f44:	e7bd      	b.n	8004ec2 <_printf_i+0x12e>
 8004f46:	682b      	ldr	r3, [r5, #0]
 8004f48:	6826      	ldr	r6, [r4, #0]
 8004f4a:	1d18      	adds	r0, r3, #4
 8004f4c:	6961      	ldr	r1, [r4, #20]
 8004f4e:	6028      	str	r0, [r5, #0]
 8004f50:	0635      	lsls	r5, r6, #24
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	d501      	bpl.n	8004f5a <_printf_i+0x1c6>
 8004f56:	6019      	str	r1, [r3, #0]
 8004f58:	e002      	b.n	8004f60 <_printf_i+0x1cc>
 8004f5a:	0670      	lsls	r0, r6, #25
 8004f5c:	d5fb      	bpl.n	8004f56 <_printf_i+0x1c2>
 8004f5e:	8019      	strh	r1, [r3, #0]
 8004f60:	2300      	movs	r3, #0
 8004f62:	4615      	mov	r5, r2
 8004f64:	6123      	str	r3, [r4, #16]
 8004f66:	e7bc      	b.n	8004ee2 <_printf_i+0x14e>
 8004f68:	682b      	ldr	r3, [r5, #0]
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	1d1a      	adds	r2, r3, #4
 8004f6e:	602a      	str	r2, [r5, #0]
 8004f70:	681d      	ldr	r5, [r3, #0]
 8004f72:	6862      	ldr	r2, [r4, #4]
 8004f74:	4628      	mov	r0, r5
 8004f76:	f000 f915 	bl	80051a4 <memchr>
 8004f7a:	b108      	cbz	r0, 8004f80 <_printf_i+0x1ec>
 8004f7c:	1b40      	subs	r0, r0, r5
 8004f7e:	6060      	str	r0, [r4, #4]
 8004f80:	6863      	ldr	r3, [r4, #4]
 8004f82:	6123      	str	r3, [r4, #16]
 8004f84:	2300      	movs	r3, #0
 8004f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f8a:	e7aa      	b.n	8004ee2 <_printf_i+0x14e>
 8004f8c:	462a      	mov	r2, r5
 8004f8e:	4649      	mov	r1, r9
 8004f90:	4640      	mov	r0, r8
 8004f92:	6923      	ldr	r3, [r4, #16]
 8004f94:	47d0      	blx	sl
 8004f96:	3001      	adds	r0, #1
 8004f98:	d0ad      	beq.n	8004ef6 <_printf_i+0x162>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	079b      	lsls	r3, r3, #30
 8004f9e:	d413      	bmi.n	8004fc8 <_printf_i+0x234>
 8004fa0:	68e0      	ldr	r0, [r4, #12]
 8004fa2:	9b03      	ldr	r3, [sp, #12]
 8004fa4:	4298      	cmp	r0, r3
 8004fa6:	bfb8      	it	lt
 8004fa8:	4618      	movlt	r0, r3
 8004faa:	e7a6      	b.n	8004efa <_printf_i+0x166>
 8004fac:	2301      	movs	r3, #1
 8004fae:	4632      	mov	r2, r6
 8004fb0:	4649      	mov	r1, r9
 8004fb2:	4640      	mov	r0, r8
 8004fb4:	47d0      	blx	sl
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	d09d      	beq.n	8004ef6 <_printf_i+0x162>
 8004fba:	3501      	adds	r5, #1
 8004fbc:	68e3      	ldr	r3, [r4, #12]
 8004fbe:	9903      	ldr	r1, [sp, #12]
 8004fc0:	1a5b      	subs	r3, r3, r1
 8004fc2:	42ab      	cmp	r3, r5
 8004fc4:	dcf2      	bgt.n	8004fac <_printf_i+0x218>
 8004fc6:	e7eb      	b.n	8004fa0 <_printf_i+0x20c>
 8004fc8:	2500      	movs	r5, #0
 8004fca:	f104 0619 	add.w	r6, r4, #25
 8004fce:	e7f5      	b.n	8004fbc <_printf_i+0x228>
 8004fd0:	08006035 	.word	0x08006035
 8004fd4:	08006046 	.word	0x08006046

08004fd8 <__sflush_r>:
 8004fd8:	898a      	ldrh	r2, [r1, #12]
 8004fda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fdc:	4605      	mov	r5, r0
 8004fde:	0710      	lsls	r0, r2, #28
 8004fe0:	460c      	mov	r4, r1
 8004fe2:	d457      	bmi.n	8005094 <__sflush_r+0xbc>
 8004fe4:	684b      	ldr	r3, [r1, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	dc04      	bgt.n	8004ff4 <__sflush_r+0x1c>
 8004fea:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	dc01      	bgt.n	8004ff4 <__sflush_r+0x1c>
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ff4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ff6:	2e00      	cmp	r6, #0
 8004ff8:	d0fa      	beq.n	8004ff0 <__sflush_r+0x18>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005000:	682f      	ldr	r7, [r5, #0]
 8005002:	6a21      	ldr	r1, [r4, #32]
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	d032      	beq.n	800506e <__sflush_r+0x96>
 8005008:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800500a:	89a3      	ldrh	r3, [r4, #12]
 800500c:	075a      	lsls	r2, r3, #29
 800500e:	d505      	bpl.n	800501c <__sflush_r+0x44>
 8005010:	6863      	ldr	r3, [r4, #4]
 8005012:	1ac0      	subs	r0, r0, r3
 8005014:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005016:	b10b      	cbz	r3, 800501c <__sflush_r+0x44>
 8005018:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800501a:	1ac0      	subs	r0, r0, r3
 800501c:	2300      	movs	r3, #0
 800501e:	4602      	mov	r2, r0
 8005020:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005022:	4628      	mov	r0, r5
 8005024:	6a21      	ldr	r1, [r4, #32]
 8005026:	47b0      	blx	r6
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	d106      	bne.n	800503c <__sflush_r+0x64>
 800502e:	6829      	ldr	r1, [r5, #0]
 8005030:	291d      	cmp	r1, #29
 8005032:	d82b      	bhi.n	800508c <__sflush_r+0xb4>
 8005034:	4a28      	ldr	r2, [pc, #160]	; (80050d8 <__sflush_r+0x100>)
 8005036:	410a      	asrs	r2, r1
 8005038:	07d6      	lsls	r6, r2, #31
 800503a:	d427      	bmi.n	800508c <__sflush_r+0xb4>
 800503c:	2200      	movs	r2, #0
 800503e:	6062      	str	r2, [r4, #4]
 8005040:	6922      	ldr	r2, [r4, #16]
 8005042:	04d9      	lsls	r1, r3, #19
 8005044:	6022      	str	r2, [r4, #0]
 8005046:	d504      	bpl.n	8005052 <__sflush_r+0x7a>
 8005048:	1c42      	adds	r2, r0, #1
 800504a:	d101      	bne.n	8005050 <__sflush_r+0x78>
 800504c:	682b      	ldr	r3, [r5, #0]
 800504e:	b903      	cbnz	r3, 8005052 <__sflush_r+0x7a>
 8005050:	6560      	str	r0, [r4, #84]	; 0x54
 8005052:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005054:	602f      	str	r7, [r5, #0]
 8005056:	2900      	cmp	r1, #0
 8005058:	d0ca      	beq.n	8004ff0 <__sflush_r+0x18>
 800505a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800505e:	4299      	cmp	r1, r3
 8005060:	d002      	beq.n	8005068 <__sflush_r+0x90>
 8005062:	4628      	mov	r0, r5
 8005064:	f7ff fbd0 	bl	8004808 <_free_r>
 8005068:	2000      	movs	r0, #0
 800506a:	6360      	str	r0, [r4, #52]	; 0x34
 800506c:	e7c1      	b.n	8004ff2 <__sflush_r+0x1a>
 800506e:	2301      	movs	r3, #1
 8005070:	4628      	mov	r0, r5
 8005072:	47b0      	blx	r6
 8005074:	1c41      	adds	r1, r0, #1
 8005076:	d1c8      	bne.n	800500a <__sflush_r+0x32>
 8005078:	682b      	ldr	r3, [r5, #0]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d0c5      	beq.n	800500a <__sflush_r+0x32>
 800507e:	2b1d      	cmp	r3, #29
 8005080:	d001      	beq.n	8005086 <__sflush_r+0xae>
 8005082:	2b16      	cmp	r3, #22
 8005084:	d101      	bne.n	800508a <__sflush_r+0xb2>
 8005086:	602f      	str	r7, [r5, #0]
 8005088:	e7b2      	b.n	8004ff0 <__sflush_r+0x18>
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	e7ae      	b.n	8004ff2 <__sflush_r+0x1a>
 8005094:	690f      	ldr	r7, [r1, #16]
 8005096:	2f00      	cmp	r7, #0
 8005098:	d0aa      	beq.n	8004ff0 <__sflush_r+0x18>
 800509a:	0793      	lsls	r3, r2, #30
 800509c:	bf18      	it	ne
 800509e:	2300      	movne	r3, #0
 80050a0:	680e      	ldr	r6, [r1, #0]
 80050a2:	bf08      	it	eq
 80050a4:	694b      	ldreq	r3, [r1, #20]
 80050a6:	1bf6      	subs	r6, r6, r7
 80050a8:	600f      	str	r7, [r1, #0]
 80050aa:	608b      	str	r3, [r1, #8]
 80050ac:	2e00      	cmp	r6, #0
 80050ae:	dd9f      	ble.n	8004ff0 <__sflush_r+0x18>
 80050b0:	4633      	mov	r3, r6
 80050b2:	463a      	mov	r2, r7
 80050b4:	4628      	mov	r0, r5
 80050b6:	6a21      	ldr	r1, [r4, #32]
 80050b8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80050bc:	47e0      	blx	ip
 80050be:	2800      	cmp	r0, #0
 80050c0:	dc06      	bgt.n	80050d0 <__sflush_r+0xf8>
 80050c2:	89a3      	ldrh	r3, [r4, #12]
 80050c4:	f04f 30ff 	mov.w	r0, #4294967295
 80050c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050cc:	81a3      	strh	r3, [r4, #12]
 80050ce:	e790      	b.n	8004ff2 <__sflush_r+0x1a>
 80050d0:	4407      	add	r7, r0
 80050d2:	1a36      	subs	r6, r6, r0
 80050d4:	e7ea      	b.n	80050ac <__sflush_r+0xd4>
 80050d6:	bf00      	nop
 80050d8:	dfbffffe 	.word	0xdfbffffe

080050dc <_fflush_r>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	690b      	ldr	r3, [r1, #16]
 80050e0:	4605      	mov	r5, r0
 80050e2:	460c      	mov	r4, r1
 80050e4:	b913      	cbnz	r3, 80050ec <_fflush_r+0x10>
 80050e6:	2500      	movs	r5, #0
 80050e8:	4628      	mov	r0, r5
 80050ea:	bd38      	pop	{r3, r4, r5, pc}
 80050ec:	b118      	cbz	r0, 80050f6 <_fflush_r+0x1a>
 80050ee:	6a03      	ldr	r3, [r0, #32]
 80050f0:	b90b      	cbnz	r3, 80050f6 <_fflush_r+0x1a>
 80050f2:	f7ff f9c5 	bl	8004480 <__sinit>
 80050f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d0f3      	beq.n	80050e6 <_fflush_r+0xa>
 80050fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005100:	07d0      	lsls	r0, r2, #31
 8005102:	d404      	bmi.n	800510e <_fflush_r+0x32>
 8005104:	0599      	lsls	r1, r3, #22
 8005106:	d402      	bmi.n	800510e <_fflush_r+0x32>
 8005108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510a:	f7ff fb5d 	bl	80047c8 <__retarget_lock_acquire_recursive>
 800510e:	4628      	mov	r0, r5
 8005110:	4621      	mov	r1, r4
 8005112:	f7ff ff61 	bl	8004fd8 <__sflush_r>
 8005116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005118:	4605      	mov	r5, r0
 800511a:	07da      	lsls	r2, r3, #31
 800511c:	d4e4      	bmi.n	80050e8 <_fflush_r+0xc>
 800511e:	89a3      	ldrh	r3, [r4, #12]
 8005120:	059b      	lsls	r3, r3, #22
 8005122:	d4e1      	bmi.n	80050e8 <_fflush_r+0xc>
 8005124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005126:	f7ff fb50 	bl	80047ca <__retarget_lock_release_recursive>
 800512a:	e7dd      	b.n	80050e8 <_fflush_r+0xc>

0800512c <fiprintf>:
 800512c:	b40e      	push	{r1, r2, r3}
 800512e:	b503      	push	{r0, r1, lr}
 8005130:	4601      	mov	r1, r0
 8005132:	ab03      	add	r3, sp, #12
 8005134:	4805      	ldr	r0, [pc, #20]	; (800514c <fiprintf+0x20>)
 8005136:	f853 2b04 	ldr.w	r2, [r3], #4
 800513a:	6800      	ldr	r0, [r0, #0]
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	f000 f8ab 	bl	8005298 <_vfiprintf_r>
 8005142:	b002      	add	sp, #8
 8005144:	f85d eb04 	ldr.w	lr, [sp], #4
 8005148:	b003      	add	sp, #12
 800514a:	4770      	bx	lr
 800514c:	20000068 	.word	0x20000068

08005150 <memmove>:
 8005150:	4288      	cmp	r0, r1
 8005152:	b510      	push	{r4, lr}
 8005154:	eb01 0402 	add.w	r4, r1, r2
 8005158:	d902      	bls.n	8005160 <memmove+0x10>
 800515a:	4284      	cmp	r4, r0
 800515c:	4623      	mov	r3, r4
 800515e:	d807      	bhi.n	8005170 <memmove+0x20>
 8005160:	1e43      	subs	r3, r0, #1
 8005162:	42a1      	cmp	r1, r4
 8005164:	d008      	beq.n	8005178 <memmove+0x28>
 8005166:	f811 2b01 	ldrb.w	r2, [r1], #1
 800516a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800516e:	e7f8      	b.n	8005162 <memmove+0x12>
 8005170:	4601      	mov	r1, r0
 8005172:	4402      	add	r2, r0
 8005174:	428a      	cmp	r2, r1
 8005176:	d100      	bne.n	800517a <memmove+0x2a>
 8005178:	bd10      	pop	{r4, pc}
 800517a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800517e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005182:	e7f7      	b.n	8005174 <memmove+0x24>

08005184 <_sbrk_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	2300      	movs	r3, #0
 8005188:	4d05      	ldr	r5, [pc, #20]	; (80051a0 <_sbrk_r+0x1c>)
 800518a:	4604      	mov	r4, r0
 800518c:	4608      	mov	r0, r1
 800518e:	602b      	str	r3, [r5, #0]
 8005190:	f7fc fe68 	bl	8001e64 <_sbrk>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_sbrk_r+0x1a>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_sbrk_r+0x1a>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	200005a4 	.word	0x200005a4

080051a4 <memchr>:
 80051a4:	4603      	mov	r3, r0
 80051a6:	b510      	push	{r4, lr}
 80051a8:	b2c9      	uxtb	r1, r1
 80051aa:	4402      	add	r2, r0
 80051ac:	4293      	cmp	r3, r2
 80051ae:	4618      	mov	r0, r3
 80051b0:	d101      	bne.n	80051b6 <memchr+0x12>
 80051b2:	2000      	movs	r0, #0
 80051b4:	e003      	b.n	80051be <memchr+0x1a>
 80051b6:	7804      	ldrb	r4, [r0, #0]
 80051b8:	3301      	adds	r3, #1
 80051ba:	428c      	cmp	r4, r1
 80051bc:	d1f6      	bne.n	80051ac <memchr+0x8>
 80051be:	bd10      	pop	{r4, pc}

080051c0 <memcpy>:
 80051c0:	440a      	add	r2, r1
 80051c2:	4291      	cmp	r1, r2
 80051c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051c8:	d100      	bne.n	80051cc <memcpy+0xc>
 80051ca:	4770      	bx	lr
 80051cc:	b510      	push	{r4, lr}
 80051ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051d2:	4291      	cmp	r1, r2
 80051d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051d8:	d1f9      	bne.n	80051ce <memcpy+0xe>
 80051da:	bd10      	pop	{r4, pc}

080051dc <abort>:
 80051dc:	2006      	movs	r0, #6
 80051de:	b508      	push	{r3, lr}
 80051e0:	f000 fa32 	bl	8005648 <raise>
 80051e4:	2001      	movs	r0, #1
 80051e6:	f7fc fdca 	bl	8001d7e <_exit>

080051ea <_realloc_r>:
 80051ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ee:	4680      	mov	r8, r0
 80051f0:	4614      	mov	r4, r2
 80051f2:	460e      	mov	r6, r1
 80051f4:	b921      	cbnz	r1, 8005200 <_realloc_r+0x16>
 80051f6:	4611      	mov	r1, r2
 80051f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051fc:	f7ff bb74 	b.w	80048e8 <_malloc_r>
 8005200:	b92a      	cbnz	r2, 800520e <_realloc_r+0x24>
 8005202:	f7ff fb01 	bl	8004808 <_free_r>
 8005206:	4625      	mov	r5, r4
 8005208:	4628      	mov	r0, r5
 800520a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800520e:	f000 fa37 	bl	8005680 <_malloc_usable_size_r>
 8005212:	4284      	cmp	r4, r0
 8005214:	4607      	mov	r7, r0
 8005216:	d802      	bhi.n	800521e <_realloc_r+0x34>
 8005218:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800521c:	d812      	bhi.n	8005244 <_realloc_r+0x5a>
 800521e:	4621      	mov	r1, r4
 8005220:	4640      	mov	r0, r8
 8005222:	f7ff fb61 	bl	80048e8 <_malloc_r>
 8005226:	4605      	mov	r5, r0
 8005228:	2800      	cmp	r0, #0
 800522a:	d0ed      	beq.n	8005208 <_realloc_r+0x1e>
 800522c:	42bc      	cmp	r4, r7
 800522e:	4622      	mov	r2, r4
 8005230:	4631      	mov	r1, r6
 8005232:	bf28      	it	cs
 8005234:	463a      	movcs	r2, r7
 8005236:	f7ff ffc3 	bl	80051c0 <memcpy>
 800523a:	4631      	mov	r1, r6
 800523c:	4640      	mov	r0, r8
 800523e:	f7ff fae3 	bl	8004808 <_free_r>
 8005242:	e7e1      	b.n	8005208 <_realloc_r+0x1e>
 8005244:	4635      	mov	r5, r6
 8005246:	e7df      	b.n	8005208 <_realloc_r+0x1e>

08005248 <__sfputc_r>:
 8005248:	6893      	ldr	r3, [r2, #8]
 800524a:	b410      	push	{r4}
 800524c:	3b01      	subs	r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	6093      	str	r3, [r2, #8]
 8005252:	da07      	bge.n	8005264 <__sfputc_r+0x1c>
 8005254:	6994      	ldr	r4, [r2, #24]
 8005256:	42a3      	cmp	r3, r4
 8005258:	db01      	blt.n	800525e <__sfputc_r+0x16>
 800525a:	290a      	cmp	r1, #10
 800525c:	d102      	bne.n	8005264 <__sfputc_r+0x1c>
 800525e:	bc10      	pop	{r4}
 8005260:	f000 b934 	b.w	80054cc <__swbuf_r>
 8005264:	6813      	ldr	r3, [r2, #0]
 8005266:	1c58      	adds	r0, r3, #1
 8005268:	6010      	str	r0, [r2, #0]
 800526a:	7019      	strb	r1, [r3, #0]
 800526c:	4608      	mov	r0, r1
 800526e:	bc10      	pop	{r4}
 8005270:	4770      	bx	lr

08005272 <__sfputs_r>:
 8005272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005274:	4606      	mov	r6, r0
 8005276:	460f      	mov	r7, r1
 8005278:	4614      	mov	r4, r2
 800527a:	18d5      	adds	r5, r2, r3
 800527c:	42ac      	cmp	r4, r5
 800527e:	d101      	bne.n	8005284 <__sfputs_r+0x12>
 8005280:	2000      	movs	r0, #0
 8005282:	e007      	b.n	8005294 <__sfputs_r+0x22>
 8005284:	463a      	mov	r2, r7
 8005286:	4630      	mov	r0, r6
 8005288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800528c:	f7ff ffdc 	bl	8005248 <__sfputc_r>
 8005290:	1c43      	adds	r3, r0, #1
 8005292:	d1f3      	bne.n	800527c <__sfputs_r+0xa>
 8005294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005298 <_vfiprintf_r>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	460d      	mov	r5, r1
 800529e:	4614      	mov	r4, r2
 80052a0:	4698      	mov	r8, r3
 80052a2:	4606      	mov	r6, r0
 80052a4:	b09d      	sub	sp, #116	; 0x74
 80052a6:	b118      	cbz	r0, 80052b0 <_vfiprintf_r+0x18>
 80052a8:	6a03      	ldr	r3, [r0, #32]
 80052aa:	b90b      	cbnz	r3, 80052b0 <_vfiprintf_r+0x18>
 80052ac:	f7ff f8e8 	bl	8004480 <__sinit>
 80052b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052b2:	07d9      	lsls	r1, r3, #31
 80052b4:	d405      	bmi.n	80052c2 <_vfiprintf_r+0x2a>
 80052b6:	89ab      	ldrh	r3, [r5, #12]
 80052b8:	059a      	lsls	r2, r3, #22
 80052ba:	d402      	bmi.n	80052c2 <_vfiprintf_r+0x2a>
 80052bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052be:	f7ff fa83 	bl	80047c8 <__retarget_lock_acquire_recursive>
 80052c2:	89ab      	ldrh	r3, [r5, #12]
 80052c4:	071b      	lsls	r3, r3, #28
 80052c6:	d501      	bpl.n	80052cc <_vfiprintf_r+0x34>
 80052c8:	692b      	ldr	r3, [r5, #16]
 80052ca:	b99b      	cbnz	r3, 80052f4 <_vfiprintf_r+0x5c>
 80052cc:	4629      	mov	r1, r5
 80052ce:	4630      	mov	r0, r6
 80052d0:	f000 f93a 	bl	8005548 <__swsetup_r>
 80052d4:	b170      	cbz	r0, 80052f4 <_vfiprintf_r+0x5c>
 80052d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80052d8:	07dc      	lsls	r4, r3, #31
 80052da:	d504      	bpl.n	80052e6 <_vfiprintf_r+0x4e>
 80052dc:	f04f 30ff 	mov.w	r0, #4294967295
 80052e0:	b01d      	add	sp, #116	; 0x74
 80052e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e6:	89ab      	ldrh	r3, [r5, #12]
 80052e8:	0598      	lsls	r0, r3, #22
 80052ea:	d4f7      	bmi.n	80052dc <_vfiprintf_r+0x44>
 80052ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80052ee:	f7ff fa6c 	bl	80047ca <__retarget_lock_release_recursive>
 80052f2:	e7f3      	b.n	80052dc <_vfiprintf_r+0x44>
 80052f4:	2300      	movs	r3, #0
 80052f6:	9309      	str	r3, [sp, #36]	; 0x24
 80052f8:	2320      	movs	r3, #32
 80052fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80052fe:	2330      	movs	r3, #48	; 0x30
 8005300:	f04f 0901 	mov.w	r9, #1
 8005304:	f8cd 800c 	str.w	r8, [sp, #12]
 8005308:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80054b8 <_vfiprintf_r+0x220>
 800530c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005310:	4623      	mov	r3, r4
 8005312:	469a      	mov	sl, r3
 8005314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005318:	b10a      	cbz	r2, 800531e <_vfiprintf_r+0x86>
 800531a:	2a25      	cmp	r2, #37	; 0x25
 800531c:	d1f9      	bne.n	8005312 <_vfiprintf_r+0x7a>
 800531e:	ebba 0b04 	subs.w	fp, sl, r4
 8005322:	d00b      	beq.n	800533c <_vfiprintf_r+0xa4>
 8005324:	465b      	mov	r3, fp
 8005326:	4622      	mov	r2, r4
 8005328:	4629      	mov	r1, r5
 800532a:	4630      	mov	r0, r6
 800532c:	f7ff ffa1 	bl	8005272 <__sfputs_r>
 8005330:	3001      	adds	r0, #1
 8005332:	f000 80a9 	beq.w	8005488 <_vfiprintf_r+0x1f0>
 8005336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005338:	445a      	add	r2, fp
 800533a:	9209      	str	r2, [sp, #36]	; 0x24
 800533c:	f89a 3000 	ldrb.w	r3, [sl]
 8005340:	2b00      	cmp	r3, #0
 8005342:	f000 80a1 	beq.w	8005488 <_vfiprintf_r+0x1f0>
 8005346:	2300      	movs	r3, #0
 8005348:	f04f 32ff 	mov.w	r2, #4294967295
 800534c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005350:	f10a 0a01 	add.w	sl, sl, #1
 8005354:	9304      	str	r3, [sp, #16]
 8005356:	9307      	str	r3, [sp, #28]
 8005358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800535c:	931a      	str	r3, [sp, #104]	; 0x68
 800535e:	4654      	mov	r4, sl
 8005360:	2205      	movs	r2, #5
 8005362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005366:	4854      	ldr	r0, [pc, #336]	; (80054b8 <_vfiprintf_r+0x220>)
 8005368:	f7ff ff1c 	bl	80051a4 <memchr>
 800536c:	9a04      	ldr	r2, [sp, #16]
 800536e:	b9d8      	cbnz	r0, 80053a8 <_vfiprintf_r+0x110>
 8005370:	06d1      	lsls	r1, r2, #27
 8005372:	bf44      	itt	mi
 8005374:	2320      	movmi	r3, #32
 8005376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800537a:	0713      	lsls	r3, r2, #28
 800537c:	bf44      	itt	mi
 800537e:	232b      	movmi	r3, #43	; 0x2b
 8005380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005384:	f89a 3000 	ldrb.w	r3, [sl]
 8005388:	2b2a      	cmp	r3, #42	; 0x2a
 800538a:	d015      	beq.n	80053b8 <_vfiprintf_r+0x120>
 800538c:	4654      	mov	r4, sl
 800538e:	2000      	movs	r0, #0
 8005390:	f04f 0c0a 	mov.w	ip, #10
 8005394:	9a07      	ldr	r2, [sp, #28]
 8005396:	4621      	mov	r1, r4
 8005398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800539c:	3b30      	subs	r3, #48	; 0x30
 800539e:	2b09      	cmp	r3, #9
 80053a0:	d94d      	bls.n	800543e <_vfiprintf_r+0x1a6>
 80053a2:	b1b0      	cbz	r0, 80053d2 <_vfiprintf_r+0x13a>
 80053a4:	9207      	str	r2, [sp, #28]
 80053a6:	e014      	b.n	80053d2 <_vfiprintf_r+0x13a>
 80053a8:	eba0 0308 	sub.w	r3, r0, r8
 80053ac:	fa09 f303 	lsl.w	r3, r9, r3
 80053b0:	4313      	orrs	r3, r2
 80053b2:	46a2      	mov	sl, r4
 80053b4:	9304      	str	r3, [sp, #16]
 80053b6:	e7d2      	b.n	800535e <_vfiprintf_r+0xc6>
 80053b8:	9b03      	ldr	r3, [sp, #12]
 80053ba:	1d19      	adds	r1, r3, #4
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	9103      	str	r1, [sp, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	bfbb      	ittet	lt
 80053c4:	425b      	neglt	r3, r3
 80053c6:	f042 0202 	orrlt.w	r2, r2, #2
 80053ca:	9307      	strge	r3, [sp, #28]
 80053cc:	9307      	strlt	r3, [sp, #28]
 80053ce:	bfb8      	it	lt
 80053d0:	9204      	strlt	r2, [sp, #16]
 80053d2:	7823      	ldrb	r3, [r4, #0]
 80053d4:	2b2e      	cmp	r3, #46	; 0x2e
 80053d6:	d10c      	bne.n	80053f2 <_vfiprintf_r+0x15a>
 80053d8:	7863      	ldrb	r3, [r4, #1]
 80053da:	2b2a      	cmp	r3, #42	; 0x2a
 80053dc:	d134      	bne.n	8005448 <_vfiprintf_r+0x1b0>
 80053de:	9b03      	ldr	r3, [sp, #12]
 80053e0:	3402      	adds	r4, #2
 80053e2:	1d1a      	adds	r2, r3, #4
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	9203      	str	r2, [sp, #12]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bfb8      	it	lt
 80053ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80053f0:	9305      	str	r3, [sp, #20]
 80053f2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80054bc <_vfiprintf_r+0x224>
 80053f6:	2203      	movs	r2, #3
 80053f8:	4650      	mov	r0, sl
 80053fa:	7821      	ldrb	r1, [r4, #0]
 80053fc:	f7ff fed2 	bl	80051a4 <memchr>
 8005400:	b138      	cbz	r0, 8005412 <_vfiprintf_r+0x17a>
 8005402:	2240      	movs	r2, #64	; 0x40
 8005404:	9b04      	ldr	r3, [sp, #16]
 8005406:	eba0 000a 	sub.w	r0, r0, sl
 800540a:	4082      	lsls	r2, r0
 800540c:	4313      	orrs	r3, r2
 800540e:	3401      	adds	r4, #1
 8005410:	9304      	str	r3, [sp, #16]
 8005412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005416:	2206      	movs	r2, #6
 8005418:	4829      	ldr	r0, [pc, #164]	; (80054c0 <_vfiprintf_r+0x228>)
 800541a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800541e:	f7ff fec1 	bl	80051a4 <memchr>
 8005422:	2800      	cmp	r0, #0
 8005424:	d03f      	beq.n	80054a6 <_vfiprintf_r+0x20e>
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <_vfiprintf_r+0x22c>)
 8005428:	bb1b      	cbnz	r3, 8005472 <_vfiprintf_r+0x1da>
 800542a:	9b03      	ldr	r3, [sp, #12]
 800542c:	3307      	adds	r3, #7
 800542e:	f023 0307 	bic.w	r3, r3, #7
 8005432:	3308      	adds	r3, #8
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005438:	443b      	add	r3, r7
 800543a:	9309      	str	r3, [sp, #36]	; 0x24
 800543c:	e768      	b.n	8005310 <_vfiprintf_r+0x78>
 800543e:	460c      	mov	r4, r1
 8005440:	2001      	movs	r0, #1
 8005442:	fb0c 3202 	mla	r2, ip, r2, r3
 8005446:	e7a6      	b.n	8005396 <_vfiprintf_r+0xfe>
 8005448:	2300      	movs	r3, #0
 800544a:	f04f 0c0a 	mov.w	ip, #10
 800544e:	4619      	mov	r1, r3
 8005450:	3401      	adds	r4, #1
 8005452:	9305      	str	r3, [sp, #20]
 8005454:	4620      	mov	r0, r4
 8005456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800545a:	3a30      	subs	r2, #48	; 0x30
 800545c:	2a09      	cmp	r2, #9
 800545e:	d903      	bls.n	8005468 <_vfiprintf_r+0x1d0>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d0c6      	beq.n	80053f2 <_vfiprintf_r+0x15a>
 8005464:	9105      	str	r1, [sp, #20]
 8005466:	e7c4      	b.n	80053f2 <_vfiprintf_r+0x15a>
 8005468:	4604      	mov	r4, r0
 800546a:	2301      	movs	r3, #1
 800546c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005470:	e7f0      	b.n	8005454 <_vfiprintf_r+0x1bc>
 8005472:	ab03      	add	r3, sp, #12
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	462a      	mov	r2, r5
 8005478:	4630      	mov	r0, r6
 800547a:	4b13      	ldr	r3, [pc, #76]	; (80054c8 <_vfiprintf_r+0x230>)
 800547c:	a904      	add	r1, sp, #16
 800547e:	f3af 8000 	nop.w
 8005482:	4607      	mov	r7, r0
 8005484:	1c78      	adds	r0, r7, #1
 8005486:	d1d6      	bne.n	8005436 <_vfiprintf_r+0x19e>
 8005488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800548a:	07d9      	lsls	r1, r3, #31
 800548c:	d405      	bmi.n	800549a <_vfiprintf_r+0x202>
 800548e:	89ab      	ldrh	r3, [r5, #12]
 8005490:	059a      	lsls	r2, r3, #22
 8005492:	d402      	bmi.n	800549a <_vfiprintf_r+0x202>
 8005494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005496:	f7ff f998 	bl	80047ca <__retarget_lock_release_recursive>
 800549a:	89ab      	ldrh	r3, [r5, #12]
 800549c:	065b      	lsls	r3, r3, #25
 800549e:	f53f af1d 	bmi.w	80052dc <_vfiprintf_r+0x44>
 80054a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80054a4:	e71c      	b.n	80052e0 <_vfiprintf_r+0x48>
 80054a6:	ab03      	add	r3, sp, #12
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	462a      	mov	r2, r5
 80054ac:	4630      	mov	r0, r6
 80054ae:	4b06      	ldr	r3, [pc, #24]	; (80054c8 <_vfiprintf_r+0x230>)
 80054b0:	a904      	add	r1, sp, #16
 80054b2:	f7ff fc6f 	bl	8004d94 <_printf_i>
 80054b6:	e7e4      	b.n	8005482 <_vfiprintf_r+0x1ea>
 80054b8:	08006024 	.word	0x08006024
 80054bc:	0800602a 	.word	0x0800602a
 80054c0:	0800602e 	.word	0x0800602e
 80054c4:	00000000 	.word	0x00000000
 80054c8:	08005273 	.word	0x08005273

080054cc <__swbuf_r>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	460e      	mov	r6, r1
 80054d0:	4614      	mov	r4, r2
 80054d2:	4605      	mov	r5, r0
 80054d4:	b118      	cbz	r0, 80054de <__swbuf_r+0x12>
 80054d6:	6a03      	ldr	r3, [r0, #32]
 80054d8:	b90b      	cbnz	r3, 80054de <__swbuf_r+0x12>
 80054da:	f7fe ffd1 	bl	8004480 <__sinit>
 80054de:	69a3      	ldr	r3, [r4, #24]
 80054e0:	60a3      	str	r3, [r4, #8]
 80054e2:	89a3      	ldrh	r3, [r4, #12]
 80054e4:	071a      	lsls	r2, r3, #28
 80054e6:	d525      	bpl.n	8005534 <__swbuf_r+0x68>
 80054e8:	6923      	ldr	r3, [r4, #16]
 80054ea:	b31b      	cbz	r3, 8005534 <__swbuf_r+0x68>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	6922      	ldr	r2, [r4, #16]
 80054f0:	b2f6      	uxtb	r6, r6
 80054f2:	1a98      	subs	r0, r3, r2
 80054f4:	6963      	ldr	r3, [r4, #20]
 80054f6:	4637      	mov	r7, r6
 80054f8:	4283      	cmp	r3, r0
 80054fa:	dc04      	bgt.n	8005506 <__swbuf_r+0x3a>
 80054fc:	4621      	mov	r1, r4
 80054fe:	4628      	mov	r0, r5
 8005500:	f7ff fdec 	bl	80050dc <_fflush_r>
 8005504:	b9e0      	cbnz	r0, 8005540 <__swbuf_r+0x74>
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	3b01      	subs	r3, #1
 800550a:	60a3      	str	r3, [r4, #8]
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	1c5a      	adds	r2, r3, #1
 8005510:	6022      	str	r2, [r4, #0]
 8005512:	701e      	strb	r6, [r3, #0]
 8005514:	6962      	ldr	r2, [r4, #20]
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	429a      	cmp	r2, r3
 800551a:	d004      	beq.n	8005526 <__swbuf_r+0x5a>
 800551c:	89a3      	ldrh	r3, [r4, #12]
 800551e:	07db      	lsls	r3, r3, #31
 8005520:	d506      	bpl.n	8005530 <__swbuf_r+0x64>
 8005522:	2e0a      	cmp	r6, #10
 8005524:	d104      	bne.n	8005530 <__swbuf_r+0x64>
 8005526:	4621      	mov	r1, r4
 8005528:	4628      	mov	r0, r5
 800552a:	f7ff fdd7 	bl	80050dc <_fflush_r>
 800552e:	b938      	cbnz	r0, 8005540 <__swbuf_r+0x74>
 8005530:	4638      	mov	r0, r7
 8005532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005534:	4621      	mov	r1, r4
 8005536:	4628      	mov	r0, r5
 8005538:	f000 f806 	bl	8005548 <__swsetup_r>
 800553c:	2800      	cmp	r0, #0
 800553e:	d0d5      	beq.n	80054ec <__swbuf_r+0x20>
 8005540:	f04f 37ff 	mov.w	r7, #4294967295
 8005544:	e7f4      	b.n	8005530 <__swbuf_r+0x64>
	...

08005548 <__swsetup_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4b2a      	ldr	r3, [pc, #168]	; (80055f4 <__swsetup_r+0xac>)
 800554c:	4605      	mov	r5, r0
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	460c      	mov	r4, r1
 8005552:	b118      	cbz	r0, 800555c <__swsetup_r+0x14>
 8005554:	6a03      	ldr	r3, [r0, #32]
 8005556:	b90b      	cbnz	r3, 800555c <__swsetup_r+0x14>
 8005558:	f7fe ff92 	bl	8004480 <__sinit>
 800555c:	89a3      	ldrh	r3, [r4, #12]
 800555e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005562:	0718      	lsls	r0, r3, #28
 8005564:	d422      	bmi.n	80055ac <__swsetup_r+0x64>
 8005566:	06d9      	lsls	r1, r3, #27
 8005568:	d407      	bmi.n	800557a <__swsetup_r+0x32>
 800556a:	2309      	movs	r3, #9
 800556c:	602b      	str	r3, [r5, #0]
 800556e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005572:	f04f 30ff 	mov.w	r0, #4294967295
 8005576:	81a3      	strh	r3, [r4, #12]
 8005578:	e034      	b.n	80055e4 <__swsetup_r+0x9c>
 800557a:	0758      	lsls	r0, r3, #29
 800557c:	d512      	bpl.n	80055a4 <__swsetup_r+0x5c>
 800557e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005580:	b141      	cbz	r1, 8005594 <__swsetup_r+0x4c>
 8005582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005586:	4299      	cmp	r1, r3
 8005588:	d002      	beq.n	8005590 <__swsetup_r+0x48>
 800558a:	4628      	mov	r0, r5
 800558c:	f7ff f93c 	bl	8004808 <_free_r>
 8005590:	2300      	movs	r3, #0
 8005592:	6363      	str	r3, [r4, #52]	; 0x34
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	2300      	movs	r3, #0
 800559e:	6063      	str	r3, [r4, #4]
 80055a0:	6923      	ldr	r3, [r4, #16]
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	89a3      	ldrh	r3, [r4, #12]
 80055a6:	f043 0308 	orr.w	r3, r3, #8
 80055aa:	81a3      	strh	r3, [r4, #12]
 80055ac:	6923      	ldr	r3, [r4, #16]
 80055ae:	b94b      	cbnz	r3, 80055c4 <__swsetup_r+0x7c>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80055b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80055ba:	d003      	beq.n	80055c4 <__swsetup_r+0x7c>
 80055bc:	4621      	mov	r1, r4
 80055be:	4628      	mov	r0, r5
 80055c0:	f000 f88b 	bl	80056da <__smakebuf_r>
 80055c4:	89a0      	ldrh	r0, [r4, #12]
 80055c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80055ca:	f010 0301 	ands.w	r3, r0, #1
 80055ce:	d00a      	beq.n	80055e6 <__swsetup_r+0x9e>
 80055d0:	2300      	movs	r3, #0
 80055d2:	60a3      	str	r3, [r4, #8]
 80055d4:	6963      	ldr	r3, [r4, #20]
 80055d6:	425b      	negs	r3, r3
 80055d8:	61a3      	str	r3, [r4, #24]
 80055da:	6923      	ldr	r3, [r4, #16]
 80055dc:	b943      	cbnz	r3, 80055f0 <__swsetup_r+0xa8>
 80055de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055e2:	d1c4      	bne.n	800556e <__swsetup_r+0x26>
 80055e4:	bd38      	pop	{r3, r4, r5, pc}
 80055e6:	0781      	lsls	r1, r0, #30
 80055e8:	bf58      	it	pl
 80055ea:	6963      	ldrpl	r3, [r4, #20]
 80055ec:	60a3      	str	r3, [r4, #8]
 80055ee:	e7f4      	b.n	80055da <__swsetup_r+0x92>
 80055f0:	2000      	movs	r0, #0
 80055f2:	e7f7      	b.n	80055e4 <__swsetup_r+0x9c>
 80055f4:	20000068 	.word	0x20000068

080055f8 <_raise_r>:
 80055f8:	291f      	cmp	r1, #31
 80055fa:	b538      	push	{r3, r4, r5, lr}
 80055fc:	4604      	mov	r4, r0
 80055fe:	460d      	mov	r5, r1
 8005600:	d904      	bls.n	800560c <_raise_r+0x14>
 8005602:	2316      	movs	r3, #22
 8005604:	6003      	str	r3, [r0, #0]
 8005606:	f04f 30ff 	mov.w	r0, #4294967295
 800560a:	bd38      	pop	{r3, r4, r5, pc}
 800560c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800560e:	b112      	cbz	r2, 8005616 <_raise_r+0x1e>
 8005610:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005614:	b94b      	cbnz	r3, 800562a <_raise_r+0x32>
 8005616:	4620      	mov	r0, r4
 8005618:	f000 f830 	bl	800567c <_getpid_r>
 800561c:	462a      	mov	r2, r5
 800561e:	4601      	mov	r1, r0
 8005620:	4620      	mov	r0, r4
 8005622:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005626:	f000 b817 	b.w	8005658 <_kill_r>
 800562a:	2b01      	cmp	r3, #1
 800562c:	d00a      	beq.n	8005644 <_raise_r+0x4c>
 800562e:	1c59      	adds	r1, r3, #1
 8005630:	d103      	bne.n	800563a <_raise_r+0x42>
 8005632:	2316      	movs	r3, #22
 8005634:	6003      	str	r3, [r0, #0]
 8005636:	2001      	movs	r0, #1
 8005638:	e7e7      	b.n	800560a <_raise_r+0x12>
 800563a:	2400      	movs	r4, #0
 800563c:	4628      	mov	r0, r5
 800563e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005642:	4798      	blx	r3
 8005644:	2000      	movs	r0, #0
 8005646:	e7e0      	b.n	800560a <_raise_r+0x12>

08005648 <raise>:
 8005648:	4b02      	ldr	r3, [pc, #8]	; (8005654 <raise+0xc>)
 800564a:	4601      	mov	r1, r0
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	f7ff bfd3 	b.w	80055f8 <_raise_r>
 8005652:	bf00      	nop
 8005654:	20000068 	.word	0x20000068

08005658 <_kill_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	2300      	movs	r3, #0
 800565c:	4d06      	ldr	r5, [pc, #24]	; (8005678 <_kill_r+0x20>)
 800565e:	4604      	mov	r4, r0
 8005660:	4608      	mov	r0, r1
 8005662:	4611      	mov	r1, r2
 8005664:	602b      	str	r3, [r5, #0]
 8005666:	f7fc fb7a 	bl	8001d5e <_kill>
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d102      	bne.n	8005674 <_kill_r+0x1c>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	b103      	cbz	r3, 8005674 <_kill_r+0x1c>
 8005672:	6023      	str	r3, [r4, #0]
 8005674:	bd38      	pop	{r3, r4, r5, pc}
 8005676:	bf00      	nop
 8005678:	200005a4 	.word	0x200005a4

0800567c <_getpid_r>:
 800567c:	f7fc bb68 	b.w	8001d50 <_getpid>

08005680 <_malloc_usable_size_r>:
 8005680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005684:	1f18      	subs	r0, r3, #4
 8005686:	2b00      	cmp	r3, #0
 8005688:	bfbc      	itt	lt
 800568a:	580b      	ldrlt	r3, [r1, r0]
 800568c:	18c0      	addlt	r0, r0, r3
 800568e:	4770      	bx	lr

08005690 <__swhatbuf_r>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	460c      	mov	r4, r1
 8005694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005698:	4615      	mov	r5, r2
 800569a:	2900      	cmp	r1, #0
 800569c:	461e      	mov	r6, r3
 800569e:	b096      	sub	sp, #88	; 0x58
 80056a0:	da0c      	bge.n	80056bc <__swhatbuf_r+0x2c>
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	2100      	movs	r1, #0
 80056a6:	f013 0f80 	tst.w	r3, #128	; 0x80
 80056aa:	bf0c      	ite	eq
 80056ac:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80056b0:	2340      	movne	r3, #64	; 0x40
 80056b2:	2000      	movs	r0, #0
 80056b4:	6031      	str	r1, [r6, #0]
 80056b6:	602b      	str	r3, [r5, #0]
 80056b8:	b016      	add	sp, #88	; 0x58
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	466a      	mov	r2, sp
 80056be:	f000 f849 	bl	8005754 <_fstat_r>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	dbed      	blt.n	80056a2 <__swhatbuf_r+0x12>
 80056c6:	9901      	ldr	r1, [sp, #4]
 80056c8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80056cc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80056d0:	4259      	negs	r1, r3
 80056d2:	4159      	adcs	r1, r3
 80056d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056d8:	e7eb      	b.n	80056b2 <__swhatbuf_r+0x22>

080056da <__smakebuf_r>:
 80056da:	898b      	ldrh	r3, [r1, #12]
 80056dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056de:	079d      	lsls	r5, r3, #30
 80056e0:	4606      	mov	r6, r0
 80056e2:	460c      	mov	r4, r1
 80056e4:	d507      	bpl.n	80056f6 <__smakebuf_r+0x1c>
 80056e6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056ea:	6023      	str	r3, [r4, #0]
 80056ec:	6123      	str	r3, [r4, #16]
 80056ee:	2301      	movs	r3, #1
 80056f0:	6163      	str	r3, [r4, #20]
 80056f2:	b002      	add	sp, #8
 80056f4:	bd70      	pop	{r4, r5, r6, pc}
 80056f6:	466a      	mov	r2, sp
 80056f8:	ab01      	add	r3, sp, #4
 80056fa:	f7ff ffc9 	bl	8005690 <__swhatbuf_r>
 80056fe:	9900      	ldr	r1, [sp, #0]
 8005700:	4605      	mov	r5, r0
 8005702:	4630      	mov	r0, r6
 8005704:	f7ff f8f0 	bl	80048e8 <_malloc_r>
 8005708:	b948      	cbnz	r0, 800571e <__smakebuf_r+0x44>
 800570a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800570e:	059a      	lsls	r2, r3, #22
 8005710:	d4ef      	bmi.n	80056f2 <__smakebuf_r+0x18>
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	f043 0302 	orr.w	r3, r3, #2
 800571a:	81a3      	strh	r3, [r4, #12]
 800571c:	e7e3      	b.n	80056e6 <__smakebuf_r+0xc>
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	6020      	str	r0, [r4, #0]
 8005722:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	9b00      	ldr	r3, [sp, #0]
 800572a:	6120      	str	r0, [r4, #16]
 800572c:	6163      	str	r3, [r4, #20]
 800572e:	9b01      	ldr	r3, [sp, #4]
 8005730:	b15b      	cbz	r3, 800574a <__smakebuf_r+0x70>
 8005732:	4630      	mov	r0, r6
 8005734:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005738:	f000 f81e 	bl	8005778 <_isatty_r>
 800573c:	b128      	cbz	r0, 800574a <__smakebuf_r+0x70>
 800573e:	89a3      	ldrh	r3, [r4, #12]
 8005740:	f023 0303 	bic.w	r3, r3, #3
 8005744:	f043 0301 	orr.w	r3, r3, #1
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	89a3      	ldrh	r3, [r4, #12]
 800574c:	431d      	orrs	r5, r3
 800574e:	81a5      	strh	r5, [r4, #12]
 8005750:	e7cf      	b.n	80056f2 <__smakebuf_r+0x18>
	...

08005754 <_fstat_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	2300      	movs	r3, #0
 8005758:	4d06      	ldr	r5, [pc, #24]	; (8005774 <_fstat_r+0x20>)
 800575a:	4604      	mov	r4, r0
 800575c:	4608      	mov	r0, r1
 800575e:	4611      	mov	r1, r2
 8005760:	602b      	str	r3, [r5, #0]
 8005762:	f7fc fb5a 	bl	8001e1a <_fstat>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	d102      	bne.n	8005770 <_fstat_r+0x1c>
 800576a:	682b      	ldr	r3, [r5, #0]
 800576c:	b103      	cbz	r3, 8005770 <_fstat_r+0x1c>
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	bd38      	pop	{r3, r4, r5, pc}
 8005772:	bf00      	nop
 8005774:	200005a4 	.word	0x200005a4

08005778 <_isatty_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	2300      	movs	r3, #0
 800577c:	4d05      	ldr	r5, [pc, #20]	; (8005794 <_isatty_r+0x1c>)
 800577e:	4604      	mov	r4, r0
 8005780:	4608      	mov	r0, r1
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f7fc fb58 	bl	8001e38 <_isatty>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d102      	bne.n	8005792 <_isatty_r+0x1a>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	b103      	cbz	r3, 8005792 <_isatty_r+0x1a>
 8005790:	6023      	str	r3, [r4, #0]
 8005792:	bd38      	pop	{r3, r4, r5, pc}
 8005794:	200005a4 	.word	0x200005a4

08005798 <_init>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr

080057a4 <_fini>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr
