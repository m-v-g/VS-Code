
SS_GSMD_rev2.2_09.07.2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005970  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  08005a7c  08005a7c  00015a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006324  08006324  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08006324  08006324  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006324  08006324  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006328  08006328  00016328  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800632c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  2000006c  08006398  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005b4  08006398  000205b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de14  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000255b  00000000  00000000  0002deec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e30  00000000  00000000  00030448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1f  00000000  00000000  00031278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ad6  00000000  00000000  00031d97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000105f3  00000000  00000000  0004a86d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a3ca  00000000  00000000  0005ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000046ec  00000000  00000000  000e522c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000e9918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005a64 	.word	0x08005a64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08005a64 	.word	0x08005a64

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <replac_string>:
extern UART_HandleTypeDef huart2;


///////////////////////// Функция для замены смволов \r и \n на пробелы ////////////////////////////
void replac_string(char *src)
{
 800015c:	b480      	push	{r7}
 800015e:	b083      	sub	sp, #12
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	if(!src) return;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b00      	cmp	r3, #0
 8000168:	d013      	beq.n	8000192 <replac_string+0x36>

	for(;*src; src++)
 800016a:	e00d      	b.n	8000188 <replac_string+0x2c>
	{
		if(*src == '\n' || *src == '\r') *src = ' ';
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	781b      	ldrb	r3, [r3, #0]
 8000170:	2b0a      	cmp	r3, #10
 8000172:	d003      	beq.n	800017c <replac_string+0x20>
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b0d      	cmp	r3, #13
 800017a:	d102      	bne.n	8000182 <replac_string+0x26>
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	2220      	movs	r2, #32
 8000180:	701a      	strb	r2, [r3, #0]
	for(;*src; src++)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	3301      	adds	r3, #1
 8000186:	607b      	str	r3, [r7, #4]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	781b      	ldrb	r3, [r3, #0]
 800018c:	2b00      	cmp	r3, #0
 800018e:	d1ed      	bne.n	800016c <replac_string+0x10>
 8000190:	e000      	b.n	8000194 <replac_string+0x38>
	if(!src) return;
 8000192:	bf00      	nop
	}
}
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <set_comand>:



///////////////////////// Функция для отправки настроечных команд, в цикле лучше не использовать ////////////////////////////
void set_comand(char *buff)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b0b0      	sub	sp, #192	; 0xc0
 80001a0:	af02      	add	r7, sp, #8
 80001a2:	6078      	str	r0, [r7, #4]
	uint8_t count_err = 0;
 80001a4:	2300      	movs	r3, #0
 80001a6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
	char str[SEND_STR_SIZE] = {0,};
 80001aa:	2300      	movs	r3, #0
 80001ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80001ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80001b2:	223c      	movs	r2, #60	; 0x3c
 80001b4:	2100      	movs	r1, #0
 80001b6:	4618      	mov	r0, r3
 80001b8:	f004 fb75 	bl	80048a6 <memset>
	snprintf(str, SEND_STR_SIZE, "%s\r\n", buff);
 80001bc:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	4ad4      	ldr	r2, [pc, #848]	; (8000514 <set_comand+0x378>)
 80001c4:	2140      	movs	r1, #64	; 0x40
 80001c6:	f004 faf7 	bl	80047b8 <sniprintf>
	HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 80001ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001ce:	4618      	mov	r0, r3
 80001d0:	f7ff ffbc 	bl	800014c <strlen>
 80001d4:	4603      	mov	r3, r0
 80001d6:	b29a      	uxth	r2, r3
 80001d8:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 80001dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e0:	48cd      	ldr	r0, [pc, #820]	; (8000518 <set_comand+0x37c>)
 80001e2:	f003 fbd9 	bl	8003998 <HAL_UART_Transmit>
	HAL_Delay(200);
 80001e6:	20c8      	movs	r0, #200	; 0xc8
 80001e8:	f001 ffb4 	bl	8002154 <HAL_Delay>

	memset(str, 0, SEND_STR_SIZE);
 80001ec:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80001f0:	2240      	movs	r2, #64	; 0x40
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f004 fb56 	bl	80048a6 <memset>

	for(uint8_t i = 0; i < 30; i++)
 80001fa:	2300      	movs	r3, #0
 80001fc:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 8000200:	e159      	b.n	80004b6 <set_comand+0x31a>
	{
		if(gsm_available()) //если модуль что-то прислал
 8000202:	f001 fe93 	bl	8001f2c <gsm_available>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	f000 814b 	beq.w	80004a4 <set_comand+0x308>
		{
			uint16_t i = 0;
 800020e:	2300      	movs	r3, #0
 8000210:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4

			while(gsm_available())
 8000214:	e014      	b.n	8000240 <set_comand+0xa4>
			{
				str[i++] = gsm_read();
 8000216:	f001 fea3 	bl	8001f60 <gsm_read>
 800021a:	4603      	mov	r3, r0
 800021c:	4619      	mov	r1, r3
 800021e:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	f8a7 20b4 	strh.w	r2, [r7, #180]	; 0xb4
 8000228:	b2ca      	uxtb	r2, r1
 800022a:	33b8      	adds	r3, #184	; 0xb8
 800022c:	443b      	add	r3, r7
 800022e:	f803 2c4c 	strb.w	r2, [r3, #-76]
				if(i > SEND_STR_SIZE - 1) break;
 8000232:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8000236:	2b3f      	cmp	r3, #63	; 0x3f
 8000238:	d808      	bhi.n	800024c <set_comand+0xb0>
				HAL_Delay(1);
 800023a:	2001      	movs	r0, #1
 800023c:	f001 ff8a 	bl	8002154 <HAL_Delay>
			while(gsm_available())
 8000240:	f001 fe74 	bl	8001f2c <gsm_available>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1e5      	bne.n	8000216 <set_comand+0x7a>
 800024a:	e000      	b.n	800024e <set_comand+0xb2>
				if(i > SEND_STR_SIZE - 1) break;
 800024c:	bf00      	nop
			}

			replac_string(str);
 800024e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000252:	4618      	mov	r0, r3
 8000254:	f7ff ff82 	bl	800015c <replac_string>

			char *p = NULL;
 8000258:	2300      	movs	r3, #0
 800025a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			if((p = strstr(str, "+CPAS:")) != NULL)
 800025e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000262:	49ae      	ldr	r1, [pc, #696]	; (800051c <set_comand+0x380>)
 8000264:	4618      	mov	r0, r3
 8000266:	f004 fb8f 	bl	8004988 <strstr>
 800026a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800026e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d031      	beq.n	80002da <set_comand+0x13e>
			{
				if(strstr(str, "0") == NULL)
 8000276:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800027a:	2130      	movs	r1, #48	; 0x30
 800027c:	4618      	mov	r0, r3
 800027e:	f004 fb1a 	bl	80048b6 <strchr>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	f040 80e8 	bne.w	800045a <set_comand+0x2be>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 800028a:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800028e:	f7ff ff5d 	bl	800014c <strlen>
 8000292:	4603      	mov	r3, r0
 8000294:	b29a      	uxth	r2, r3
 8000296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800029a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800029e:	48a0      	ldr	r0, [pc, #640]	; (8000520 <set_comand+0x384>)
 80002a0:	f003 fb7a 	bl	8003998 <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CPAS not ready, must be '0'\n", strlen("\n+CPAS not ready, must be '0'\n"), 1000);
 80002a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002a8:	221e      	movs	r2, #30
 80002aa:	499e      	ldr	r1, [pc, #632]	; (8000524 <set_comand+0x388>)
 80002ac:	489c      	ldr	r0, [pc, #624]	; (8000520 <set_comand+0x384>)
 80002ae:	f003 fb73 	bl	8003998 <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
 80002b2:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80002b6:	3301      	adds	r3, #1
 80002b8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
						HAL_GPIO_TogglePin(ERR_LED_GPIO_Port, ERR_LED_Pin);
 80002bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002c0:	4899      	ldr	r0, [pc, #612]	; (8000528 <set_comand+0x38c>)
 80002c2:	f002 fad9 	bl	8002878 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 80002c6:	2064      	movs	r0, #100	; 0x64
 80002c8:	f001 ff44 	bl	8002154 <HAL_Delay>
						if(count_err > 49) HAL_NVIC_SystemReset();
 80002cc:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80002d0:	2b31      	cmp	r3, #49	; 0x31
 80002d2:	d9ee      	bls.n	80002b2 <set_comand+0x116>
 80002d4:	f002 f879 	bl	80023ca <HAL_NVIC_SystemReset>
						count_err++;
 80002d8:	e7eb      	b.n	80002b2 <set_comand+0x116>
					}
				}
			}
			else if((p = strstr(str, "+CREG:")) != NULL)
 80002da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002de:	4993      	ldr	r1, [pc, #588]	; (800052c <set_comand+0x390>)
 80002e0:	4618      	mov	r0, r3
 80002e2:	f004 fb51 	bl	8004988 <strstr>
 80002e6:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80002ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d031      	beq.n	8000356 <set_comand+0x1ba>
			{
				if(strstr(str, "0,1") == NULL)
 80002f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80002f6:	498e      	ldr	r1, [pc, #568]	; (8000530 <set_comand+0x394>)
 80002f8:	4618      	mov	r0, r3
 80002fa:	f004 fb45 	bl	8004988 <strstr>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	f040 80aa 	bne.w	800045a <set_comand+0x2be>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)p, strlen(p), 1000);
 8000306:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800030a:	f7ff ff1f 	bl	800014c <strlen>
 800030e:	4603      	mov	r3, r0
 8000310:	b29a      	uxth	r2, r3
 8000312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000316:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800031a:	4881      	ldr	r0, [pc, #516]	; (8000520 <set_comand+0x384>)
 800031c:	f003 fb3c 	bl	8003998 <HAL_UART_Transmit>
					HAL_UART_Transmit(DEBUG, (uint8_t*)"\n+CREG not ready, must be '0,1'\n", strlen("\n+CREG not ready, must be '0,1'\n"), 1000);
 8000320:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000324:	2220      	movs	r2, #32
 8000326:	4983      	ldr	r1, [pc, #524]	; (8000534 <set_comand+0x398>)
 8000328:	487d      	ldr	r0, [pc, #500]	; (8000520 <set_comand+0x384>)
 800032a:	f003 fb35 	bl	8003998 <HAL_UART_Transmit>

					while(1) // мигаем 5 секунд и ресетим плату
					{
						count_err++;
 800032e:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000332:	3301      	adds	r3, #1
 8000334:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
						HAL_GPIO_TogglePin(ERR_LED_GPIO_Port, ERR_LED_Pin);
 8000338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800033c:	487a      	ldr	r0, [pc, #488]	; (8000528 <set_comand+0x38c>)
 800033e:	f002 fa9b 	bl	8002878 <HAL_GPIO_TogglePin>
						HAL_Delay(100);
 8000342:	2064      	movs	r0, #100	; 0x64
 8000344:	f001 ff06 	bl	8002154 <HAL_Delay>
						if(count_err > 49) HAL_NVIC_SystemReset();
 8000348:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800034c:	2b31      	cmp	r3, #49	; 0x31
 800034e:	d9ee      	bls.n	800032e <set_comand+0x192>
 8000350:	f002 f83b 	bl	80023ca <HAL_NVIC_SystemReset>
						count_err++;
 8000354:	e7eb      	b.n	800032e <set_comand+0x192>
					}
				}
			}

			else if((p = strstr(str, "+CSQ:")) != NULL) //esli stroka str soderjit stroku +CSQ:
 8000356:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800035a:	4977      	ldr	r1, [pc, #476]	; (8000538 <set_comand+0x39c>)
 800035c:	4618      	mov	r0, r3
 800035e:	f004 fb13 	bl	8004988 <strstr>
 8000362:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 8000366:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d02c      	beq.n	80003c8 <set_comand+0x22c>
			{
				p = strtok( str, "+CSQ: " ); //otkusivaem iz stroki str stroku +CSQ: i vozvrashaem ukozatel p
 800036e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000372:	4972      	ldr	r1, [pc, #456]	; (800053c <set_comand+0x3a0>)
 8000374:	4618      	mov	r0, r3
 8000376:	f004 faab 	bl	80048d0 <strtok>
 800037a:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				//uint8_t csq = strtod(str, NULL); // FUNKCIYA 13KB!!!!!!!!!!!!!!!
				uint8_t csq = atoi(p); //preobrazuem stroku v chislo
 800037e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000382:	f004 f8dd 	bl	8004540 <atoi>
 8000386:	4603      	mov	r3, r0
 8000388:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
				uint8_t db = (115 - (csq*2)); //sozdaem peremennuyu db i perevodim chislo v dBi
 800038c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	b2db      	uxtb	r3, r3
 8000394:	f1c3 0373 	rsb	r3, r3, #115	; 0x73
 8000398:	f887 30ae 	strb.w	r3, [r7, #174]	; 0xae
				snprintf(dbi, 7, "-%udBi", db); //pishem v masiv soobshenie
 800039c:	f897 30ae 	ldrb.w	r3, [r7, #174]	; 0xae
 80003a0:	4a67      	ldr	r2, [pc, #412]	; (8000540 <set_comand+0x3a4>)
 80003a2:	2107      	movs	r1, #7
 80003a4:	4867      	ldr	r0, [pc, #412]	; (8000544 <set_comand+0x3a8>)
 80003a6:	f004 fa07 	bl	80047b8 <sniprintf>
				uint8_t si = csq*3; //sozdaem peremennuyu si i perevodim chislo v procenti
 80003aa:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 80003ae:	461a      	mov	r2, r3
 80003b0:	0052      	lsls	r2, r2, #1
 80003b2:	4413      	add	r3, r2
 80003b4:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
				snprintf(sig, 4, "%u", si); //pishem v masiv soobshenie
 80003b8:	f897 30ad 	ldrb.w	r3, [r7, #173]	; 0xad
 80003bc:	4a62      	ldr	r2, [pc, #392]	; (8000548 <set_comand+0x3ac>)
 80003be:	2104      	movs	r1, #4
 80003c0:	4862      	ldr	r0, [pc, #392]	; (800054c <set_comand+0x3b0>)
 80003c2:	f004 f9f9 	bl	80047b8 <sniprintf>
 80003c6:	e048      	b.n	800045a <set_comand+0x2be>
			}

			else if((p = strstr(str, "+CSPN:")) != NULL) //esli stroka str soderjit stroku +CSPN:
 80003c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003cc:	4960      	ldr	r1, [pc, #384]	; (8000550 <set_comand+0x3b4>)
 80003ce:	4618      	mov	r0, r3
 80003d0:	f004 fada 	bl	8004988 <strstr>
 80003d4:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80003d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d015      	beq.n	800040c <set_comand+0x270>
			{
				p = strtok( str, " " ); // begin tokenizing sentence
 80003e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003e4:	495b      	ldr	r1, [pc, #364]	; (8000554 <set_comand+0x3b8>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f004 fa72 	bl	80048d0 <strtok>
 80003ec:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				p = strtok( NULL, ":" ); // get next token
 80003f0:	4959      	ldr	r1, [pc, #356]	; (8000558 <set_comand+0x3bc>)
 80003f2:	2000      	movs	r0, #0
 80003f4:	f004 fa6c 	bl	80048d0 <strtok>
 80003f8:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				//p = strtok( NULL, "\"" ); // get next token
				snprintf(operator, 14, "%s", p); //pishem v masiv soobshenie
 80003fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000400:	4a56      	ldr	r2, [pc, #344]	; (800055c <set_comand+0x3c0>)
 8000402:	210e      	movs	r1, #14
 8000404:	4856      	ldr	r0, [pc, #344]	; (8000560 <set_comand+0x3c4>)
 8000406:	f004 f9d7 	bl	80047b8 <sniprintf>
 800040a:	e026      	b.n	800045a <set_comand+0x2be>

			}

			else if((p = strstr(str, "+CBC:")) != NULL) //esli stroka str soderjit stroku +CBC:
 800040c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000410:	4954      	ldr	r1, [pc, #336]	; (8000564 <set_comand+0x3c8>)
 8000412:	4618      	mov	r0, r3
 8000414:	f004 fab8 	bl	8004988 <strstr>
 8000418:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800041c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d01a      	beq.n	800045a <set_comand+0x2be>
			{
				p = strtok( str, " " ); //otkusivaem iz stroki str stroku   i vozvrashaem ukozatel p
 8000424:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000428:	494a      	ldr	r1, [pc, #296]	; (8000554 <set_comand+0x3b8>)
 800042a:	4618      	mov	r0, r3
 800042c:	f004 fa50 	bl	80048d0 <strtok>
 8000430:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				p = strtok( NULL, "," ); //otkusivaem iz stroki str stroku , i vozvrashaem ukozatel p
 8000434:	494c      	ldr	r1, [pc, #304]	; (8000568 <set_comand+0x3cc>)
 8000436:	2000      	movs	r0, #0
 8000438:	f004 fa4a 	bl	80048d0 <strtok>
 800043c:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				p = strtok( NULL, "," ); //otkusivaem iz stroki str stroku , i vozvrashaem ukozatel p
 8000440:	4949      	ldr	r1, [pc, #292]	; (8000568 <set_comand+0x3cc>)
 8000442:	2000      	movs	r0, #0
 8000444:	f004 fa44 	bl	80048d0 <strtok>
 8000448:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
				snprintf(bat, 4, "%s", p); //pishem v masiv soobshenie
 800044c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000450:	4a42      	ldr	r2, [pc, #264]	; (800055c <set_comand+0x3c0>)
 8000452:	2104      	movs	r1, #4
 8000454:	4845      	ldr	r0, [pc, #276]	; (800056c <set_comand+0x3d0>)
 8000456:	f004 f9af 	bl	80047b8 <sniprintf>





			p = 0; //zbrasivaem ukazatel
 800045a:	2300      	movs	r3, #0
 800045c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

			char dbg_str[SEND_STR_SIZE + 32] = {0,};
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	225c      	movs	r2, #92	; 0x5c
 800046a:	2100      	movs	r1, #0
 800046c:	4618      	mov	r0, r3
 800046e:	f004 fa1a 	bl	80048a6 <memset>
			snprintf(dbg_str, SEND_STR_SIZE + 32, "Set %s %s\n", buff, str);
 8000472:	f107 000c 	add.w	r0, r7, #12
 8000476:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800047a:	9300      	str	r3, [sp, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a3c      	ldr	r2, [pc, #240]	; (8000570 <set_comand+0x3d4>)
 8000480:	2160      	movs	r1, #96	; 0x60
 8000482:	f004 f999 	bl	80047b8 <sniprintf>
			HAL_UART_Transmit(DEBUG, (uint8_t*)dbg_str, strlen(dbg_str), 1000);
 8000486:	f107 030c 	add.w	r3, r7, #12
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff fe5e 	bl	800014c <strlen>
 8000490:	4603      	mov	r3, r0
 8000492:	b29a      	uxth	r2, r3
 8000494:	f107 010c 	add.w	r1, r7, #12
 8000498:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049c:	4820      	ldr	r0, [pc, #128]	; (8000520 <set_comand+0x384>)
 800049e:	f003 fa7b 	bl	8003998 <HAL_UART_Transmit>

			return;
 80004a2:	e033      	b.n	800050c <set_comand+0x370>
		}

		HAL_Delay(500);
 80004a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004a8:	f001 fe54 	bl	8002154 <HAL_Delay>
	for(uint8_t i = 0; i < 30; i++)
 80004ac:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80004b0:	3301      	adds	r3, #1
 80004b2:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
 80004b6:	f897 30b6 	ldrb.w	r3, [r7, #182]	; 0xb6
 80004ba:	2b1d      	cmp	r3, #29
 80004bc:	f67f aea1 	bls.w	8000202 <set_comand+0x66>

	} // END for()

	HAL_UART_Transmit(DEBUG, (uint8_t*)"Not reply ", strlen("Not reply "), 1000);
 80004c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004c4:	220a      	movs	r2, #10
 80004c6:	492b      	ldr	r1, [pc, #172]	; (8000574 <set_comand+0x3d8>)
 80004c8:	4815      	ldr	r0, [pc, #84]	; (8000520 <set_comand+0x384>)
 80004ca:	f003 fa65 	bl	8003998 <HAL_UART_Transmit>
	HAL_UART_Transmit(DEBUG, (uint8_t*)buff, strlen(buff), 1000);
 80004ce:	6878      	ldr	r0, [r7, #4]
 80004d0:	f7ff fe3c 	bl	800014c <strlen>
 80004d4:	4603      	mov	r3, r0
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004dc:	6879      	ldr	r1, [r7, #4]
 80004de:	4810      	ldr	r0, [pc, #64]	; (8000520 <set_comand+0x384>)
 80004e0:	f003 fa5a 	bl	8003998 <HAL_UART_Transmit>

	while(1) // мигаем 5 секунд и ресетим плату
	{
		count_err++;
 80004e4:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 80004e8:	3301      	adds	r3, #1
 80004ea:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
		HAL_GPIO_TogglePin(ERR_LED_GPIO_Port, ERR_LED_Pin);
 80004ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f2:	480d      	ldr	r0, [pc, #52]	; (8000528 <set_comand+0x38c>)
 80004f4:	f002 f9c0 	bl	8002878 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f001 fe2b 	bl	8002154 <HAL_Delay>
		if(count_err > 49) HAL_NVIC_SystemReset();
 80004fe:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8000502:	2b31      	cmp	r3, #49	; 0x31
 8000504:	d9ee      	bls.n	80004e4 <set_comand+0x348>
 8000506:	f001 ff60 	bl	80023ca <HAL_NVIC_SystemReset>
		count_err++;
 800050a:	e7eb      	b.n	80004e4 <set_comand+0x348>
	}

}
 800050c:	37b8      	adds	r7, #184	; 0xb8
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	08005a7c 	.word	0x08005a7c
 8000518:	200000d8 	.word	0x200000d8
 800051c:	08005a84 	.word	0x08005a84
 8000520:	20000120 	.word	0x20000120
 8000524:	08005a8c 	.word	0x08005a8c
 8000528:	40011000 	.word	0x40011000
 800052c:	08005aac 	.word	0x08005aac
 8000530:	08005ab4 	.word	0x08005ab4
 8000534:	08005ab8 	.word	0x08005ab8
 8000538:	08005adc 	.word	0x08005adc
 800053c:	08005ae4 	.word	0x08005ae4
 8000540:	08005aec 	.word	0x08005aec
 8000544:	2000016c 	.word	0x2000016c
 8000548:	08005af4 	.word	0x08005af4
 800054c:	20000188 	.word	0x20000188
 8000550:	08005af8 	.word	0x08005af8
 8000554:	08005b00 	.word	0x08005b00
 8000558:	08005b04 	.word	0x08005b04
 800055c:	08005b08 	.word	0x08005b08
 8000560:	20000174 	.word	0x20000174
 8000564:	08005b0c 	.word	0x08005b0c
 8000568:	08005b14 	.word	0x08005b14
 800056c:	20000184 	.word	0x20000184
 8000570:	08005b18 	.word	0x08005b18
 8000574:	08005b24 	.word	0x08005b24

08000578 <balance>:

/////////////////////// Функции для использования в цикле //////////////////////////
void balance(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
	char ATD[] = "ATD#100#;\r\n"; // баланс (бабло)
 800057e:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <balance+0x30>)
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	ca07      	ldmia	r2, {r0, r1, r2}
 8000584:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff fdde 	bl	800014c <strlen>
 8000590:	4603      	mov	r3, r0
 8000592:	b29a      	uxth	r2, r3
 8000594:	1d39      	adds	r1, r7, #4
 8000596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <balance+0x34>)
 800059c:	f003 f9fc 	bl	8003998 <HAL_UART_Transmit>
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	08005b30 	.word	0x08005b30
 80005ac:	200000d8 	.word	0x200000d8

080005b0 <disable_connection>:

void disable_connection(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	char ATH[] = "ATH\r\n"; // сбросить все соединения
 80005b6:	4a0b      	ldr	r2, [pc, #44]	; (80005e4 <disable_connection+0x34>)
 80005b8:	463b      	mov	r3, r7
 80005ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005be:	6018      	str	r0, [r3, #0]
 80005c0:	3304      	adds	r3, #4
 80005c2:	8019      	strh	r1, [r3, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATH, strlen(ATH), 1000);
 80005c4:	463b      	mov	r3, r7
 80005c6:	4618      	mov	r0, r3
 80005c8:	f7ff fdc0 	bl	800014c <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	4639      	mov	r1, r7
 80005d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005d6:	4804      	ldr	r0, [pc, #16]	; (80005e8 <disable_connection+0x38>)
 80005d8:	f003 f9de 	bl	8003998 <HAL_UART_Transmit>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08005b3c 	.word	0x08005b3c
 80005e8:	200000d8 	.word	0x200000d8

080005ec <call>:

void call(void)
{
 80005ec:	b5b0      	push	{r4, r5, r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
	char ATD[] = "ATD+79819555551;\r\n"; // позвонить
 80005f2:	4b0d      	ldr	r3, [pc, #52]	; (8000628 <call+0x3c>)
 80005f4:	1d3c      	adds	r4, r7, #4
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	682b      	ldr	r3, [r5, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	8022      	strh	r2, [r4, #0]
 8000602:	3402      	adds	r4, #2
 8000604:	0c1b      	lsrs	r3, r3, #16
 8000606:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fd9e 	bl	800014c <strlen>
 8000610:	4603      	mov	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	1d39      	adds	r1, r7, #4
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	4804      	ldr	r0, [pc, #16]	; (800062c <call+0x40>)
 800061c:	f003 f9bc 	bl	8003998 <HAL_UART_Transmit>
}
 8000620:	bf00      	nop
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bdb0      	pop	{r4, r5, r7, pc}
 8000628:	08005b44 	.word	0x08005b44
 800062c:	200000d8 	.word	0x200000d8

08000630 <get_date_time>:
	char ATA[] = "ATA\r\n"; // принять звонок
	HAL_UART_Transmit(GSM, (uint8_t*)ATA, strlen(ATA), 1000);
}

void get_date_time(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
	char ATCCLK[] = "AT+CCLK?\r\n"; // узнать дату/время
 8000636:	4a0c      	ldr	r2, [pc, #48]	; (8000668 <get_date_time+0x38>)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	ca07      	ldmia	r2, {r0, r1, r2}
 800063c:	c303      	stmia	r3!, {r0, r1}
 800063e:	801a      	strh	r2, [r3, #0]
 8000640:	3302      	adds	r3, #2
 8000642:	0c12      	lsrs	r2, r2, #16
 8000644:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(GSM, (uint8_t*)ATCCLK, strlen(ATCCLK), 1000);
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff fd7f 	bl	800014c <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29a      	uxth	r2, r3
 8000652:	1d39      	adds	r1, r7, #4
 8000654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <get_date_time+0x3c>)
 800065a:	f003 f99d 	bl	8003998 <HAL_UART_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	08005b60 	.word	0x08005b60
 800066c:	200000d8 	.word	0x200000d8

08000670 <get_contact>:

void get_contact(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	; 0x58
 8000674:	af00      	add	r7, sp, #0
	for (counter = 1; counter <= 9; counter++)
 8000676:	4b5c      	ldr	r3, [pc, #368]	; (80007e8 <get_contact+0x178>)
 8000678:	2201      	movs	r2, #1
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	e0ac      	b.n	80007d8 <get_contact+0x168>
	    {
	        char ATCPBR[11];
	        snprintf(ATCPBR, 11, "AT+CPBR=%u\n", counter); //pishem v masiv soobshenie
 800067e:	4b5a      	ldr	r3, [pc, #360]	; (80007e8 <get_contact+0x178>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000686:	4a59      	ldr	r2, [pc, #356]	; (80007ec <get_contact+0x17c>)
 8000688:	210b      	movs	r1, #11
 800068a:	f004 f895 	bl	80047b8 <sniprintf>
	        HAL_UART_Transmit(GSM, (uint8_t*)ATCPBR, strlen(ATCPBR), 1000);
 800068e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fd5a 	bl	800014c <strlen>
 8000698:	4603      	mov	r3, r0
 800069a:	b29a      	uxth	r2, r3
 800069c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	4852      	ldr	r0, [pc, #328]	; (80007f0 <get_contact+0x180>)
 80006a6:	f003 f977 	bl	8003998 <HAL_UART_Transmit>
	        HAL_UART_Transmit(DEBUG, (uint8_t*)ATCPBR, strlen(ATCPBR), 1000);
 80006aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006ae:	4618      	mov	r0, r3
 80006b0:	f7ff fd4c 	bl	800014c <strlen>
 80006b4:	4603      	mov	r3, r0
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80006bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c0:	484c      	ldr	r0, [pc, #304]	; (80007f4 <get_contact+0x184>)
 80006c2:	f003 f969 	bl	8003998 <HAL_UART_Transmit>
	        HAL_Delay(200);
 80006c6:	20c8      	movs	r0, #200	; 0xc8
 80006c8:	f001 fd44 	bl	8002154 <HAL_Delay>
	        char str[SEND_STR_SIZE] = {0,};
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	f107 0308 	add.w	r3, r7, #8
 80006d4:	223c      	movs	r2, #60	; 0x3c
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f004 f8e4 	bl	80048a6 <memset>

	        for(uint8_t i = 0; i < 30; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80006e4:	e06e      	b.n	80007c4 <get_contact+0x154>
	        	{
	        		if(gsm_available()) //если модуль что-то прислал
 80006e6:	f001 fc21 	bl	8001f2c <gsm_available>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d064      	beq.n	80007ba <get_contact+0x14a>
	        		{
	        			uint16_t i = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54


	        			while(gsm_available())
 80006f6:	e014      	b.n	8000722 <get_contact+0xb2>
	        			{
	        				str[i++] = gsm_read();
 80006f8:	f001 fc32 	bl	8001f60 <gsm_read>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4619      	mov	r1, r3
 8000700:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000704:	1c5a      	adds	r2, r3, #1
 8000706:	f8a7 2054 	strh.w	r2, [r7, #84]	; 0x54
 800070a:	b2ca      	uxtb	r2, r1
 800070c:	3358      	adds	r3, #88	; 0x58
 800070e:	443b      	add	r3, r7
 8000710:	f803 2c54 	strb.w	r2, [r3, #-84]
	        				if(i > SEND_STR_SIZE - 1) break;
 8000714:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000718:	2b3f      	cmp	r3, #63	; 0x3f
 800071a:	d808      	bhi.n	800072e <get_contact+0xbe>
	        				HAL_Delay(1);
 800071c:	2001      	movs	r0, #1
 800071e:	f001 fd19 	bl	8002154 <HAL_Delay>
	        			while(gsm_available())
 8000722:	f001 fc03 	bl	8001f2c <gsm_available>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d1e5      	bne.n	80006f8 <get_contact+0x88>
 800072c:	e000      	b.n	8000730 <get_contact+0xc0>
	        				if(i > SEND_STR_SIZE - 1) break;
 800072e:	bf00      	nop
	        			}

	        			replac_string(str);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd12 	bl	800015c <replac_string>

	        			char *p = NULL;
 8000738:	2300      	movs	r3, #0
 800073a:	653b      	str	r3, [r7, #80]	; 0x50

			if((p = strstr(str, "+CPBR:")) != NULL) //esli stroka str soderjit stroku +CPBR:
 800073c:	1d3b      	adds	r3, r7, #4
 800073e:	492e      	ldr	r1, [pc, #184]	; (80007f8 <get_contact+0x188>)
 8000740:	4618      	mov	r0, r3
 8000742:	f004 f921 	bl	8004988 <strstr>
 8000746:	6538      	str	r0, [r7, #80]	; 0x50
 8000748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800074a:	2b00      	cmp	r3, #0
 800074c:	d032      	beq.n	80007b4 <get_contact+0x144>
			{
				p = strtok( str, "+CPBR: ," ); //otkusivaem iz stroki str stroku +CPBR: ,  i vozvrashaem ukozatel p
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	492a      	ldr	r1, [pc, #168]	; (80007fc <get_contact+0x18c>)
 8000752:	4618      	mov	r0, r3
 8000754:	f004 f8bc 	bl	80048d0 <strtok>
 8000758:	6538      	str	r0, [r7, #80]	; 0x50
				p = strtok( NULL, "\"" ); // get next token
 800075a:	4929      	ldr	r1, [pc, #164]	; (8000800 <get_contact+0x190>)
 800075c:	2000      	movs	r0, #0
 800075e:	f004 f8b7 	bl	80048d0 <strtok>
 8000762:	6538      	str	r0, [r7, #80]	; 0x50
				num = atoi( p );
 8000764:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8000766:	f003 feeb 	bl	8004540 <atoi>
 800076a:	4603      	mov	r3, r0
 800076c:	461a      	mov	r2, r3
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <get_contact+0x194>)
 8000770:	601a      	str	r2, [r3, #0]
				numbers[counter] = num; //nomera sim karte
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <get_contact+0x178>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	4619      	mov	r1, r3
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <get_contact+0x194>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a22      	ldr	r2, [pc, #136]	; (8000808 <get_contact+0x198>)
 800077e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				snprintf(ATCPBR, 11, "0%lu\n", num); //pishem v masiv soobshenie
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <get_contact+0x194>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800078a:	4a20      	ldr	r2, [pc, #128]	; (800080c <get_contact+0x19c>)
 800078c:	210b      	movs	r1, #11
 800078e:	f004 f813 	bl	80047b8 <sniprintf>
				//snprintf(num, 10, "%s", p); //pishem v masiv soobshenie
				HAL_UART_Transmit(DEBUG, (uint8_t*)ATCPBR, strlen(ATCPBR), 1000);
 8000792:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fcd8 	bl	800014c <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	b29a      	uxth	r2, r3
 80007a0:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80007a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <get_contact+0x184>)
 80007aa:	f003 f8f5 	bl	8003998 <HAL_UART_Transmit>
			else
			{
				p = 0; //zbrasivaem ukazatelp = 0; //zbrasivaem ukazatel
				return;
			}
			p = 0; //zbrasivaem ukazatel
 80007ae:	2300      	movs	r3, #0
 80007b0:	653b      	str	r3, [r7, #80]	; 0x50
 80007b2:	e002      	b.n	80007ba <get_contact+0x14a>
				p = 0; //zbrasivaem ukazatelp = 0; //zbrasivaem ukazatel
 80007b4:	2300      	movs	r3, #0
 80007b6:	653b      	str	r3, [r7, #80]	; 0x50
 80007b8:	e013      	b.n	80007e2 <get_contact+0x172>
	        for(uint8_t i = 0; i < 30; i++)
 80007ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007be:	3301      	adds	r3, #1
 80007c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80007c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80007c8:	2b1d      	cmp	r3, #29
 80007ca:	d98c      	bls.n	80006e6 <get_contact+0x76>
	for (counter = 1; counter <= 9; counter++)
 80007cc:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <get_contact+0x178>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <get_contact+0x178>)
 80007d6:	701a      	strb	r2, [r3, #0]
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <get_contact+0x178>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b09      	cmp	r3, #9
 80007de:	f67f af4e 	bls.w	800067e <get_contact+0xe>

	        		}
	        	}

	    }
}
 80007e2:	3758      	adds	r7, #88	; 0x58
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	2000008c 	.word	0x2000008c
 80007ec:	08005b6c 	.word	0x08005b6c
 80007f0:	200000d8 	.word	0x200000d8
 80007f4:	20000120 	.word	0x20000120
 80007f8:	08005b78 	.word	0x08005b78
 80007fc:	08005b80 	.word	0x08005b80
 8000800:	08005b8c 	.word	0x08005b8c
 8000804:	20000088 	.word	0x20000088
 8000808:	2000018c 	.word	0x2000018c
 800080c:	08005b90 	.word	0x08005b90

08000810 <alarm>:

void alarm(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
	for (int z = 1; z <= 3; ++z)
 8000816:	2301      	movs	r3, #1
 8000818:	61fb      	str	r3, [r7, #28]
 800081a:	e053      	b.n	80008c4 <alarm+0xb4>
		{
		for (int g = 1; g < counter; g++)
 800081c:	2301      	movs	r3, #1
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	e047      	b.n	80008b2 <alarm+0xa2>
	    	{
				char ATD[18];
				snprintf(ATD, 18, "ATD0%lu;\n", numbers[g]); //pishem v masiv soobshenie
 8000822:	4a2c      	ldr	r2, [pc, #176]	; (80008d4 <alarm+0xc4>)
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800082a:	1d38      	adds	r0, r7, #4
 800082c:	4a2a      	ldr	r2, [pc, #168]	; (80008d8 <alarm+0xc8>)
 800082e:	2112      	movs	r1, #18
 8000830:	f003 ffc2 	bl	80047b8 <sniprintf>
				HAL_UART_Transmit(GSM, (uint8_t*)ATD, strlen(ATD), 1000);
 8000834:	1d3b      	adds	r3, r7, #4
 8000836:	4618      	mov	r0, r3
 8000838:	f7ff fc88 	bl	800014c <strlen>
 800083c:	4603      	mov	r3, r0
 800083e:	b29a      	uxth	r2, r3
 8000840:	1d39      	adds	r1, r7, #4
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	4825      	ldr	r0, [pc, #148]	; (80008dc <alarm+0xcc>)
 8000848:	f003 f8a6 	bl	8003998 <HAL_UART_Transmit>
				HAL_UART_Transmit(DEBUG, (uint8_t*)ATD, strlen(ATD), 1000);
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4618      	mov	r0, r3
 8000850:	f7ff fc7c 	bl	800014c <strlen>
 8000854:	4603      	mov	r3, r0
 8000856:	b29a      	uxth	r2, r3
 8000858:	1d39      	adds	r1, r7, #4
 800085a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800085e:	4820      	ldr	r0, [pc, #128]	; (80008e0 <alarm+0xd0>)
 8000860:	f003 f89a 	bl	8003998 <HAL_UART_Transmit>
				LCD_invertText(true);
 8000864:	2001      	movs	r0, #1
 8000866:	f001 f853 	bl	8001910 <LCD_invertText>
				snprintf(ATD, 15, "DIAL 0%lu", numbers[g]); //pishem v masiv soobshenie
 800086a:	4a1a      	ldr	r2, [pc, #104]	; (80008d4 <alarm+0xc4>)
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000872:	1d38      	adds	r0, r7, #4
 8000874:	4a1b      	ldr	r2, [pc, #108]	; (80008e4 <alarm+0xd4>)
 8000876:	210f      	movs	r1, #15
 8000878:	f003 ff9e 	bl	80047b8 <sniprintf>
				LCD_print(ATD, 0, 2);
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2202      	movs	r2, #2
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f89e 	bl	80019c4 <LCD_print>
				HAL_Delay(20000);
 8000888:	f644 6020 	movw	r0, #20000	; 0x4e20
 800088c:	f001 fc62 	bl	8002154 <HAL_Delay>
				LCD_invertText(false);
 8000890:	2000      	movs	r0, #0
 8000892:	f001 f83d 	bl	8001910 <LCD_invertText>
				LCD_print("              ", 0, 2);
 8000896:	2202      	movs	r2, #2
 8000898:	2100      	movs	r1, #0
 800089a:	4813      	ldr	r0, [pc, #76]	; (80008e8 <alarm+0xd8>)
 800089c:	f001 f892 	bl	80019c4 <LCD_print>
				disable_connection();
 80008a0:	f7ff fe86 	bl	80005b0 <disable_connection>
				HAL_Delay(500);
 80008a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008a8:	f001 fc54 	bl	8002154 <HAL_Delay>
		for (int g = 1; g < counter; g++)
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	3301      	adds	r3, #1
 80008b0:	61bb      	str	r3, [r7, #24]
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <alarm+0xdc>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	69bb      	ldr	r3, [r7, #24]
 80008ba:	4293      	cmp	r3, r2
 80008bc:	dbb1      	blt.n	8000822 <alarm+0x12>
	for (int z = 1; z <= 3; ++z)
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	3301      	adds	r3, #1
 80008c2:	61fb      	str	r3, [r7, #28]
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	dda8      	ble.n	800081c <alarm+0xc>
	    	}
		}
}
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	3720      	adds	r7, #32
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2000018c 	.word	0x2000018c
 80008d8:	08005b98 	.word	0x08005b98
 80008dc:	200000d8 	.word	0x200000d8
 80008e0:	20000120 	.word	0x20000120
 80008e4:	08005ba4 	.word	0x08005ba4
 80008e8:	08005bb0 	.word	0x08005bb0
 80008ec:	2000008c 	.word	0x2000008c

080008f0 <welcome>:
	LCD_invertText(false);
	LCD_print("              ", 0, 2);
}

void welcome(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	// в Кубе настроить 5 пинов как Output, например PA3 - PA7 (можно переименовать их в соответствии с назначением)
  // и прописать в функции ниже - ПОРТ, П�?Н. Подключать в соответствии с названиями контактов экрана.
  LCD_setRST(GPIOB, RST_Pin);
 80008f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008f8:	482d      	ldr	r0, [pc, #180]	; (80009b0 <welcome+0xc0>)
 80008fa:	f000 feeb 	bl	80016d4 <LCD_setRST>
  LCD_setCE(GPIOB, CE_Pin);
 80008fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000902:	482b      	ldr	r0, [pc, #172]	; (80009b0 <welcome+0xc0>)
 8000904:	f000 fefa 	bl	80016fc <LCD_setCE>
  LCD_setDC(GPIOB, DC_Pin);
 8000908:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090c:	4828      	ldr	r0, [pc, #160]	; (80009b0 <welcome+0xc0>)
 800090e:	f000 ff09 	bl	8001724 <LCD_setDC>
  LCD_setDIN(GPIOB, DIN_Pin);
 8000912:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000916:	4826      	ldr	r0, [pc, #152]	; (80009b0 <welcome+0xc0>)
 8000918:	f000 ff18 	bl	800174c <LCD_setDIN>
  LCD_setCLK(GPIOB, CLK_Pin);
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	4823      	ldr	r0, [pc, #140]	; (80009b0 <welcome+0xc0>)
 8000922:	f000 ff27 	bl	8001774 <LCD_setCLK>

  LCD_init();
 8000926:	f000 ffbd 	bl	80018a4 <LCD_init>

  //uint16_t i = 0;
  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);
 800092a:	2201      	movs	r2, #1
 800092c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000930:	4820      	ldr	r0, [pc, #128]	; (80009b4 <welcome+0xc4>)
 8000932:	f001 ff89 	bl	8002848 <HAL_GPIO_WritePin>
  LCD_print("LABIRINT", 18, 2);
 8000936:	2202      	movs	r2, #2
 8000938:	2112      	movs	r1, #18
 800093a:	481f      	ldr	r0, [pc, #124]	; (80009b8 <welcome+0xc8>)
 800093c:	f001 f842 	bl	80019c4 <LCD_print>
  LCD_print("ELECTRIC", 18, 3);
 8000940:	2203      	movs	r2, #3
 8000942:	2112      	movs	r1, #18
 8000944:	481d      	ldr	r0, [pc, #116]	; (80009bc <welcome+0xcc>)
 8000946:	f001 f83d 	bl	80019c4 <LCD_print>
  LCD_print("GSMD_MINI_v1.2", 0, 5);
 800094a:	2205      	movs	r2, #5
 800094c:	2100      	movs	r1, #0
 800094e:	481c      	ldr	r0, [pc, #112]	; (80009c0 <welcome+0xd0>)
 8000950:	f001 f838 	bl	80019c4 <LCD_print>
  HAL_Delay(2000);
 8000954:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000958:	f001 fbfc 	bl	8002154 <HAL_Delay>
  LCD_clrScr(); // очистить экран
 800095c:	f001 f852 	bl	8001a04 <LCD_clrScr>
  LCD_print("LABIRINT", 18, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2112      	movs	r1, #18
 8000964:	4814      	ldr	r0, [pc, #80]	; (80009b8 <welcome+0xc8>)
 8000966:	f001 f82d 	bl	80019c4 <LCD_print>
  LCD_print("ELECTRIC", 18, 1);
 800096a:	2201      	movs	r2, #1
 800096c:	2112      	movs	r1, #18
 800096e:	4813      	ldr	r0, [pc, #76]	; (80009bc <welcome+0xcc>)
 8000970:	f001 f828 	bl	80019c4 <LCD_print>
  LCD_invertText(true);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 ffcb 	bl	8001910 <LCD_invertText>
  LCD_print("   starting   ", 0, 2);
 800097a:	2202      	movs	r2, #2
 800097c:	2100      	movs	r1, #0
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <welcome+0xd4>)
 8000980:	f001 f820 	bl	80019c4 <LCD_print>
  HAL_Delay(500);
 8000984:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000988:	f001 fbe4 	bl	8002154 <HAL_Delay>
  LCD_print("   power on   ", 0, 2);
 800098c:	2202      	movs	r2, #2
 800098e:	2100      	movs	r1, #0
 8000990:	480d      	ldr	r0, [pc, #52]	; (80009c8 <welcome+0xd8>)
 8000992:	f001 f817 	bl	80019c4 <LCD_print>
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_SET);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 7180 	mov.w	r1, #256	; 0x100
 800099c:	480b      	ldr	r0, [pc, #44]	; (80009cc <welcome+0xdc>)
 800099e:	f001 ff53 	bl	8002848 <HAL_GPIO_WritePin>
  HAL_Delay(30000); // задержка чтоб модем успел раздуплиться, если его включение происходит вместе с включением МК
 80009a2:	f247 5030 	movw	r0, #30000	; 0x7530
 80009a6:	f001 fbd5 	bl	8002154 <HAL_Delay>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010c00 	.word	0x40010c00
 80009b4:	40011000 	.word	0x40011000
 80009b8:	08005c10 	.word	0x08005c10
 80009bc:	08005c1c 	.word	0x08005c1c
 80009c0:	08005c28 	.word	0x08005c28
 80009c4:	08005c38 	.word	0x08005c38
 80009c8:	08005c48 	.word	0x08005c48
 80009cc:	40010800 	.word	0x40010800

080009d0 <starting>:

void starting(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	chek_speed(); // проверка и установка скорости 19200, нужна один раз
 80009d4:	f000 f8ca 	bl	8000b6c <chek_speed>
  LCD_print(" speed  check ", 0, 2);
 80009d8:	2202      	movs	r2, #2
 80009da:	2100      	movs	r1, #0
 80009dc:	4827      	ldr	r0, [pc, #156]	; (8000a7c <starting+0xac>)
 80009de:	f000 fff1 	bl	80019c4 <LCD_print>
  HAL_Delay(500);
 80009e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e6:	f001 fbb5 	bl	8002154 <HAL_Delay>
  ////////////////// настройка модема ///////////////////
  LCD_print(" status check ", 0, 2);
 80009ea:	2202      	movs	r2, #2
 80009ec:	2100      	movs	r1, #0
 80009ee:	4824      	ldr	r0, [pc, #144]	; (8000a80 <starting+0xb0>)
 80009f0:	f000 ffe8 	bl	80019c4 <LCD_print>
  HAL_Delay(500);
 80009f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009f8:	f001 fbac 	bl	8002154 <HAL_Delay>
  set_comand(ATCPAS);  // проверка статуса модема
 80009fc:	4821      	ldr	r0, [pc, #132]	; (8000a84 <starting+0xb4>)
 80009fe:	f7ff fbcd 	bl	800019c <set_comand>
  LCD_print("registr  check", 0, 2);
 8000a02:	2202      	movs	r2, #2
 8000a04:	2100      	movs	r1, #0
 8000a06:	4820      	ldr	r0, [pc, #128]	; (8000a88 <starting+0xb8>)
 8000a08:	f000 ffdc 	bl	80019c4 <LCD_print>
  HAL_Delay(500);
 8000a0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a10:	f001 fba0 	bl	8002154 <HAL_Delay>
  set_comand(ATCREG);  // проверка регистрации в сети - должен вернуть  +CREG: 0,1
 8000a14:	481d      	ldr	r0, [pc, #116]	; (8000a8c <starting+0xbc>)
 8000a16:	f7ff fbc1 	bl	800019c <set_comand>
  LCD_print("   loading    ", 0, 2);
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	481c      	ldr	r0, [pc, #112]	; (8000a90 <starting+0xc0>)
 8000a20:	f000 ffd0 	bl	80019c4 <LCD_print>
  HAL_Delay(500);
 8000a24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a28:	f001 fb94 	bl	8002154 <HAL_Delay>
  set_comand(ATCLIP1); // включить АОН
 8000a2c:	4819      	ldr	r0, [pc, #100]	; (8000a94 <starting+0xc4>)
 8000a2e:	f7ff fbb5 	bl	800019c <set_comand>
  set_comand(ATE);     // отключить «эхо»
 8000a32:	4819      	ldr	r0, [pc, #100]	; (8000a98 <starting+0xc8>)
 8000a34:	f7ff fbb2 	bl	800019c <set_comand>
  set_comand(ATS);     // поднимать трубку только "вручную"
 8000a38:	4818      	ldr	r0, [pc, #96]	; (8000a9c <starting+0xcc>)
 8000a3a:	f7ff fbaf 	bl	800019c <set_comand>
  set_comand(ATDDET);  // включить DTMF
 8000a3e:	4818      	ldr	r0, [pc, #96]	; (8000aa0 <starting+0xd0>)
 8000a40:	f7ff fbac 	bl	800019c <set_comand>
  //set_comand(ATCCLKK); // установить дату/время

  /////////////////// настройки для работы с sms ////////////////
  set_comand(ATCMGF);    // устанавливает текстовый режим смс-сообщения
 8000a44:	4817      	ldr	r0, [pc, #92]	; (8000aa4 <starting+0xd4>)
 8000a46:	f7ff fba9 	bl	800019c <set_comand>
  set_comand(ATCPBS);    // открывает доступ к данным телефонной книги SIM-карты
 8000a4a:	4817      	ldr	r0, [pc, #92]	; (8000aa8 <starting+0xd8>)
 8000a4c:	f7ff fba6 	bl	800019c <set_comand>
  set_comand(ATCSCS);    // кодировка текста - GSM
 8000a50:	4816      	ldr	r0, [pc, #88]	; (8000aac <starting+0xdc>)
 8000a52:	f7ff fba3 	bl	800019c <set_comand>
  set_comand(ATCNMI);    // настройка вывода смс в консоль
 8000a56:	4816      	ldr	r0, [pc, #88]	; (8000ab0 <starting+0xe0>)
 8000a58:	f7ff fba0 	bl	800019c <set_comand>

  //////////////////// различная инфа /////////////////////
  set_comand(ATIPR);       // скорость usart'a модема
 8000a5c:	4815      	ldr	r0, [pc, #84]	; (8000ab4 <starting+0xe4>)
 8000a5e:	f7ff fb9d 	bl	800019c <set_comand>
  set_comand(ATI);         // название и версия модуля
 8000a62:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <starting+0xe8>)
 8000a64:	f7ff fb9a 	bl	800019c <set_comand>
  set_comand(ATCGSN);      // считывание IMEI из EEPROM
 8000a68:	4814      	ldr	r0, [pc, #80]	; (8000abc <starting+0xec>)
 8000a6a:	f7ff fb97 	bl	800019c <set_comand>
  set_comand(ATCSPN);      // оператор сети
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <starting+0xf0>)
 8000a70:	f7ff fb94 	bl	800019c <set_comand>


  get_contact();
 8000a74:	f7ff fdfc 	bl	8000670 <get_contact>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	08005c58 	.word	0x08005c58
 8000a80:	08005c68 	.word	0x08005c68
 8000a84:	08005c78 	.word	0x08005c78
 8000a88:	08005c80 	.word	0x08005c80
 8000a8c:	08005c90 	.word	0x08005c90
 8000a90:	08005c9c 	.word	0x08005c9c
 8000a94:	08005cac 	.word	0x08005cac
 8000a98:	08005cb8 	.word	0x08005cb8
 8000a9c:	08005cc0 	.word	0x08005cc0
 8000aa0:	08005cc8 	.word	0x08005cc8
 8000aa4:	08005cd4 	.word	0x08005cd4
 8000aa8:	08005ce0 	.word	0x08005ce0
 8000aac:	08005cf0 	.word	0x08005cf0
 8000ab0:	08005d00 	.word	0x08005d00
 8000ab4:	08005d14 	.word	0x08005d14
 8000ab8:	08005d1c 	.word	0x08005d1c
 8000abc:	08005d20 	.word	0x08005d20
 8000ac0:	08005d28 	.word	0x08005d28

08000ac4 <clear_string>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/////////////////// удалить символы \r и \n из строки //////////////////////
static void clear_string(char *src)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	char *dst = NULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	60fb      	str	r3, [r7, #12]
	if(!src) return;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d02f      	beq.n	8000b36 <clear_string+0x72>
	uint8_t i = 0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	72fb      	strb	r3, [r7, #11]

	for(dst = src; *src; src++)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	e022      	b.n	8000b26 <clear_string+0x62>
	{
		if(i < 2 && (*src == '\n' || *src == '\r'))
 8000ae0:	7afb      	ldrb	r3, [r7, #11]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d80b      	bhi.n	8000afe <clear_string+0x3a>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	2b0a      	cmp	r3, #10
 8000aec:	d003      	beq.n	8000af6 <clear_string+0x32>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b0d      	cmp	r3, #13
 8000af4:	d103      	bne.n	8000afe <clear_string+0x3a>
		{
			i++;
 8000af6:	7afb      	ldrb	r3, [r7, #11]
 8000af8:	3301      	adds	r3, #1
 8000afa:	72fb      	strb	r3, [r7, #11]
			continue;
 8000afc:	e010      	b.n	8000b20 <clear_string+0x5c>
		}
		else if(*src == '\n' || *src == '\r') *src = ' ';
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b0a      	cmp	r3, #10
 8000b04:	d003      	beq.n	8000b0e <clear_string+0x4a>
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	2b0d      	cmp	r3, #13
 8000b0c:	d102      	bne.n	8000b14 <clear_string+0x50>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	2220      	movs	r2, #32
 8000b12:	701a      	strb	r2, [r3, #0]

		*dst++ = *src;
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60fa      	str	r2, [r7, #12]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	7812      	ldrb	r2, [r2, #0]
 8000b1e:	701a      	strb	r2, [r3, #0]
	for(dst = src; *src; src++)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3301      	adds	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d1d8      	bne.n	8000ae0 <clear_string+0x1c>
	}

	*dst = 0;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	e000      	b.n	8000b38 <clear_string+0x74>
	if(!src) return;
 8000b36:	bf00      	nop
}
 8000b38:	3714      	adds	r7, #20
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <HAL_TIM_PeriodElapsedCallback>:

///////////////////// колбек таймера //////////////////////
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a05      	ldr	r2, [pc, #20]	; (8000b64 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d102      	bne.n	8000b58 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flag_signal = 1;
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
	}
}
 8000b58:	bf00      	nop
 8000b5a:	370c      	adds	r7, #12
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	20000169 	.word	0x20000169

08000b6c <chek_speed>:

//////////////// проверка и установка скорости 19200, нужна один раз /////////////////
void chek_speed(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b098      	sub	sp, #96	; 0x60
 8000b70:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i < 7; i++)
 8000b72:	2300      	movs	r3, #0
 8000b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000b78:	e0c6      	b.n	8000d08 <chek_speed+0x19c>
  {
	  uint32_t sp = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	65bb      	str	r3, [r7, #88]	; 0x58

	  if(i == 0) sp = 2400;
 8000b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d103      	bne.n	8000b8e <chek_speed+0x22>
 8000b86:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000b8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b8c:	e02e      	b.n	8000bec <chek_speed+0x80>
	  else if(i == 1) sp = 4800;
 8000b8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d103      	bne.n	8000b9e <chek_speed+0x32>
 8000b96:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8000b9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8000b9c:	e026      	b.n	8000bec <chek_speed+0x80>
	  else if(i == 2) sp = 9600;
 8000b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d103      	bne.n	8000bae <chek_speed+0x42>
 8000ba6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bac:	e01e      	b.n	8000bec <chek_speed+0x80>
	  else if(i == 3) sp = 19200;
 8000bae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d103      	bne.n	8000bbe <chek_speed+0x52>
 8000bb6:	f44f 4396 	mov.w	r3, #19200	; 0x4b00
 8000bba:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bbc:	e016      	b.n	8000bec <chek_speed+0x80>
	  else if(i == 4) sp = 38400;
 8000bbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bc2:	2b04      	cmp	r3, #4
 8000bc4:	d103      	bne.n	8000bce <chek_speed+0x62>
 8000bc6:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000bca:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bcc:	e00e      	b.n	8000bec <chek_speed+0x80>
	  else if(i == 5) sp = 57600;
 8000bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000bd2:	2b05      	cmp	r3, #5
 8000bd4:	d103      	bne.n	8000bde <chek_speed+0x72>
 8000bd6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8000bda:	65bb      	str	r3, [r7, #88]	; 0x58
 8000bdc:	e006      	b.n	8000bec <chek_speed+0x80>
	  else if(i == 6) sp = 115200;
 8000bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000be2:	2b06      	cmp	r3, #6
 8000be4:	d102      	bne.n	8000bec <chek_speed+0x80>
 8000be6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000bea:	65bb      	str	r3, [r7, #88]	; 0x58

	  huart1.Instance = USART1;
 8000bec:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <chek_speed+0x1b0>)
 8000bee:	4a4c      	ldr	r2, [pc, #304]	; (8000d20 <chek_speed+0x1b4>)
 8000bf0:	601a      	str	r2, [r3, #0]
	  huart1.Init.BaudRate = sp;
 8000bf2:	4a4a      	ldr	r2, [pc, #296]	; (8000d1c <chek_speed+0x1b0>)
 8000bf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000bf6:	6053      	str	r3, [r2, #4]
	  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf8:	4b48      	ldr	r3, [pc, #288]	; (8000d1c <chek_speed+0x1b0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
	  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bfe:	4b47      	ldr	r3, [pc, #284]	; (8000d1c <chek_speed+0x1b0>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
	  huart1.Init.Parity = UART_PARITY_NONE;
 8000c04:	4b45      	ldr	r3, [pc, #276]	; (8000d1c <chek_speed+0x1b0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	611a      	str	r2, [r3, #16]
	  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c0a:	4b44      	ldr	r3, [pc, #272]	; (8000d1c <chek_speed+0x1b0>)
 8000c0c:	220c      	movs	r2, #12
 8000c0e:	615a      	str	r2, [r3, #20]
	  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c10:	4b42      	ldr	r3, [pc, #264]	; (8000d1c <chek_speed+0x1b0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	619a      	str	r2, [r3, #24]
	  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c16:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <chek_speed+0x1b0>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	61da      	str	r2, [r3, #28]

	  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1c:	483f      	ldr	r0, [pc, #252]	; (8000d1c <chek_speed+0x1b0>)
 8000c1e:	f002 fe6b 	bl	80038f8 <HAL_UART_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <chek_speed+0xc0>
	  {
		  Error_Handler();
 8000c28:	f000 fd4e 	bl	80016c8 <Error_Handler>
	  }

	  char str[16] = {0,};
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8000c30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
 8000c3a:	609a      	str	r2, [r3, #8]
	  HAL_UART_Transmit(GSM, (uint8_t*)"AT\r\n", strlen("AT\r\n"), 1000);
 8000c3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c40:	2204      	movs	r2, #4
 8000c42:	4938      	ldr	r1, [pc, #224]	; (8000d24 <chek_speed+0x1b8>)
 8000c44:	4835      	ldr	r0, [pc, #212]	; (8000d1c <chek_speed+0x1b0>)
 8000c46:	f002 fea7 	bl	8003998 <HAL_UART_Transmit>
	  HAL_Delay(300);
 8000c4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c4e:	f001 fa81 	bl	8002154 <HAL_Delay>

	  if(gsm_available()) //если модуль что-то прислал
 8000c52:	f001 f96b 	bl	8001f2c <gsm_available>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d050      	beq.n	8000cfe <chek_speed+0x192>
	  {
		  uint16_t i = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

		  while(gsm_available())
 8000c62:	e014      	b.n	8000c8e <chek_speed+0x122>
		  {
			  str[i++] = gsm_read();
 8000c64:	f001 f97c 	bl	8001f60 <gsm_read>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c70:	1c5a      	adds	r2, r3, #1
 8000c72:	f8a7 2056 	strh.w	r2, [r7, #86]	; 0x56
 8000c76:	b2ca      	uxtb	r2, r1
 8000c78:	3360      	adds	r3, #96	; 0x60
 8000c7a:	443b      	add	r3, r7
 8000c7c:	f803 2c1c 	strb.w	r2, [r3, #-28]
			  if(i > 15) break;
 8000c80:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d808      	bhi.n	8000c9a <chek_speed+0x12e>
			  HAL_Delay(1);
 8000c88:	2001      	movs	r0, #1
 8000c8a:	f001 fa63 	bl	8002154 <HAL_Delay>
		  while(gsm_available())
 8000c8e:	f001 f94d 	bl	8001f2c <gsm_available>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d1e5      	bne.n	8000c64 <chek_speed+0xf8>
 8000c98:	e000      	b.n	8000c9c <chek_speed+0x130>
			  if(i > 15) break;
 8000c9a:	bf00      	nop
		  }

		  if(strstr(str, "OK") != NULL)
 8000c9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ca0:	4921      	ldr	r1, [pc, #132]	; (8000d28 <chek_speed+0x1bc>)
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f003 fe70 	bl	8004988 <strstr>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d027      	beq.n	8000cfe <chek_speed+0x192>
		  {
			  char buf[64] = {0,};
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	f107 0308 	add.w	r3, r7, #8
 8000cb6:	223c      	movs	r2, #60	; 0x3c
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fdf3 	bl	80048a6 <memset>
			  snprintf(buf, 64, "Uart modem was %lu, switched to 57600\n", huart1.Init.BaudRate);
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <chek_speed+0x1b0>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	1d38      	adds	r0, r7, #4
 8000cc6:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <chek_speed+0x1c0>)
 8000cc8:	2140      	movs	r1, #64	; 0x40
 8000cca:	f003 fd75 	bl	80047b8 <sniprintf>
			  HAL_UART_Transmit(DEBUG, (uint8_t*)buf, strlen(buf), 100);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fa3b 	bl	800014c <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	1d39      	adds	r1, r7, #4
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	4814      	ldr	r0, [pc, #80]	; (8000d30 <chek_speed+0x1c4>)
 8000ce0:	f002 fe5a 	bl	8003998 <HAL_UART_Transmit>
			  HAL_UART_Transmit(GSM, (uint8_t*)"AT+IPR=57600\r\n", strlen("AT+IPR=57600\r\n"), 1000);
 8000ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ce8:	220e      	movs	r2, #14
 8000cea:	4912      	ldr	r1, [pc, #72]	; (8000d34 <chek_speed+0x1c8>)
 8000cec:	480b      	ldr	r0, [pc, #44]	; (8000d1c <chek_speed+0x1b0>)
 8000cee:	f002 fe53 	bl	8003998 <HAL_UART_Transmit>
			  HAL_Delay(250);
 8000cf2:	20fa      	movs	r0, #250	; 0xfa
 8000cf4:	f001 fa2e 	bl	8002154 <HAL_Delay>
			  MX_USART1_UART_Init();
 8000cf8:	f000 fc0c 	bl	8001514 <MX_USART1_UART_Init>
			  break;
 8000cfc:	e00a      	b.n	8000d14 <chek_speed+0x1a8>
  for(uint8_t i = 0; i < 7; i++)
 8000cfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d02:	3301      	adds	r3, #1
 8000d04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8000d08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000d0c:	2b06      	cmp	r3, #6
 8000d0e:	f67f af34 	bls.w	8000b7a <chek_speed+0xe>
		  }
	  }
  }
}
 8000d12:	bf00      	nop
 8000d14:	bf00      	nop
 8000d16:	3760      	adds	r7, #96	; 0x60
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000d8 	.word	0x200000d8
 8000d20:	40013800 	.word	0x40013800
 8000d24:	08005d34 	.word	0x08005d34
 8000d28:	08005d3c 	.word	0x08005d3c
 8000d2c:	08005d40 	.word	0x08005d40
 8000d30:	20000120 	.word	0x20000120
 8000d34:	08005d68 	.word	0x08005d68

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b0ae      	sub	sp, #184	; 0xb8
 8000d3c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3e:	f001 f9a7 	bl	8002090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d42:	f000 fb4f 	bl	80013e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d46:	f000 fc39 	bl	80015bc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000d4a:	f000 fb91 	bl	8001470 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000d4e:	f000 fbe1 	bl	8001514 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d52:	f000 fc09 	bl	8001568 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  welcome();
 8000d56:	f7ff fdcb 	bl	80008f0 <welcome>


  __HAL_UART_ENABLE_IT(GSM, UART_IT_RXNE);
 8000d5a:	4bab      	ldr	r3, [pc, #684]	; (8001008 <main+0x2d0>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	4ba9      	ldr	r3, [pc, #676]	; (8001008 <main+0x2d0>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f042 0220 	orr.w	r2, r2, #32
 8000d68:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(DEBUG, UART_IT_RXNE);
 8000d6a:	4ba8      	ldr	r3, [pc, #672]	; (800100c <main+0x2d4>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	4ba6      	ldr	r3, [pc, #664]	; (800100c <main+0x2d4>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f042 0220 	orr.w	r2, r2, #32
 8000d78:	60da      	str	r2, [r3, #12]

  starting();
 8000d7a:	f7ff fe29 	bl	80009d0 <starting>





  char buf[GSM_RX_BUFFER_SIZE] = {0,};
 8000d7e:	2300      	movs	r3, #0
 8000d80:	663b      	str	r3, [r7, #96]	; 0x60
 8000d82:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d86:	223c      	movs	r2, #60	; 0x3c
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fd8b 	bl	80048a6 <memset>
  char str[GSM_RX_BUFFER_SIZE] = {0,};
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
 8000d94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d98:	223c      	movs	r2, #60	; 0x3c
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fd82 	bl	80048a6 <memset>


  for (int var = 0; var < 10; ++var)
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000da8:	e039      	b.n	8000e1e <main+0xe6>
  {
		if(numbers[var] != 0)
 8000daa:	4a99      	ldr	r2, [pc, #612]	; (8001010 <main+0x2d8>)
 8000dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000db0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d02d      	beq.n	8000e14 <main+0xdc>
		{
		snprintf(str, 15, "Num%i 0%lu", var, numbers[var]);
 8000db8:	4a95      	ldr	r2, [pc, #596]	; (8001010 <main+0x2d8>)
 8000dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	f107 0020 	add.w	r0, r7, #32
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000dcc:	4a91      	ldr	r2, [pc, #580]	; (8001014 <main+0x2dc>)
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f003 fcf2 	bl	80047b8 <sniprintf>
		HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff f9b7 	bl	800014c <strlen>
 8000dde:	4603      	mov	r3, r0
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	f107 0120 	add.w	r1, r7, #32
 8000de6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dea:	4888      	ldr	r0, [pc, #544]	; (800100c <main+0x2d4>)
 8000dec:	f002 fdd4 	bl	8003998 <HAL_UART_Transmit>
		HAL_UART_Transmit(DEBUG, (uint8_t*)"\n", strlen("\n"), 1000);
 8000df0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df4:	2201      	movs	r2, #1
 8000df6:	4988      	ldr	r1, [pc, #544]	; (8001018 <main+0x2e0>)
 8000df8:	4884      	ldr	r0, [pc, #528]	; (800100c <main+0x2d4>)
 8000dfa:	f002 fdcd 	bl	8003998 <HAL_UART_Transmit>
		LCD_print(str, 0, 2);
 8000dfe:	f107 0320 	add.w	r3, r7, #32
 8000e02:	2202      	movs	r2, #2
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 fddc 	bl	80019c4 <LCD_print>
		HAL_Delay(1000);
 8000e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e10:	f001 f9a0 	bl	8002154 <HAL_Delay>
  for (int var = 0; var < 10; ++var)
 8000e14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e18:	3301      	adds	r3, #1
 8000e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000e22:	2b09      	cmp	r3, #9
 8000e24:	ddc1      	ble.n	8000daa <main+0x72>
		}
  }
  LCD_clrScr(); // очистить экран
 8000e26:	f000 fded 	bl	8001a04 <LCD_clrScr>
  LCD_invertText(false);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 fd70 	bl	8001910 <LCD_invertText>
  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);
 8000e30:	2200      	movs	r2, #0
 8000e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e36:	4879      	ldr	r0, [pc, #484]	; (800101c <main+0x2e4>)
 8000e38:	f001 fd06 	bl	8002848 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim1); // запуск таймера
 8000e3c:	4878      	ldr	r0, [pc, #480]	; (8001020 <main+0x2e8>)
 8000e3e:	f002 f995 	bl	800316c <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(flag_alarm == 1)
 8000e42:	4b78      	ldr	r3, [pc, #480]	; (8001024 <main+0x2ec>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d116      	bne.n	8000e7a <main+0x142>
	  {
		  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e52:	4872      	ldr	r0, [pc, #456]	; (800101c <main+0x2e4>)
 8000e54:	f001 fcf8 	bl	8002848 <HAL_GPIO_WritePin>
		  HAL_TIM_Base_Stop_IT(&htim1); // остановка таймера
 8000e58:	4871      	ldr	r0, [pc, #452]	; (8001020 <main+0x2e8>)
 8000e5a:	f002 f9d3 	bl	8003204 <HAL_TIM_Base_Stop_IT>
		  alarm();
 8000e5e:	f7ff fcd7 	bl	8000810 <alarm>
		  flag_alarm = 0;
 8000e62:	4b70      	ldr	r3, [pc, #448]	; (8001024 <main+0x2ec>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim1); // запуск таймера
 8000e68:	486d      	ldr	r0, [pc, #436]	; (8001020 <main+0x2e8>)
 8000e6a:	f002 f97f 	bl	800316c <HAL_TIM_Base_Start_IT>
		  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e74:	4869      	ldr	r0, [pc, #420]	; (800101c <main+0x2e4>)
 8000e76:	f001 fce7 	bl	8002848 <HAL_GPIO_WritePin>
	  }

		if(flag_signal == 1)
 8000e7a:	4b6b      	ldr	r3, [pc, #428]	; (8001028 <main+0x2f0>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	f040 808e 	bne.w	8000fa2 <main+0x26a>
		{
			flag_signal = 0;
 8000e86:	4b68      	ldr	r3, [pc, #416]	; (8001028 <main+0x2f0>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	701a      	strb	r2, [r3, #0]
			LCD_clrScr(); // очистить экран
 8000e8c:	f000 fdba 	bl	8001a04 <LCD_clrScr>
			HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4861      	ldr	r0, [pc, #388]	; (800101c <main+0x2e4>)
 8000e98:	f001 fcd6 	bl	8002848 <HAL_GPIO_WritePin>
			set_comand(ATCSQ); // уровень сигнала. Может быть в диапазоне 0..31, чем больше тем лучше. 99 значит отсутствие сигнала.
 8000e9c:	4863      	ldr	r0, [pc, #396]	; (800102c <main+0x2f4>)
 8000e9e:	f7ff f97d 	bl	800019c <set_comand>
			set_comand(ATCBC); // // naprijenie pitaniya
 8000ea2:	4863      	ldr	r0, [pc, #396]	; (8001030 <main+0x2f8>)
 8000ea4:	f7ff f97a 	bl	800019c <set_comand>
			LCD_print("LABIRINT", 18, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2112      	movs	r1, #18
 8000eac:	4861      	ldr	r0, [pc, #388]	; (8001034 <main+0x2fc>)
 8000eae:	f000 fd89 	bl	80019c4 <LCD_print>
			LCD_print("ELECTRIC", 18, 1);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2112      	movs	r1, #18
 8000eb6:	4860      	ldr	r0, [pc, #384]	; (8001038 <main+0x300>)
 8000eb8:	f000 fd84 	bl	80019c4 <LCD_print>
			LCD_print(operator, 0, 3); //vivodim na ekran soobshenie iz masiva operator po ukazannim koordinatam
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	485e      	ldr	r0, [pc, #376]	; (800103c <main+0x304>)
 8000ec2:	f000 fd7f 	bl	80019c4 <LCD_print>
			LCD_print("NET          %", 0, 4);
 8000ec6:	2204      	movs	r2, #4
 8000ec8:	2100      	movs	r1, #0
 8000eca:	485d      	ldr	r0, [pc, #372]	; (8001040 <main+0x308>)
 8000ecc:	f000 fd7a 	bl	80019c4 <LCD_print>
			LCD_print(sig, 60, 4); //vivodim na ekran soobshenie iz masiva dbi po ukazannim koordinatam
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	213c      	movs	r1, #60	; 0x3c
 8000ed4:	485b      	ldr	r0, [pc, #364]	; (8001044 <main+0x30c>)
 8000ed6:	f000 fd75 	bl	80019c4 <LCD_print>
			LCD_print("BAT          %", 0, 5);
 8000eda:	2205      	movs	r2, #5
 8000edc:	2100      	movs	r1, #0
 8000ede:	485a      	ldr	r0, [pc, #360]	; (8001048 <main+0x310>)
 8000ee0:	f000 fd70 	bl	80019c4 <LCD_print>
			LCD_print(bat, 60, 5);
 8000ee4:	2205      	movs	r2, #5
 8000ee6:	213c      	movs	r1, #60	; 0x3c
 8000ee8:	4858      	ldr	r0, [pc, #352]	; (800104c <main+0x314>)
 8000eea:	f000 fd6b 	bl	80019c4 <LCD_print>

			status_counter--;
 8000eee:	4b58      	ldr	r3, [pc, #352]	; (8001050 <main+0x318>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b55      	ldr	r3, [pc, #340]	; (8001050 <main+0x318>)
 8000efa:	701a      	strb	r2, [r3, #0]
			if(status_counter == 0)
 8000efc:	4b54      	ldr	r3, [pc, #336]	; (8001050 <main+0x318>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d147      	bne.n	8000f96 <main+0x25e>
			{
				status_counter = 10;
 8000f06:	4b52      	ldr	r3, [pc, #328]	; (8001050 <main+0x318>)
 8000f08:	220a      	movs	r2, #10
 8000f0a:	701a      	strb	r2, [r3, #0]
				LCD_invertText(true);
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f000 fcff 	bl	8001910 <LCD_invertText>
				LCD_print(" status check ", 0, 2);
 8000f12:	2202      	movs	r2, #2
 8000f14:	2100      	movs	r1, #0
 8000f16:	484f      	ldr	r0, [pc, #316]	; (8001054 <main+0x31c>)
 8000f18:	f000 fd54 	bl	80019c4 <LCD_print>
				HAL_Delay(500);
 8000f1c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f20:	f001 f918 	bl	8002154 <HAL_Delay>
				set_comand(ATCPAS);  // проверка статуса модема
 8000f24:	484c      	ldr	r0, [pc, #304]	; (8001058 <main+0x320>)
 8000f26:	f7ff f939 	bl	800019c <set_comand>
				LCD_print("registr  check", 0, 2);
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	484b      	ldr	r0, [pc, #300]	; (800105c <main+0x324>)
 8000f30:	f000 fd48 	bl	80019c4 <LCD_print>
				HAL_Delay(500);
 8000f34:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f38:	f001 f90c 	bl	8002154 <HAL_Delay>
				set_comand(ATCREG);  // проверка регистрации в сети - должен вернуть  +CREG: 0,1
 8000f3c:	4848      	ldr	r0, [pc, #288]	; (8001060 <main+0x328>)
 8000f3e:	f7ff f92d 	bl	800019c <set_comand>
				LCD_clrScr(); // очистить экран
 8000f42:	f000 fd5f 	bl	8001a04 <LCD_clrScr>
				LCD_invertText(false);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 fce2 	bl	8001910 <LCD_invertText>
				get_date_time(); // будет раз в секунду выводить время
 8000f4c:	f7ff fb70 	bl	8000630 <get_date_time>
				LCD_print("LABIRINT", 18, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2112      	movs	r1, #18
 8000f54:	4837      	ldr	r0, [pc, #220]	; (8001034 <main+0x2fc>)
 8000f56:	f000 fd35 	bl	80019c4 <LCD_print>
				LCD_print("ELECTRIC", 18, 1);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	2112      	movs	r1, #18
 8000f5e:	4836      	ldr	r0, [pc, #216]	; (8001038 <main+0x300>)
 8000f60:	f000 fd30 	bl	80019c4 <LCD_print>
				LCD_print(operator, 0, 3); //vivodim na ekran soobshenie iz masiva operator po ukazannim koordinatam
 8000f64:	2203      	movs	r2, #3
 8000f66:	2100      	movs	r1, #0
 8000f68:	4834      	ldr	r0, [pc, #208]	; (800103c <main+0x304>)
 8000f6a:	f000 fd2b 	bl	80019c4 <LCD_print>
				LCD_print("NET          %", 0, 4);
 8000f6e:	2204      	movs	r2, #4
 8000f70:	2100      	movs	r1, #0
 8000f72:	4833      	ldr	r0, [pc, #204]	; (8001040 <main+0x308>)
 8000f74:	f000 fd26 	bl	80019c4 <LCD_print>
				LCD_print(sig, 60, 4); //vivodim na ekran soobshenie iz masiva dbi po ukazannim koordinatam
 8000f78:	2204      	movs	r2, #4
 8000f7a:	213c      	movs	r1, #60	; 0x3c
 8000f7c:	4831      	ldr	r0, [pc, #196]	; (8001044 <main+0x30c>)
 8000f7e:	f000 fd21 	bl	80019c4 <LCD_print>
				LCD_print("BAT          %", 0, 5);
 8000f82:	2205      	movs	r2, #5
 8000f84:	2100      	movs	r1, #0
 8000f86:	4830      	ldr	r0, [pc, #192]	; (8001048 <main+0x310>)
 8000f88:	f000 fd1c 	bl	80019c4 <LCD_print>
				LCD_print(bat, 60, 5);
 8000f8c:	2205      	movs	r2, #5
 8000f8e:	213c      	movs	r1, #60	; 0x3c
 8000f90:	482e      	ldr	r0, [pc, #184]	; (800104c <main+0x314>)
 8000f92:	f000 fd17 	bl	80019c4 <LCD_print>
			}
			HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f9c:	481f      	ldr	r0, [pc, #124]	; (800101c <main+0x2e4>)
 8000f9e:	f001 fc53 	bl	8002848 <HAL_GPIO_WritePin>
		}




		if(gsm_available()) //если модуль что-то прислал
 8000fa2:	f000 ffc3 	bl	8001f2c <gsm_available>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 81a8 	beq.w	80012fe <main+0x5c6>
		{
			uint16_t i = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
			uint8_t fdbg = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			memset(buf, 0, GSM_RX_BUFFER_SIZE);
 8000fba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000fbe:	2240      	movs	r2, #64	; 0x40
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fc6f 	bl	80048a6 <memset>
			HAL_Delay(50);
 8000fc8:	2032      	movs	r0, #50	; 0x32
 8000fca:	f001 f8c3 	bl	8002154 <HAL_Delay>

			while(gsm_available())
 8000fce:	e014      	b.n	8000ffa <main+0x2c2>
			{
				buf[i++] = gsm_read();
 8000fd0:	f000 ffc6 	bl	8001f60 <gsm_read>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000fdc:	1c5a      	adds	r2, r3, #1
 8000fde:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 8000fe2:	b2ca      	uxtb	r2, r1
 8000fe4:	33b0      	adds	r3, #176	; 0xb0
 8000fe6:	443b      	add	r3, r7
 8000fe8:	f803 2c50 	strb.w	r2, [r3, #-80]
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8000fec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8000ff0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff2:	d837      	bhi.n	8001064 <main+0x32c>
				HAL_Delay(1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f001 f8ad 	bl	8002154 <HAL_Delay>
			while(gsm_available())
 8000ffa:	f000 ff97 	bl	8001f2c <gsm_available>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d1e5      	bne.n	8000fd0 <main+0x298>
 8001004:	e02f      	b.n	8001066 <main+0x32e>
 8001006:	bf00      	nop
 8001008:	200000d8 	.word	0x200000d8
 800100c:	20000120 	.word	0x20000120
 8001010:	2000018c 	.word	0x2000018c
 8001014:	08005d78 	.word	0x08005d78
 8001018:	08005d84 	.word	0x08005d84
 800101c:	40011000 	.word	0x40011000
 8001020:	20000090 	.word	0x20000090
 8001024:	20000168 	.word	0x20000168
 8001028:	20000169 	.word	0x20000169
 800102c:	08005d88 	.word	0x08005d88
 8001030:	08005d90 	.word	0x08005d90
 8001034:	08005d98 	.word	0x08005d98
 8001038:	08005da4 	.word	0x08005da4
 800103c:	20000174 	.word	0x20000174
 8001040:	08005db0 	.word	0x08005db0
 8001044:	20000188 	.word	0x20000188
 8001048:	08005dc0 	.word	0x08005dc0
 800104c:	20000184 	.word	0x20000184
 8001050:	20000000 	.word	0x20000000
 8001054:	08005dd0 	.word	0x08005dd0
 8001058:	08005de0 	.word	0x08005de0
 800105c:	08005de8 	.word	0x08005de8
 8001060:	08005df8 	.word	0x08005df8
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8001064:	bf00      	nop
			}

			clear_string(buf); // очищаем строку от символов \r и \n
 8001066:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd2a 	bl	8000ac4 <clear_string>

			/////////////////// НАЧ�?НАЕМ РАСПОЗНАВАТЬ ЧТО ПР�?СЛАЛ МОДУЛЬ /////////////////////
			if(strstr(buf, "RING") != NULL) // ЕСЛ�? ЭТО ЗВОНОК
 8001070:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001074:	49c6      	ldr	r1, [pc, #792]	; (8001390 <main+0x658>)
 8001076:	4618      	mov	r0, r3
 8001078:	f003 fc86 	bl	8004988 <strstr>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	f040 8123 	bne.w	80012ca <main+0x592>
			{

			}
			else if(strstr(buf, "+CMT:") != NULL) // ЕСЛ�? ЭТО SMS
 8001084:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001088:	49c2      	ldr	r1, [pc, #776]	; (8001394 <main+0x65c>)
 800108a:	4618      	mov	r0, r3
 800108c:	f003 fc7c 	bl	8004988 <strstr>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d04c      	beq.n	8001130 <main+0x3f8>
			{
				if(strstr(buf, "77057066") != NULL) // проверяем от кого смс
 8001096:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800109a:	49bf      	ldr	r1, [pc, #764]	; (8001398 <main+0x660>)
 800109c:	4618      	mov	r0, r3
 800109e:	f003 fc73 	bl	8004988 <strstr>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d03b      	beq.n	8001120 <main+0x3e8>
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)"Sms my number\n", strlen("Sms my number\n"), 1000);
 80010a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ac:	220e      	movs	r2, #14
 80010ae:	49bb      	ldr	r1, [pc, #748]	; (800139c <main+0x664>)
 80010b0:	48bb      	ldr	r0, [pc, #748]	; (80013a0 <main+0x668>)
 80010b2:	f002 fc71 	bl	8003998 <HAL_UART_Transmit>
					LCD_invertText(true);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f000 fc2a 	bl	8001910 <LCD_invertText>
					LCD_print("SMS           ", 0, 2);
 80010bc:	2202      	movs	r2, #2
 80010be:	2100      	movs	r1, #0
 80010c0:	48b8      	ldr	r0, [pc, #736]	; (80013a4 <main+0x66c>)
 80010c2:	f000 fc7f 	bl	80019c4 <LCD_print>
					//LCD_print(num_1, 30, 2);
					LCD_invertText(false);
 80010c6:	2000      	movs	r0, #0
 80010c8:	f000 fc22 	bl	8001910 <LCD_invertText>
					// что-то делаем или ищем какую-то строку, которую мы послали в смс, например слово "Hello"
					if(strstr(buf, "Hello") != NULL)
 80010cc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010d0:	49b5      	ldr	r1, [pc, #724]	; (80013a8 <main+0x670>)
 80010d2:	4618      	mov	r0, r3
 80010d4:	f003 fc58 	bl	8004988 <strstr>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <main+0x3b6>
					{
						HAL_UART_Transmit(DEBUG, (uint8_t*)"Reciv Hello\n", strlen("Reciv Hello\n"), 1000);
 80010de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e2:	220c      	movs	r2, #12
 80010e4:	49b1      	ldr	r1, [pc, #708]	; (80013ac <main+0x674>)
 80010e6:	48ae      	ldr	r0, [pc, #696]	; (80013a0 <main+0x668>)
 80010e8:	f002 fc56 	bl	8003998 <HAL_UART_Transmit>
 80010ec:	e0ed      	b.n	80012ca <main+0x592>
						// что-то делаем
					}
					else if(strstr(buf, "Call") != NULL) // если прилетело слово "Call" то звоним
 80010ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80010f2:	49af      	ldr	r1, [pc, #700]	; (80013b0 <main+0x678>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f003 fc47 	bl	8004988 <strstr>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d002      	beq.n	8001106 <main+0x3ce>
					{
						call(); // номер указать в файле gsm.c
 8001100:	f7ff fa74 	bl	80005ec <call>
 8001104:	e0e1      	b.n	80012ca <main+0x592>
					}
					else if(strstr(buf, "Money") != NULL) // если отпрвить sms со словом "Money", то в ответ придёт смс с балансом (деньги) на модеме
 8001106:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800110a:	49aa      	ldr	r1, [pc, #680]	; (80013b4 <main+0x67c>)
 800110c:	4618      	mov	r0, r3
 800110e:	f003 fc3b 	bl	8004988 <strstr>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80d8 	beq.w	80012ca <main+0x592>
					{
						balance(); // посылаем команду узнать баланс (мтс)
 800111a:	f7ff fa2d 	bl	8000578 <balance>
 800111e:	e0d4      	b.n	80012ca <main+0x592>
					}
				}
				else
				{
					HAL_UART_Transmit(DEBUG, (uint8_t*)"Unknow number sms\n", strlen("Unknow number sms\n"), 1000);
 8001120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001124:	2212      	movs	r2, #18
 8001126:	49a4      	ldr	r1, [pc, #656]	; (80013b8 <main+0x680>)
 8001128:	489d      	ldr	r0, [pc, #628]	; (80013a0 <main+0x668>)
 800112a:	f002 fc35 	bl	8003998 <HAL_UART_Transmit>
 800112e:	e0cc      	b.n	80012ca <main+0x592>
				}
			}
			else if(strstr(buf, "+CUSD") != NULL)  // ЕСЛ�? ЭТО СТРОКА С БАЛАНСОМ
 8001130:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001134:	49a1      	ldr	r1, [pc, #644]	; (80013bc <main+0x684>)
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fc26 	bl	8004988 <strstr>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00b      	beq.n	800115a <main+0x422>
			{
				char *p = NULL;
 8001142:	2300      	movs	r3, #0
 8001144:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

				if((p = strstr(buf, "Balance")) != NULL) // ищем слово "Balance"
 8001148:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800114c:	499c      	ldr	r1, [pc, #624]	; (80013c0 <main+0x688>)
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fc1a 	bl	8004988 <strstr>
 8001154:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8001158:	e0b7      	b.n	80012ca <main+0x592>
					snprintf(str, GSM_RX_BUFFER_SIZE, "%c", (char)26); // символ ctrl-z
					HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);*/
					// блок закомментирован чтоб модуль не слал смски пока тестируете
				}
			}
			else if(strstr(buf, "+DTMF") != NULL)  //ЕСЛ�? ЭТО DTMF С�?ГНАЛ
 800115a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800115e:	4999      	ldr	r1, [pc, #612]	; (80013c4 <main+0x68c>)
 8001160:	4618      	mov	r0, r3
 8001162:	f003 fc11 	bl	8004988 <strstr>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d023      	beq.n	80011b4 <main+0x47c>
			{
				if(strstr(buf, "0") != NULL) // если пришёл сигнал кнопки 0
 800116c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001170:	2130      	movs	r1, #48	; 0x30
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fb9f 	bl	80048b6 <strchr>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d007      	beq.n	800118e <main+0x456>
				{
					// что-то делаем
					HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 0\n", strlen("DTMF Button 0\n"), 1000);
 800117e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001182:	220e      	movs	r2, #14
 8001184:	4990      	ldr	r1, [pc, #576]	; (80013c8 <main+0x690>)
 8001186:	4886      	ldr	r0, [pc, #536]	; (80013a0 <main+0x668>)
 8001188:	f002 fc06 	bl	8003998 <HAL_UART_Transmit>
 800118c:	e00f      	b.n	80011ae <main+0x476>
				}
				else if(strstr(buf, "1") != NULL) // если пришёл сигнал кнопки 1
 800118e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001192:	2131      	movs	r1, #49	; 0x31
 8001194:	4618      	mov	r0, r3
 8001196:	f003 fb8e 	bl	80048b6 <strchr>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d006      	beq.n	80011ae <main+0x476>
				{
					// что-то делаем
					HAL_UART_Transmit(DEBUG, (uint8_t*)"DTMF Button 1\n", strlen("DTMF Button 1\n"), 1000);
 80011a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a4:	220e      	movs	r2, #14
 80011a6:	4989      	ldr	r1, [pc, #548]	; (80013cc <main+0x694>)
 80011a8:	487d      	ldr	r0, [pc, #500]	; (80013a0 <main+0x668>)
 80011aa:	f002 fbf5 	bl	8003998 <HAL_UART_Transmit>
				}
				// и т.д.

				disable_connection(); // разрываем соединение, или не разрываем (в зависимости от того, что вам нужно)
 80011ae:	f7ff f9ff 	bl	80005b0 <disable_connection>
 80011b2:	e08a      	b.n	80012ca <main+0x592>
			}
			else if(strstr(buf, "+CCLK") != NULL)  // ЕСЛ�? ЭТО ДАТА/ВРЕМЯ
 80011b4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011b8:	4985      	ldr	r1, [pc, #532]	; (80013d0 <main+0x698>)
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fbe4 	bl	8004988 <strstr>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 8081 	beq.w	80012ca <main+0x592>
			{
				replac_string(buf);
 80011c8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7fe ffc5 	bl	800015c <replac_string>
				char res[32] = {0,};
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]

				for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 80011e8:	2300      	movs	r3, #0
 80011ea:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 80011ee:	e050      	b.n	8001292 <main+0x55a>
				{
					if(buf[i] == '"')
 80011f0:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80011f4:	33b0      	adds	r3, #176	; 0xb0
 80011f6:	443b      	add	r3, r7
 80011f8:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80011fc:	2b22      	cmp	r3, #34	; 0x22
 80011fe:	d143      	bne.n	8001288 <main+0x550>
					{
						i++;
 8001200:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001204:	3301      	adds	r3, #1
 8001206:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
						for(uint8_t j = 0; j < 20; i++, j++)
 800120a:	2300      	movs	r3, #0
 800120c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8001210:	e035      	b.n	800127e <main+0x546>
						{
							if(buf[i] == '+')
 8001212:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001216:	33b0      	adds	r3, #176	; 0xb0
 8001218:	443b      	add	r3, r7
 800121a:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 800121e:	2b2b      	cmp	r3, #43	; 0x2b
 8001220:	d108      	bne.n	8001234 <main+0x4fc>
							{
								buf[i] = 0;
 8001222:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001226:	33b0      	adds	r3, #176	; 0xb0
 8001228:	443b      	add	r3, r7
 800122a:	2200      	movs	r2, #0
 800122c:	f803 2c50 	strb.w	r2, [r3, #-80]
								break;
 8001230:	bf00      	nop

							if(buf[i] == ',') buf[i] = ' ';
							res[j] = buf[i];
						}

						break;
 8001232:	e032      	b.n	800129a <main+0x562>
							if(buf[i] == ',') buf[i] = ' ';
 8001234:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001238:	33b0      	adds	r3, #176	; 0xb0
 800123a:	443b      	add	r3, r7
 800123c:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001240:	2b2c      	cmp	r3, #44	; 0x2c
 8001242:	d106      	bne.n	8001252 <main+0x51a>
 8001244:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001248:	33b0      	adds	r3, #176	; 0xb0
 800124a:	443b      	add	r3, r7
 800124c:	2220      	movs	r2, #32
 800124e:	f803 2c50 	strb.w	r2, [r3, #-80]
							res[j] = buf[i];
 8001252:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001256:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800125a:	32b0      	adds	r2, #176	; 0xb0
 800125c:	443a      	add	r2, r7
 800125e:	f812 2c50 	ldrb.w	r2, [r2, #-80]
 8001262:	33b0      	adds	r3, #176	; 0xb0
 8001264:	443b      	add	r3, r7
 8001266:	f803 2cb0 	strb.w	r2, [r3, #-176]
						for(uint8_t j = 0; j < 20; i++, j++)
 800126a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800126e:	3301      	adds	r3, #1
 8001270:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8001274:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001278:	3301      	adds	r3, #1
 800127a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 800127e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8001282:	2b13      	cmp	r3, #19
 8001284:	d9c5      	bls.n	8001212 <main+0x4da>
						break;
 8001286:	e008      	b.n	800129a <main+0x562>
				for(uint8_t i = 0; i < GSM_RX_BUFFER_SIZE; i++)
 8001288:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800128c:	3301      	adds	r3, #1
 800128e:	f887 30a8 	strb.w	r3, [r7, #168]	; 0xa8
 8001292:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 8001296:	2b3f      	cmp	r3, #63	; 0x3f
 8001298:	d9aa      	bls.n	80011f0 <main+0x4b8>
					}
				}

				snprintf(str, GSM_RX_BUFFER_SIZE, "DateTime %s\n", res);
 800129a:	463b      	mov	r3, r7
 800129c:	f107 0020 	add.w	r0, r7, #32
 80012a0:	4a4c      	ldr	r2, [pc, #304]	; (80013d4 <main+0x69c>)
 80012a2:	2140      	movs	r1, #64	; 0x40
 80012a4:	f003 fa88 	bl	80047b8 <sniprintf>
				HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 80012a8:	f107 0320 	add.w	r3, r7, #32
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7fe ff4d 	bl	800014c <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f107 0120 	add.w	r1, r7, #32
 80012ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012be:	4838      	ldr	r0, [pc, #224]	; (80013a0 <main+0x668>)
 80012c0:	f002 fb6a 	bl	8003998 <HAL_UART_Transmit>
				fdbg = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f887 30a9 	strb.w	r3, [r7, #169]	; 0xa9
			}

			if(fdbg)
 80012ca:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d015      	beq.n	80012fe <main+0x5c6>
			{
				snprintf(str, GSM_RX_BUFFER_SIZE, "%s\n", buf);
 80012d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012d6:	f107 0020 	add.w	r0, r7, #32
 80012da:	4a3f      	ldr	r2, [pc, #252]	; (80013d8 <main+0x6a0>)
 80012dc:	2140      	movs	r1, #64	; 0x40
 80012de:	f003 fa6b 	bl	80047b8 <sniprintf>
				HAL_UART_Transmit(DEBUG, (uint8_t*)str, strlen(str), 1000);
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ff30 	bl	800014c <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	f107 0120 	add.w	r1, r7, #32
 80012f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f8:	4829      	ldr	r0, [pc, #164]	; (80013a0 <main+0x668>)
 80012fa:	f002 fb4d 	bl	8003998 <HAL_UART_Transmit>
			}
		}


		////////////////////////////////////// DEBUG ////////////////////////////////////////
		if(dbg_available()) //если послали в терминал какую-то команду, то она перенаправиться в модем
 80012fe:	f000 fe5b 	bl	8001fb8 <dbg_available>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	f43f ad9c 	beq.w	8000e42 <main+0x10a>
		{
			uint16_t i = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
			memset(buf, 0, GSM_RX_BUFFER_SIZE);
 8001310:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001314:	2240      	movs	r2, #64	; 0x40
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fac4 	bl	80048a6 <memset>

			while(dbg_available())
 800131e:	e014      	b.n	800134a <main+0x612>
			{
				buf[i++] = dbg_read();
 8001320:	f000 fe64 	bl	8001fec <dbg_read>
 8001324:	4603      	mov	r3, r0
 8001326:	4619      	mov	r1, r3
 8001328:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 800132c:	1c5a      	adds	r2, r3, #1
 800132e:	f8a7 20a4 	strh.w	r2, [r7, #164]	; 0xa4
 8001332:	b2ca      	uxtb	r2, r1
 8001334:	33b0      	adds	r3, #176	; 0xb0
 8001336:	443b      	add	r3, r7
 8001338:	f803 2c50 	strb.w	r2, [r3, #-80]
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 800133c:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001340:	2b3f      	cmp	r3, #63	; 0x3f
 8001342:	d808      	bhi.n	8001356 <main+0x61e>
				HAL_Delay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f000 ff05 	bl	8002154 <HAL_Delay>
			while(dbg_available())
 800134a:	f000 fe35 	bl	8001fb8 <dbg_available>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1e5      	bne.n	8001320 <main+0x5e8>
 8001354:	e000      	b.n	8001358 <main+0x620>
				if(i > GSM_RX_BUFFER_SIZE - 1) break;
 8001356:	bf00      	nop
			}

			clear_string(buf);
 8001358:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fbb1 	bl	8000ac4 <clear_string>
			snprintf(str, GSM_RX_BUFFER_SIZE, "%s\r\n", buf);
 8001362:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001366:	f107 0020 	add.w	r0, r7, #32
 800136a:	4a1c      	ldr	r2, [pc, #112]	; (80013dc <main+0x6a4>)
 800136c:	2140      	movs	r1, #64	; 0x40
 800136e:	f003 fa23 	bl	80047b8 <sniprintf>
			HAL_UART_Transmit(GSM, (uint8_t*)str, strlen(str), 1000);
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	4618      	mov	r0, r3
 8001378:	f7fe fee8 	bl	800014c <strlen>
 800137c:	4603      	mov	r3, r0
 800137e:	b29a      	uxth	r2, r3
 8001380:	f107 0120 	add.w	r1, r7, #32
 8001384:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001388:	4815      	ldr	r0, [pc, #84]	; (80013e0 <main+0x6a8>)
 800138a:	f002 fb05 	bl	8003998 <HAL_UART_Transmit>
    if(flag_alarm == 1)
 800138e:	e558      	b.n	8000e42 <main+0x10a>
 8001390:	08005e04 	.word	0x08005e04
 8001394:	08005e0c 	.word	0x08005e0c
 8001398:	08005e14 	.word	0x08005e14
 800139c:	08005e20 	.word	0x08005e20
 80013a0:	20000120 	.word	0x20000120
 80013a4:	08005e30 	.word	0x08005e30
 80013a8:	08005e40 	.word	0x08005e40
 80013ac:	08005e48 	.word	0x08005e48
 80013b0:	08005e58 	.word	0x08005e58
 80013b4:	08005e60 	.word	0x08005e60
 80013b8:	08005e68 	.word	0x08005e68
 80013bc:	08005e7c 	.word	0x08005e7c
 80013c0:	08005e84 	.word	0x08005e84
 80013c4:	08005e8c 	.word	0x08005e8c
 80013c8:	08005e94 	.word	0x08005e94
 80013cc:	08005ea4 	.word	0x08005ea4
 80013d0:	08005eb4 	.word	0x08005eb4
 80013d4:	08005ebc 	.word	0x08005ebc
 80013d8:	08005ecc 	.word	0x08005ecc
 80013dc:	08005ed0 	.word	0x08005ed0
 80013e0:	200000d8 	.word	0x200000d8

080013e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b090      	sub	sp, #64	; 0x40
 80013e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	2228      	movs	r2, #40	; 0x28
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fa57 	bl	80048a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001406:	2301      	movs	r3, #1
 8001408:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800140a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800140e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001418:	2302      	movs	r3, #2
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800141c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001422:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	4618      	mov	r0, r3
 800142e:	f001 fa3d 	bl	80028ac <HAL_RCC_OscConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001438:	f000 f946 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143c:	230f      	movs	r3, #15
 800143e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001440:	2302      	movs	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800144c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	2102      	movs	r1, #2
 8001456:	4618      	mov	r0, r3
 8001458:	f001 fcaa 	bl	8002db0 <HAL_RCC_ClockConfig>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001462:	f000 f931 	bl	80016c8 <Error_Handler>
  }
}
 8001466:	bf00      	nop
 8001468:	3740      	adds	r7, #64	; 0x40
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001476:	f107 0308 	add.w	r3, r7, #8
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	463b      	mov	r3, r7
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800148c:	4b1f      	ldr	r3, [pc, #124]	; (800150c <MX_TIM1_Init+0x9c>)
 800148e:	4a20      	ldr	r2, [pc, #128]	; (8001510 <MX_TIM1_Init+0xa0>)
 8001490:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 65535;
 8001492:	4b1e      	ldr	r3, [pc, #120]	; (800150c <MX_TIM1_Init+0x9c>)
 8001494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001498:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <MX_TIM1_Init+0x9c>)
 800149c:	2200      	movs	r2, #0
 800149e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	; (800150c <MX_TIM1_Init+0x9c>)
 80014a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a8:	4b18      	ldr	r3, [pc, #96]	; (800150c <MX_TIM1_Init+0x9c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <MX_TIM1_Init+0x9c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_TIM1_Init+0x9c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ba:	4814      	ldr	r0, [pc, #80]	; (800150c <MX_TIM1_Init+0x9c>)
 80014bc:	f001 fe06 	bl	80030cc <HAL_TIM_Base_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80014c6:	f000 f8ff 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	4619      	mov	r1, r3
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_TIM1_Init+0x9c>)
 80014d8:	f001 ffca 	bl	8003470 <HAL_TIM_ConfigClockSource>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80014e2:	f000 f8f1 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_TIM1_Init+0x9c>)
 80014f4:	f002 f996 	bl	8003824 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80014fe:	f000 f8e3 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000090 	.word	0x20000090
 8001510:	40012c00 	.word	0x40012c00

08001514 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800151a:	4a12      	ldr	r2, [pc, #72]	; (8001564 <MX_USART1_UART_Init+0x50>)
 800151c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001520:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001524:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0b      	ldr	r3, [pc, #44]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b09      	ldr	r3, [pc, #36]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800154a:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_USART1_UART_Init+0x4c>)
 800154c:	f002 f9d4 	bl	80038f8 <HAL_UART_Init>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001556:	f000 f8b7 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200000d8 	.word	0x200000d8
 8001564:	40013800 	.word	0x40013800

08001568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800156c:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800156e:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <MX_USART2_UART_Init+0x50>)
 8001570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001572:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001574:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001582:	2200      	movs	r2, #0
 8001584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001586:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800158e:	220c      	movs	r2, #12
 8001590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001592:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 8001594:	2200      	movs	r2, #0
 8001596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001598:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 800159a:	2200      	movs	r2, #0
 800159c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800159e:	4805      	ldr	r0, [pc, #20]	; (80015b4 <MX_USART2_UART_Init+0x4c>)
 80015a0:	f002 f9aa 	bl	80038f8 <HAL_UART_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015aa:	f000 f88d 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	20000120 	.word	0x20000120
 80015b8:	40004400 	.word	0x40004400

080015bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b088      	sub	sp, #32
 80015c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015d0:	4b39      	ldr	r3, [pc, #228]	; (80016b8 <MX_GPIO_Init+0xfc>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	4a38      	ldr	r2, [pc, #224]	; (80016b8 <MX_GPIO_Init+0xfc>)
 80015d6:	f043 0310 	orr.w	r3, r3, #16
 80015da:	6193      	str	r3, [r2, #24]
 80015dc:	4b36      	ldr	r3, [pc, #216]	; (80016b8 <MX_GPIO_Init+0xfc>)
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e8:	4b33      	ldr	r3, [pc, #204]	; (80016b8 <MX_GPIO_Init+0xfc>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	4a32      	ldr	r2, [pc, #200]	; (80016b8 <MX_GPIO_Init+0xfc>)
 80015ee:	f043 0320 	orr.w	r3, r3, #32
 80015f2:	6193      	str	r3, [r2, #24]
 80015f4:	4b30      	ldr	r3, [pc, #192]	; (80016b8 <MX_GPIO_Init+0xfc>)
 80015f6:	699b      	ldr	r3, [r3, #24]
 80015f8:	f003 0320 	and.w	r3, r3, #32
 80015fc:	60bb      	str	r3, [r7, #8]
 80015fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b2d      	ldr	r3, [pc, #180]	; (80016b8 <MX_GPIO_Init+0xfc>)
 8001602:	699b      	ldr	r3, [r3, #24]
 8001604:	4a2c      	ldr	r2, [pc, #176]	; (80016b8 <MX_GPIO_Init+0xfc>)
 8001606:	f043 0304 	orr.w	r3, r3, #4
 800160a:	6193      	str	r3, [r2, #24]
 800160c:	4b2a      	ldr	r3, [pc, #168]	; (80016b8 <MX_GPIO_Init+0xfc>)
 800160e:	699b      	ldr	r3, [r3, #24]
 8001610:	f003 0304 	and.w	r3, r3, #4
 8001614:	607b      	str	r3, [r7, #4]
 8001616:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001618:	4b27      	ldr	r3, [pc, #156]	; (80016b8 <MX_GPIO_Init+0xfc>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a26      	ldr	r2, [pc, #152]	; (80016b8 <MX_GPIO_Init+0xfc>)
 800161e:	f043 0308 	orr.w	r3, r3, #8
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b24      	ldr	r3, [pc, #144]	; (80016b8 <MX_GPIO_Init+0xfc>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0308 	and.w	r3, r3, #8
 800162c:	603b      	str	r3, [r7, #0]
 800162e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERR_LED_GPIO_Port, ERR_LED_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001636:	4821      	ldr	r0, [pc, #132]	; (80016bc <MX_GPIO_Init+0x100>)
 8001638:	f001 f906 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CLK_Pin|DIN_Pin|DC_Pin|CE_Pin
 800163c:	2200      	movs	r2, #0
 800163e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001642:	481f      	ldr	r0, [pc, #124]	; (80016c0 <MX_GPIO_Init+0x104>)
 8001644:	f001 f900 	bl	8002848 <HAL_GPIO_WritePin>
                          |RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GSM_RESET_GPIO_Port, GSM_RESET_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800164e:	481d      	ldr	r0, [pc, #116]	; (80016c4 <MX_GPIO_Init+0x108>)
 8001650:	f001 f8fa 	bl	8002848 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ERR_LED_Pin */
  GPIO_InitStruct.Pin = ERR_LED_Pin;
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2302      	movs	r3, #2
 8001664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ERR_LED_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 0310 	add.w	r3, r7, #16
 800166a:	4619      	mov	r1, r3
 800166c:	4813      	ldr	r0, [pc, #76]	; (80016bc <MX_GPIO_Init+0x100>)
 800166e:	f000 ff6f 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_Pin DIN_Pin DC_Pin CE_Pin
                           RST_Pin */
  GPIO_InitStruct.Pin = CLK_Pin|DIN_Pin|DC_Pin|CE_Pin
 8001672:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001676:	613b      	str	r3, [r7, #16]
                          |RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001678:	2301      	movs	r3, #1
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2302      	movs	r3, #2
 8001682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0310 	add.w	r3, r7, #16
 8001688:	4619      	mov	r1, r3
 800168a:	480d      	ldr	r0, [pc, #52]	; (80016c0 <MX_GPIO_Init+0x104>)
 800168c:	f000 ff60 	bl	8002550 <HAL_GPIO_Init>

  /*Configure GPIO pin : GSM_RESET_Pin */
  GPIO_InitStruct.Pin = GSM_RESET_Pin;
 8001690:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001694:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001696:	2301      	movs	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2302      	movs	r3, #2
 80016a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GSM_RESET_GPIO_Port, &GPIO_InitStruct);
 80016a2:	f107 0310 	add.w	r3, r7, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	4806      	ldr	r0, [pc, #24]	; (80016c4 <MX_GPIO_Init+0x108>)
 80016aa:	f000 ff51 	bl	8002550 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016ae:	bf00      	nop
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40010c00 	.word	0x40010c00
 80016c4:	40010800 	.word	0x40010800

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <LCD_setRST>:
 * @brief Set functions for GPIO pins used
 * @param PORT: port of the pin used
 * @param PIN: pin of the pin used
 */
void LCD_setRST(GPIO_TypeDef* PORT, uint16_t PIN)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
	lcd_gpio.RSTPORT = PORT;
 80016e0:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <LCD_setRST+0x24>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
	lcd_gpio.RSTPIN = PIN;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <LCD_setRST+0x24>)
 80016e8:	887b      	ldrh	r3, [r7, #2]
 80016ea:	8093      	strh	r3, [r2, #4]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	200003b0 	.word	0x200003b0

080016fc <LCD_setCE>:

void LCD_setCE(GPIO_TypeDef* PORT, uint16_t PIN)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CEPORT = PORT;
 8001708:	4a05      	ldr	r2, [pc, #20]	; (8001720 <LCD_setCE+0x24>)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6093      	str	r3, [r2, #8]
	lcd_gpio.CEPIN = PIN;
 800170e:	4a04      	ldr	r2, [pc, #16]	; (8001720 <LCD_setCE+0x24>)
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	8193      	strh	r3, [r2, #12]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	bc80      	pop	{r7}
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	200003b0 	.word	0x200003b0

08001724 <LCD_setDC>:

void LCD_setDC(GPIO_TypeDef* PORT, uint16_t PIN)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DCPORT = PORT;
 8001730:	4a05      	ldr	r2, [pc, #20]	; (8001748 <LCD_setDC+0x24>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6113      	str	r3, [r2, #16]
	lcd_gpio.DCPIN = PIN;
 8001736:	4a04      	ldr	r2, [pc, #16]	; (8001748 <LCD_setDC+0x24>)
 8001738:	887b      	ldrh	r3, [r7, #2]
 800173a:	8293      	strh	r3, [r2, #20]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	bc80      	pop	{r7}
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	200003b0 	.word	0x200003b0

0800174c <LCD_setDIN>:
void LCD_setDIN(GPIO_TypeDef* PORT, uint16_t PIN)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	807b      	strh	r3, [r7, #2]
	lcd_gpio.DINPORT = PORT;
 8001758:	4a05      	ldr	r2, [pc, #20]	; (8001770 <LCD_setDIN+0x24>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6193      	str	r3, [r2, #24]
	lcd_gpio.DINPIN = PIN;
 800175e:	4a04      	ldr	r2, [pc, #16]	; (8001770 <LCD_setDIN+0x24>)
 8001760:	887b      	ldrh	r3, [r7, #2]
 8001762:	8393      	strh	r3, [r2, #28]
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	200003b0 	.word	0x200003b0

08001774 <LCD_setCLK>:

void LCD_setCLK(GPIO_TypeDef* PORT, uint16_t PIN)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	807b      	strh	r3, [r7, #2]
	lcd_gpio.CLKPORT = PORT;
 8001780:	4a05      	ldr	r2, [pc, #20]	; (8001798 <LCD_setCLK+0x24>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6213      	str	r3, [r2, #32]
	lcd_gpio.CLKPIN = PIN;
 8001786:	4a04      	ldr	r2, [pc, #16]	; (8001798 <LCD_setCLK+0x24>)
 8001788:	887b      	ldrh	r3, [r7, #2]
 800178a:	8493      	strh	r3, [r2, #36]	; 0x24
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200003b0 	.word	0x200003b0

0800179c <LCD_send>:
/*
 * @brief Send information to the LCD using configured GPIOs
 * @param val: value to be sent
 */
void LCD_send(uint8_t val)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  for(i = 0; i < 8; i++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
 80017aa:	e026      	b.n	80017fa <LCD_send+0x5e>
  {
    HAL_GPIO_WritePin(lcd_gpio.DINPORT, lcd_gpio.DINPIN, !!(val & (1 << (7 - i))));
 80017ac:	4b17      	ldr	r3, [pc, #92]	; (800180c <LCD_send+0x70>)
 80017ae:	6998      	ldr	r0, [r3, #24]
 80017b0:	4b16      	ldr	r3, [pc, #88]	; (800180c <LCD_send+0x70>)
 80017b2:	8b99      	ldrh	r1, [r3, #28]
 80017b4:	79fa      	ldrb	r2, [r7, #7]
 80017b6:	7bfb      	ldrb	r3, [r7, #15]
 80017b8:	f1c3 0307 	rsb	r3, r3, #7
 80017bc:	fa42 f303 	asr.w	r3, r2, r3
 80017c0:	f003 0301 	and.w	r3, r3, #1
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	f001 f83a 	bl	8002848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_SET);
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <LCD_send+0x70>)
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <LCD_send+0x70>)
 80017da:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 80017dc:	2201      	movs	r2, #1
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 f832 	bl	8002848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CLKPORT, lcd_gpio.CLKPIN, GPIO_PIN_RESET);
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <LCD_send+0x70>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <LCD_send+0x70>)
 80017ea:	8c91      	ldrh	r1, [r2, #36]	; 0x24
 80017ec:	2200      	movs	r2, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f001 f82a 	bl	8002848 <HAL_GPIO_WritePin>
  for(i = 0; i < 8; i++)
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	3301      	adds	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	7bfb      	ldrb	r3, [r7, #15]
 80017fc:	2b07      	cmp	r3, #7
 80017fe:	d9d5      	bls.n	80017ac <LCD_send+0x10>
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200003b0 	.word	0x200003b0

08001810 <LCD_write>:
 * @brief Writes some data into the LCD
 * @param data: data to be written
 * @param mode: command or data
 */
void LCD_write(uint8_t data, uint8_t mode)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	460a      	mov	r2, r1
 800181a:	71fb      	strb	r3, [r7, #7]
 800181c:	4613      	mov	r3, r2
 800181e:	71bb      	strb	r3, [r7, #6]
  if(mode == LCD_COMMAND)
 8001820:	79bb      	ldrb	r3, [r7, #6]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d11c      	bne.n	8001860 <LCD_write+0x50>
  {
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_RESET);
 8001826:	4b1e      	ldr	r3, [pc, #120]	; (80018a0 <LCD_write+0x90>)
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	4a1d      	ldr	r2, [pc, #116]	; (80018a0 <LCD_write+0x90>)
 800182c:	8a91      	ldrh	r1, [r2, #20]
 800182e:	2200      	movs	r2, #0
 8001830:	4618      	mov	r0, r3
 8001832:	f001 f809 	bl	8002848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <LCD_write+0x90>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	4a19      	ldr	r2, [pc, #100]	; (80018a0 <LCD_write+0x90>)
 800183c:	8991      	ldrh	r1, [r2, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f001 f801 	bl	8002848 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ffa7 	bl	800179c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <LCD_write+0x90>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	4a13      	ldr	r2, [pc, #76]	; (80018a0 <LCD_write+0x90>)
 8001854:	8991      	ldrh	r1, [r2, #12]
 8001856:	2201      	movs	r2, #1
 8001858:	4618      	mov	r0, r3
 800185a:	f000 fff5 	bl	8002848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
    LCD_send(data);
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
  }
}
 800185e:	e01b      	b.n	8001898 <LCD_write+0x88>
    HAL_GPIO_WritePin(lcd_gpio.DCPORT, lcd_gpio.DCPIN, GPIO_PIN_SET);
 8001860:	4b0f      	ldr	r3, [pc, #60]	; (80018a0 <LCD_write+0x90>)
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <LCD_write+0x90>)
 8001866:	8a91      	ldrh	r1, [r2, #20]
 8001868:	2201      	movs	r2, #1
 800186a:	4618      	mov	r0, r3
 800186c:	f000 ffec 	bl	8002848 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_RESET);
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <LCD_write+0x90>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LCD_write+0x90>)
 8001876:	8991      	ldrh	r1, [r2, #12]
 8001878:	2200      	movs	r2, #0
 800187a:	4618      	mov	r0, r3
 800187c:	f000 ffe4 	bl	8002848 <HAL_GPIO_WritePin>
    LCD_send(data);
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff8a 	bl	800179c <LCD_send>
    HAL_GPIO_WritePin(lcd_gpio.CEPORT, lcd_gpio.CEPIN, GPIO_PIN_SET);
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <LCD_write+0x90>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <LCD_write+0x90>)
 800188e:	8991      	ldrh	r1, [r2, #12]
 8001890:	2201      	movs	r2, #1
 8001892:	4618      	mov	r0, r3
 8001894:	f000 ffd8 	bl	8002848 <HAL_GPIO_WritePin>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200003b0 	.word	0x200003b0

080018a4 <LCD_init>:

/*
 * @brief Initialize the LCD using predetermined values
 */
void LCD_init()
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_RESET);
 80018a8:	4b17      	ldr	r3, [pc, #92]	; (8001908 <LCD_init+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a16      	ldr	r2, [pc, #88]	; (8001908 <LCD_init+0x64>)
 80018ae:	8891      	ldrh	r1, [r2, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 ffc8 	bl	8002848 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(lcd_gpio.RSTPORT, lcd_gpio.RSTPIN, GPIO_PIN_SET);
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <LCD_init+0x64>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <LCD_init+0x64>)
 80018be:	8891      	ldrh	r1, [r2, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 ffc0 	bl	8002848 <HAL_GPIO_WritePin>
  LCD_write(0x21, LCD_COMMAND); //LCD extended commands.
 80018c8:	2100      	movs	r1, #0
 80018ca:	2021      	movs	r0, #33	; 0x21
 80018cc:	f7ff ffa0 	bl	8001810 <LCD_write>
  LCD_write(0xB8, LCD_COMMAND); //set LCD Vop(Contrast).
 80018d0:	2100      	movs	r1, #0
 80018d2:	20b8      	movs	r0, #184	; 0xb8
 80018d4:	f7ff ff9c 	bl	8001810 <LCD_write>
  LCD_write(0x04, LCD_COMMAND); //set temp coefficent.
 80018d8:	2100      	movs	r1, #0
 80018da:	2004      	movs	r0, #4
 80018dc:	f7ff ff98 	bl	8001810 <LCD_write>
  LCD_write(0x14, LCD_COMMAND); //LCD bias mode 1:40.
 80018e0:	2100      	movs	r1, #0
 80018e2:	2014      	movs	r0, #20
 80018e4:	f7ff ff94 	bl	8001810 <LCD_write>
  LCD_write(0x20, LCD_COMMAND); //LCD basic commands.
 80018e8:	2100      	movs	r1, #0
 80018ea:	2020      	movs	r0, #32
 80018ec:	f7ff ff90 	bl	8001810 <LCD_write>
  LCD_write(LCD_DISPLAY_NORMAL, LCD_COMMAND); //LCD normal.
 80018f0:	2100      	movs	r1, #0
 80018f2:	200c      	movs	r0, #12
 80018f4:	f7ff ff8c 	bl	8001810 <LCD_write>
  LCD_clrScr();
 80018f8:	f000 f884 	bl	8001a04 <LCD_clrScr>
  lcd.inverttext = false;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <LCD_init+0x68>)
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	200003b0 	.word	0x200003b0
 800190c:	200001b4 	.word	0x200001b4

08001910 <LCD_invertText>:
/*
 * @brief Invert the colour of any text sent to the display
 * @param mode: true = inverted / false = normal
 */
void LCD_invertText(bool mode)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	71fb      	strb	r3, [r7, #7]
  if(mode == true)
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d004      	beq.n	800192a <LCD_invertText+0x1a>
  {
    lcd.inverttext = true;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <LCD_invertText+0x2c>)
 8001922:	2201      	movs	r2, #1
 8001924:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
  }
  else
  {
    lcd.inverttext = false;
  }
}
 8001928:	e003      	b.n	8001932 <LCD_invertText+0x22>
    lcd.inverttext = false;
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <LCD_invertText+0x2c>)
 800192c:	2200      	movs	r2, #0
 800192e:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
}
 8001932:	bf00      	nop
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	200001b4 	.word	0x200001b4

08001940 <LCD_putChar>:
/*
 * @brief Puts one char on the current position of LCD's cursor
 * @param c: char to be printed
 */
void LCD_putChar(char c)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
  for(int i = 0; i < 6; i++)
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	e02d      	b.n	80019ac <LCD_putChar+0x6c>
  {
    if(lcd.inverttext != true)
 8001950:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <LCD_putChar+0x7c>)
 8001952:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 8001956:	f083 0301 	eor.w	r3, r3, #1
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d010      	beq.n	8001982 <LCD_putChar+0x42>
      LCD_write(ASCII[c - 0x20][i], LCD_DATA);
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	f1a3 0220 	sub.w	r2, r3, #32
 8001966:	4916      	ldr	r1, [pc, #88]	; (80019c0 <LCD_putChar+0x80>)
 8001968:	4613      	mov	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	4413      	add	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	18ca      	adds	r2, r1, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4413      	add	r3, r2
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2101      	movs	r1, #1
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff48 	bl	8001810 <LCD_write>
 8001980:	e011      	b.n	80019a6 <LCD_putChar+0x66>
    else
      LCD_write(~(ASCII[c - 0x20][i]), LCD_DATA);
 8001982:	79fb      	ldrb	r3, [r7, #7]
 8001984:	f1a3 0220 	sub.w	r2, r3, #32
 8001988:	490d      	ldr	r1, [pc, #52]	; (80019c0 <LCD_putChar+0x80>)
 800198a:	4613      	mov	r3, r2
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	4413      	add	r3, r2
 8001990:	005b      	lsls	r3, r3, #1
 8001992:	18ca      	adds	r2, r1, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	4413      	add	r3, r2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	43db      	mvns	r3, r3
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2101      	movs	r1, #1
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff35 	bl	8001810 <LCD_write>
  for(int i = 0; i < 6; i++)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3301      	adds	r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	ddce      	ble.n	8001950 <LCD_putChar+0x10>
  }
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	200001b4 	.word	0x200001b4
 80019c0:	08005ed8 	.word	0x08005ed8

080019c4 <LCD_print>:
 * @brief Print a string on the LCD
 * @param x: starting point on the x-axis (column)
 * @param y: starting point on the y-axis (line)
 */
void LCD_print(char *str, uint8_t x, uint8_t y)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
 80019d0:	4613      	mov	r3, r2
 80019d2:	70bb      	strb	r3, [r7, #2]
  LCD_goXY(x, y);
 80019d4:	78ba      	ldrb	r2, [r7, #2]
 80019d6:	78fb      	ldrb	r3, [r7, #3]
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f000 f830 	bl	8001a40 <LCD_goXY>

  while(*str)
 80019e0:	e006      	b.n	80019f0 <LCD_print+0x2c>
  {
    LCD_putChar(*str++);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	1c5a      	adds	r2, r3, #1
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ffa8 	bl	8001940 <LCD_putChar>
  while(*str)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f4      	bne.n	80019e2 <LCD_print+0x1e>
  }
}
 80019f8:	bf00      	nop
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <LCD_clrScr>:

/*
 * @brief Clear the screen
 */
void LCD_clrScr()
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
  for(int i = 0; i < 504; i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	e00b      	b.n	8001a28 <LCD_clrScr+0x24>
  {
    LCD_write(0x00, LCD_DATA);
 8001a10:	2101      	movs	r1, #1
 8001a12:	2000      	movs	r0, #0
 8001a14:	f7ff fefc 	bl	8001810 <LCD_write>
    lcd.buffer[i] = 0;
 8001a18:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <LCD_clrScr+0x38>)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2200      	movs	r2, #0
 8001a20:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i < 504; i++)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3301      	adds	r3, #1
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001a2e:	dbef      	blt.n	8001a10 <LCD_clrScr+0xc>
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200001b4 	.word	0x200001b4

08001a40 <LCD_goXY>:
 * @brief Set LCD's cursor to position X,Y
 * @param x: position on the x-axis (column)
 * @param y: position on the y-axis (line)
 */
void LCD_goXY(uint8_t x, uint8_t y)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	460a      	mov	r2, r1
 8001a4a:	71fb      	strb	r3, [r7, #7]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	71bb      	strb	r3, [r7, #6]
  LCD_write(0x80 | x, LCD_COMMAND); //Column.
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff fed8 	bl	8001810 <LCD_write>
  LCD_write(0x40 | y, LCD_COMMAND); //Row.
 8001a60:	79bb      	ldrb	r3, [r7, #6]
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fed0 	bl	8001810 <LCD_write>
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a7e:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_MspInit+0x5c>)
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <HAL_MspInit+0x5c>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <HAL_MspInit+0x5c>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b0f      	ldr	r3, [pc, #60]	; (8001ad4 <HAL_MspInit+0x5c>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ad4 <HAL_MspInit+0x5c>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <HAL_MspInit+0x5c>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_MspInit+0x60>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <HAL_MspInit+0x60>)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	40010000 	.word	0x40010000

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0d      	ldr	r2, [pc, #52]	; (8001b20 <HAL_TIM_Base_MspInit+0x44>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d113      	bne.n	8001b16 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_TIM_Base_MspInit+0x48>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <HAL_TIM_Base_MspInit+0x48>)
 8001af4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af8:	6193      	str	r3, [r2, #24]
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_TIM_Base_MspInit+0x48>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2100      	movs	r1, #0
 8001b0a:	2019      	movs	r0, #25
 8001b0c:	f000 fc33 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b10:	2019      	movs	r0, #25
 8001b12:	f000 fc4c 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b16:	bf00      	nop
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40021000 	.word	0x40021000

08001b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 0318 	add.w	r3, r7, #24
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a3f      	ldr	r2, [pc, #252]	; (8001c40 <HAL_UART_MspInit+0x118>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d13a      	bne.n	8001bbe <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b48:	4b3e      	ldr	r3, [pc, #248]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a3d      	ldr	r2, [pc, #244]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b60:	4b38      	ldr	r3, [pc, #224]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	4a37      	ldr	r2, [pc, #220]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001b66:	f043 0304 	orr.w	r3, r3, #4
 8001b6a:	6193      	str	r3, [r2, #24]
 8001b6c:	4b35      	ldr	r3, [pc, #212]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b82:	2303      	movs	r3, #3
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b86:	f107 0318 	add.w	r3, r7, #24
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	482e      	ldr	r0, [pc, #184]	; (8001c48 <HAL_UART_MspInit+0x120>)
 8001b8e:	f000 fcdf 	bl	8002550 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0318 	add.w	r3, r7, #24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4828      	ldr	r0, [pc, #160]	; (8001c48 <HAL_UART_MspInit+0x120>)
 8001ba8:	f000 fcd2 	bl	8002550 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2100      	movs	r1, #0
 8001bb0:	2025      	movs	r0, #37	; 0x25
 8001bb2:	f000 fbe0 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001bb6:	2025      	movs	r0, #37	; 0x25
 8001bb8:	f000 fbf9 	bl	80023ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bbc:	e03c      	b.n	8001c38 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a22      	ldr	r2, [pc, #136]	; (8001c4c <HAL_UART_MspInit+0x124>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d137      	bne.n	8001c38 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001bca:	69db      	ldr	r3, [r3, #28]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd2:	61d3      	str	r3, [r2, #28]
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001bd6:	69db      	ldr	r3, [r3, #28]
 8001bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_UART_MspInit+0x11c>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bf8:	2304      	movs	r3, #4
 8001bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0318 	add.w	r3, r7, #24
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480f      	ldr	r0, [pc, #60]	; (8001c48 <HAL_UART_MspInit+0x120>)
 8001c0c:	f000 fca0 	bl	8002550 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c10:	2308      	movs	r3, #8
 8001c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0318 	add.w	r3, r7, #24
 8001c20:	4619      	mov	r1, r3
 8001c22:	4809      	ldr	r0, [pc, #36]	; (8001c48 <HAL_UART_MspInit+0x120>)
 8001c24:	f000 fc94 	bl	8002550 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2026      	movs	r0, #38	; 0x26
 8001c2e:	f000 fba2 	bl	8002376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c32:	2026      	movs	r0, #38	; 0x26
 8001c34:	f000 fbbb 	bl	80023ae <HAL_NVIC_EnableIRQ>
}
 8001c38:	bf00      	nop
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40013800 	.word	0x40013800
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010800 	.word	0x40010800
 8001c4c:	40004400 	.word	0x40004400

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c96:	f000 fa41 	bl	800211c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <TIM1_UP_IRQHandler+0x10>)
 8001ca6:	f001 fadb 	bl	8003260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000090 	.word	0x20000090

08001cb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  if(((huart1.Instance->SR & USART_SR_RXNE) != RESET) && ((huart1.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <USART1_IRQHandler+0x64>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0320 	and.w	r3, r3, #32
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d022      	beq.n	8001d0e <USART1_IRQHandler+0x5a>
 8001cc8:	4b13      	ldr	r3, [pc, #76]	; (8001d18 <USART1_IRQHandler+0x64>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d01b      	beq.n	8001d0e <USART1_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart1.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <USART1_IRQHandler+0x64>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_index_t i = (uint16_t)(gsm_rx_buffer_head + 1) % GSM_RX_BUFFER_SIZE;
 8001cde:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <USART1_IRQHandler+0x68>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cec:	71bb      	strb	r3, [r7, #6]

		if(i != gsm_rx_buffer_tail)
 8001cee:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <USART1_IRQHandler+0x6c>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	79ba      	ldrb	r2, [r7, #6]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d009      	beq.n	8001d0e <USART1_IRQHandler+0x5a>
		{
			gsm_rx_buffer[gsm_rx_buffer_head] = rbyte;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <USART1_IRQHandler+0x68>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	4619      	mov	r1, r3
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <USART1_IRQHandler+0x70>)
 8001d04:	79fb      	ldrb	r3, [r7, #7]
 8001d06:	5453      	strb	r3, [r2, r1]
			gsm_rx_buffer_head = i;
 8001d08:	4a04      	ldr	r2, [pc, #16]	; (8001d1c <USART1_IRQHandler+0x68>)
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	7013      	strb	r3, [r2, #0]
		}
	}

	return;
 8001d0e:	bf00      	nop
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	200000d8 	.word	0x200000d8
 8001d1c:	200003dc 	.word	0x200003dc
 8001d20:	200003dd 	.word	0x200003dd
 8001d24:	200003e0 	.word	0x200003e0

08001d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  if(((huart2.Instance->SR & USART_SR_RXNE) != RESET) && ((huart2.Instance->CR1 & USART_CR1_RXNEIE) != RESET))
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <USART2_IRQHandler+0x68>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0320 	and.w	r3, r3, #32
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d022      	beq.n	8001d82 <USART2_IRQHandler+0x5a>
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <USART2_IRQHandler+0x68>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	f003 0320 	and.w	r3, r3, #32
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01b      	beq.n	8001d82 <USART2_IRQHandler+0x5a>
	{
		uint8_t rbyte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF); // читает байт из регистра
 8001d4a:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <USART2_IRQHandler+0x68>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_index_t i = (uint16_t)(dbg_rx_buffer_head + 1) % DBG_RX_BUFFER_SIZE;
 8001d52:	4b10      	ldr	r3, [pc, #64]	; (8001d94 <USART2_IRQHandler+0x6c>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d60:	71bb      	strb	r3, [r7, #6]

		if(i != dbg_rx_buffer_tail)
 8001d62:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <USART2_IRQHandler+0x70>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	79ba      	ldrb	r2, [r7, #6]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d009      	beq.n	8001d82 <USART2_IRQHandler+0x5a>
		{
			dbg_rx_buffer[dbg_rx_buffer_head] = rbyte;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <USART2_IRQHandler+0x6c>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	4619      	mov	r1, r3
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <USART2_IRQHandler+0x74>)
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	5453      	strb	r3, [r2, r1]
			dbg_rx_buffer_head = i;
 8001d7c:	4a05      	ldr	r2, [pc, #20]	; (8001d94 <USART2_IRQHandler+0x6c>)
 8001d7e:	79bb      	ldrb	r3, [r7, #6]
 8001d80:	7013      	strb	r3, [r2, #0]
		}
	}

	return
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d82:	4803      	ldr	r0, [pc, #12]	; (8001d90 <USART2_IRQHandler+0x68>)
 8001d84:	f001 fe8c 	bl	8003aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000120 	.word	0x20000120
 8001d94:	20000420 	.word	0x20000420
 8001d98:	20000421 	.word	0x20000421
 8001d9c:	20000424 	.word	0x20000424

08001da0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return 1;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bc80      	pop	{r7}
 8001dac:	4770      	bx	lr

08001dae <_kill>:

int _kill(int pid, int sig)
{
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b082      	sub	sp, #8
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
 8001db6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001db8:	f002 fe42 	bl	8004a40 <__errno>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2216      	movs	r2, #22
 8001dc0:	601a      	str	r2, [r3, #0]
  return -1;
 8001dc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <_exit>:

void _exit (int status)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dd6:	f04f 31ff 	mov.w	r1, #4294967295
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff ffe7 	bl	8001dae <_kill>
  while (1) {}    /* Make sure we hang here */
 8001de0:	e7fe      	b.n	8001de0 <_exit+0x12>

08001de2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	60f8      	str	r0, [r7, #12]
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e00a      	b.n	8001e0a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001df4:	f3af 8000 	nop.w
 8001df8:	4601      	mov	r1, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	60ba      	str	r2, [r7, #8]
 8001e00:	b2ca      	uxtb	r2, r1
 8001e02:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	3301      	adds	r3, #1
 8001e08:	617b      	str	r3, [r7, #20]
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	dbf0      	blt.n	8001df4 <_read+0x12>
  }

  return len;
 8001e12:	687b      	ldr	r3, [r7, #4]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3718      	adds	r7, #24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b086      	sub	sp, #24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	e009      	b.n	8001e42 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	60ba      	str	r2, [r7, #8]
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbf1      	blt.n	8001e2e <_write+0x12>
  }
  return len;
 8001e4a:	687b      	ldr	r3, [r7, #4]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_close>:

int _close(int file)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bc80      	pop	{r7}
 8001e68:	4770      	bx	lr

08001e6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	b083      	sub	sp, #12
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
 8001e72:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e7a:	605a      	str	r2, [r3, #4]
  return 0;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bc80      	pop	{r7}
 8001e86:	4770      	bx	lr

08001e88 <_isatty>:

int _isatty(int file)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ebc:	4a14      	ldr	r2, [pc, #80]	; (8001f10 <_sbrk+0x5c>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <_sbrk+0x60>)
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec8:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <_sbrk+0x64>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d102      	bne.n	8001ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <_sbrk+0x64>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <_sbrk+0x68>)
 8001ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <_sbrk+0x64>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4413      	add	r3, r2
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d207      	bcs.n	8001ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee4:	f002 fdac 	bl	8004a40 <__errno>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	220c      	movs	r2, #12
 8001eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef2:	e009      	b.n	8001f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef4:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001efa:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <_sbrk+0x64>)
 8001f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f06:	68fb      	ldr	r3, [r7, #12]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3718      	adds	r7, #24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20002800 	.word	0x20002800
 8001f14:	00000400 	.word	0x00000400
 8001f18:	200003d8 	.word	0x200003d8
 8001f1c:	200005b8 	.word	0x200005b8

08001f20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f24:	bf00      	nop
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bc80      	pop	{r7}
 8001f2a:	4770      	bx	lr

08001f2c <gsm_available>:
volatile gsm_rx_buffer_index_t gsm_rx_buffer_head = 0;
volatile gsm_rx_buffer_index_t gsm_rx_buffer_tail = 0;
uint8_t gsm_rx_buffer[GSM_RX_BUFFER_SIZE] = {0,};

int16_t gsm_available(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
	return ((uint16_t)(GSM_RX_BUFFER_SIZE + gsm_rx_buffer_head - gsm_rx_buffer_tail)) % GSM_RX_BUFFER_SIZE;
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <gsm_available+0x2c>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <gsm_available+0x30>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3340      	adds	r3, #64	; 0x40
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f4e:	b21b      	sxth	r3, r3
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr
 8001f58:	200003dc 	.word	0x200003dc
 8001f5c:	200003dd 	.word	0x200003dd

08001f60 <gsm_read>:

int16_t gsm_read(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
	if(gsm_rx_buffer_head == gsm_rx_buffer_tail)
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <gsm_read+0x4c>)
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <gsm_read+0x50>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d102      	bne.n	8001f7c <gsm_read+0x1c>
	{
		return -1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	e012      	b.n	8001fa2 <gsm_read+0x42>
	}
	else
	{
		unsigned char c = gsm_rx_buffer[gsm_rx_buffer_tail];
 8001f7c:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <gsm_read+0x50>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <gsm_read+0x54>)
 8001f86:	5c9b      	ldrb	r3, [r3, r2]
 8001f88:	71fb      	strb	r3, [r7, #7]
		gsm_rx_buffer_tail = (gsm_rx_buffer_index_t)(gsm_rx_buffer_tail + 1) % GSM_RX_BUFFER_SIZE;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	; (8001fb0 <gsm_read+0x50>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	3301      	adds	r3, #1
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <gsm_read+0x50>)
 8001f9c:	701a      	strb	r2, [r3, #0]
		return c;
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	b21b      	sxth	r3, r3
	}
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr
 8001fac:	200003dc 	.word	0x200003dc
 8001fb0:	200003dd 	.word	0x200003dd
 8001fb4:	200003e0 	.word	0x200003e0

08001fb8 <dbg_available>:
volatile dbg_rx_buffer_index_t dbg_rx_buffer_head = 0;
volatile dbg_rx_buffer_index_t dbg_rx_buffer_tail = 0;
uint8_t dbg_rx_buffer[DBG_RX_BUFFER_SIZE] = {0,};

int16_t dbg_available(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
	return ((uint16_t)(DBG_RX_BUFFER_SIZE + dbg_rx_buffer_head - dbg_rx_buffer_tail)) % DBG_RX_BUFFER_SIZE;
 8001fbc:	4b09      	ldr	r3, [pc, #36]	; (8001fe4 <dbg_available+0x2c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	b29a      	uxth	r2, r3
 8001fc4:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <dbg_available+0x30>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	3340      	adds	r3, #64	; 0x40
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fda:	b21b      	sxth	r3, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr
 8001fe4:	20000420 	.word	0x20000420
 8001fe8:	20000421 	.word	0x20000421

08001fec <dbg_read>:

int16_t dbg_read(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
	if(dbg_rx_buffer_head == dbg_rx_buffer_tail)
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <dbg_read+0x4c>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	b2da      	uxtb	r2, r3
 8001ff8:	4b10      	ldr	r3, [pc, #64]	; (800203c <dbg_read+0x50>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d102      	bne.n	8002008 <dbg_read+0x1c>
	{
		return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
 8002006:	e012      	b.n	800202e <dbg_read+0x42>
	}
	else
	{
		uint8_t c = dbg_rx_buffer[dbg_rx_buffer_tail];
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <dbg_read+0x50>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	461a      	mov	r2, r3
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <dbg_read+0x54>)
 8002012:	5c9b      	ldrb	r3, [r3, r2]
 8002014:	71fb      	strb	r3, [r7, #7]
		dbg_rx_buffer_tail = (dbg_rx_buffer_index_t)(dbg_rx_buffer_tail + 1) % DBG_RX_BUFFER_SIZE;
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <dbg_read+0x50>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	b2db      	uxtb	r3, r3
 8002020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4b05      	ldr	r3, [pc, #20]	; (800203c <dbg_read+0x50>)
 8002028:	701a      	strb	r2, [r3, #0]
		return c;
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	b21b      	sxth	r3, r3
	}
}
 800202e:	4618      	mov	r0, r3
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	20000420 	.word	0x20000420
 800203c:	20000421 	.word	0x20000421
 8002040:	20000424 	.word	0x20000424

08002044 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002044:	f7ff ff6c 	bl	8001f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002048:	480b      	ldr	r0, [pc, #44]	; (8002078 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <LoopFillZerobss+0x16>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a09      	ldr	r2, [pc, #36]	; (8002084 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002060:	4c09      	ldr	r4, [pc, #36]	; (8002088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f002 fced 	bl	8004a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002072:	f7fe fe61 	bl	8000d38 <main>
  bx lr
 8002076:	4770      	bx	lr
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002080:	0800632c 	.word	0x0800632c
  ldr r2, =_sbss
 8002084:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002088:	200005b4 	.word	0x200005b4

0800208c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC1_2_IRQHandler>
	...

08002090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002094:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_Init+0x28>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a07      	ldr	r2, [pc, #28]	; (80020b8 <HAL_Init+0x28>)
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a0:	2003      	movs	r0, #3
 80020a2:	f000 f95d 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a6:	200f      	movs	r0, #15
 80020a8:	f000 f808 	bl	80020bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020ac:	f7ff fce4 	bl	8001a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40022000 	.word	0x40022000

080020bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x54>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_InitTick+0x58>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4619      	mov	r1, r3
 80020ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f979 	bl	80023d2 <HAL_SYSTICK_Config>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00e      	b.n	8002108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b0f      	cmp	r3, #15
 80020ee:	d80a      	bhi.n	8002106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f0:	2200      	movs	r2, #0
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f000 f93d 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020fc:	4a06      	ldr	r2, [pc, #24]	; (8002118 <HAL_InitTick+0x5c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
}
 8002108:	4618      	mov	r0, r3
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000004 	.word	0x20000004
 8002114:	2000000c 	.word	0x2000000c
 8002118:	20000008 	.word	0x20000008

0800211c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <HAL_IncTick+0x1c>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_IncTick+0x20>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4413      	add	r3, r2
 800212c:	4a03      	ldr	r2, [pc, #12]	; (800213c <HAL_IncTick+0x20>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr
 8002138:	2000000c 	.word	0x2000000c
 800213c:	20000464 	.word	0x20000464

08002140 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b02      	ldr	r3, [pc, #8]	; (8002150 <HAL_GetTick+0x10>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	20000464 	.word	0x20000464

08002154 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800215c:	f7ff fff0 	bl	8002140 <HAL_GetTick>
 8002160:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216c:	d005      	beq.n	800217a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800216e:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <HAL_Delay+0x44>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	4413      	add	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800217a:	bf00      	nop
 800217c:	f7ff ffe0 	bl	8002140 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	429a      	cmp	r2, r3
 800218a:	d8f7      	bhi.n	800217c <HAL_Delay+0x28>
  {
  }
}
 800218c:	bf00      	nop
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	2000000c 	.word	0x2000000c

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ce:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	60d3      	str	r3, [r2, #12]
}
 80021d4:	bf00      	nop
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220e:	2b00      	cmp	r3, #0
 8002210:	db0b      	blt.n	800222a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	f003 021f 	and.w	r2, r3, #31
 8002218:	4906      	ldr	r1, [pc, #24]	; (8002234 <__NVIC_EnableIRQ+0x34>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	2001      	movs	r0, #1
 8002222:	fa00 f202 	lsl.w	r2, r0, r2
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222a:	bf00      	nop
 800222c:	370c      	adds	r7, #12
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002248:	2b00      	cmp	r3, #0
 800224a:	db0a      	blt.n	8002262 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	b2da      	uxtb	r2, r3
 8002250:	490c      	ldr	r1, [pc, #48]	; (8002284 <__NVIC_SetPriority+0x4c>)
 8002252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002256:	0112      	lsls	r2, r2, #4
 8002258:	b2d2      	uxtb	r2, r2
 800225a:	440b      	add	r3, r1
 800225c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002260:	e00a      	b.n	8002278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	b2da      	uxtb	r2, r3
 8002266:	4908      	ldr	r1, [pc, #32]	; (8002288 <__NVIC_SetPriority+0x50>)
 8002268:	79fb      	ldrb	r3, [r7, #7]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3b04      	subs	r3, #4
 8002270:	0112      	lsls	r2, r2, #4
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	440b      	add	r3, r1
 8002276:	761a      	strb	r2, [r3, #24]
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800228c:	b480      	push	{r7}
 800228e:	b089      	sub	sp, #36	; 0x24
 8002290:	af00      	add	r7, sp, #0
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f1c3 0307 	rsb	r3, r3, #7
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	bf28      	it	cs
 80022aa:	2304      	movcs	r3, #4
 80022ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	3304      	adds	r3, #4
 80022b2:	2b06      	cmp	r3, #6
 80022b4:	d902      	bls.n	80022bc <NVIC_EncodePriority+0x30>
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3b03      	subs	r3, #3
 80022ba:	e000      	b.n	80022be <NVIC_EncodePriority+0x32>
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c0:	f04f 32ff 	mov.w	r2, #4294967295
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43da      	mvns	r2, r3
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	401a      	ands	r2, r3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022d4:	f04f 31ff 	mov.w	r1, #4294967295
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	fa01 f303 	lsl.w	r3, r1, r3
 80022de:	43d9      	mvns	r1, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e4:	4313      	orrs	r3, r2
         );
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3724      	adds	r7, #36	; 0x24
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022f4:	f3bf 8f4f 	dsb	sy
}
 80022f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80022fa:	4b06      	ldr	r3, [pc, #24]	; (8002314 <__NVIC_SystemReset+0x24>)
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002302:	4904      	ldr	r1, [pc, #16]	; (8002314 <__NVIC_SystemReset+0x24>)
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <__NVIC_SystemReset+0x28>)
 8002306:	4313      	orrs	r3, r2
 8002308:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800230a:	f3bf 8f4f 	dsb	sy
}
 800230e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <__NVIC_SystemReset+0x20>
 8002314:	e000ed00 	.word	0xe000ed00
 8002318:	05fa0004 	.word	0x05fa0004

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff7a 	bl	8002238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff17 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff2c 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff7a 	bl	800228c <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff49 	bl	8002238 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff1f 	bl	8002200 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80023ce:	f7ff ff8f 	bl	80022f0 <__NVIC_SystemReset>

080023d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff ff9e 	bl	800231c <SysTick_Config>
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023ea:	b480      	push	{r7}
 80023ec:	b085      	sub	sp, #20
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d008      	beq.n	8002414 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2204      	movs	r2, #4
 8002406:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e020      	b.n	8002456 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 020e 	bic.w	r2, r2, #14
 8002422:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243c:	2101      	movs	r1, #1
 800243e:	fa01 f202 	lsl.w	r2, r1, r2
 8002442:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	bc80      	pop	{r7}
 800245e:	4770      	bx	lr

08002460 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d005      	beq.n	8002484 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2204      	movs	r2, #4
 800247c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
 8002482:	e051      	b.n	8002528 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 020e 	bic.w	r2, r2, #14
 8002492:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a22      	ldr	r2, [pc, #136]	; (8002534 <HAL_DMA_Abort_IT+0xd4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d029      	beq.n	8002502 <HAL_DMA_Abort_IT+0xa2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a21      	ldr	r2, [pc, #132]	; (8002538 <HAL_DMA_Abort_IT+0xd8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_DMA_Abort_IT+0x9e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1f      	ldr	r2, [pc, #124]	; (800253c <HAL_DMA_Abort_IT+0xdc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01a      	beq.n	80024f8 <HAL_DMA_Abort_IT+0x98>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <HAL_DMA_Abort_IT+0xe0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d012      	beq.n	80024f2 <HAL_DMA_Abort_IT+0x92>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <HAL_DMA_Abort_IT+0xe4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d00a      	beq.n	80024ec <HAL_DMA_Abort_IT+0x8c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1b      	ldr	r2, [pc, #108]	; (8002548 <HAL_DMA_Abort_IT+0xe8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d102      	bne.n	80024e6 <HAL_DMA_Abort_IT+0x86>
 80024e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e4:	e00e      	b.n	8002504 <HAL_DMA_Abort_IT+0xa4>
 80024e6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024ea:	e00b      	b.n	8002504 <HAL_DMA_Abort_IT+0xa4>
 80024ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80024f0:	e008      	b.n	8002504 <HAL_DMA_Abort_IT+0xa4>
 80024f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f6:	e005      	b.n	8002504 <HAL_DMA_Abort_IT+0xa4>
 80024f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fc:	e002      	b.n	8002504 <HAL_DMA_Abort_IT+0xa4>
 80024fe:	2310      	movs	r3, #16
 8002500:	e000      	b.n	8002504 <HAL_DMA_Abort_IT+0xa4>
 8002502:	2301      	movs	r3, #1
 8002504:	4a11      	ldr	r2, [pc, #68]	; (800254c <HAL_DMA_Abort_IT+0xec>)
 8002506:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251c:	2b00      	cmp	r3, #0
 800251e:	d003      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4798      	blx	r3
    } 
  }
  return status;
 8002528:	7bfb      	ldrb	r3, [r7, #15]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40020008 	.word	0x40020008
 8002538:	4002001c 	.word	0x4002001c
 800253c:	40020030 	.word	0x40020030
 8002540:	40020044 	.word	0x40020044
 8002544:	40020058 	.word	0x40020058
 8002548:	4002006c 	.word	0x4002006c
 800254c:	40020000 	.word	0x40020000

08002550 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002550:	b480      	push	{r7}
 8002552:	b08b      	sub	sp, #44	; 0x2c
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800255a:	2300      	movs	r3, #0
 800255c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800255e:	2300      	movs	r3, #0
 8002560:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002562:	e161      	b.n	8002828 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002564:	2201      	movs	r2, #1
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	69fa      	ldr	r2, [r7, #28]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	429a      	cmp	r2, r3
 800257e:	f040 8150 	bne.w	8002822 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a97      	ldr	r2, [pc, #604]	; (80027e4 <HAL_GPIO_Init+0x294>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d05e      	beq.n	800264a <HAL_GPIO_Init+0xfa>
 800258c:	4a95      	ldr	r2, [pc, #596]	; (80027e4 <HAL_GPIO_Init+0x294>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d875      	bhi.n	800267e <HAL_GPIO_Init+0x12e>
 8002592:	4a95      	ldr	r2, [pc, #596]	; (80027e8 <HAL_GPIO_Init+0x298>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d058      	beq.n	800264a <HAL_GPIO_Init+0xfa>
 8002598:	4a93      	ldr	r2, [pc, #588]	; (80027e8 <HAL_GPIO_Init+0x298>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d86f      	bhi.n	800267e <HAL_GPIO_Init+0x12e>
 800259e:	4a93      	ldr	r2, [pc, #588]	; (80027ec <HAL_GPIO_Init+0x29c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d052      	beq.n	800264a <HAL_GPIO_Init+0xfa>
 80025a4:	4a91      	ldr	r2, [pc, #580]	; (80027ec <HAL_GPIO_Init+0x29c>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d869      	bhi.n	800267e <HAL_GPIO_Init+0x12e>
 80025aa:	4a91      	ldr	r2, [pc, #580]	; (80027f0 <HAL_GPIO_Init+0x2a0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d04c      	beq.n	800264a <HAL_GPIO_Init+0xfa>
 80025b0:	4a8f      	ldr	r2, [pc, #572]	; (80027f0 <HAL_GPIO_Init+0x2a0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d863      	bhi.n	800267e <HAL_GPIO_Init+0x12e>
 80025b6:	4a8f      	ldr	r2, [pc, #572]	; (80027f4 <HAL_GPIO_Init+0x2a4>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d046      	beq.n	800264a <HAL_GPIO_Init+0xfa>
 80025bc:	4a8d      	ldr	r2, [pc, #564]	; (80027f4 <HAL_GPIO_Init+0x2a4>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d85d      	bhi.n	800267e <HAL_GPIO_Init+0x12e>
 80025c2:	2b12      	cmp	r3, #18
 80025c4:	d82a      	bhi.n	800261c <HAL_GPIO_Init+0xcc>
 80025c6:	2b12      	cmp	r3, #18
 80025c8:	d859      	bhi.n	800267e <HAL_GPIO_Init+0x12e>
 80025ca:	a201      	add	r2, pc, #4	; (adr r2, 80025d0 <HAL_GPIO_Init+0x80>)
 80025cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025d0:	0800264b 	.word	0x0800264b
 80025d4:	08002625 	.word	0x08002625
 80025d8:	08002637 	.word	0x08002637
 80025dc:	08002679 	.word	0x08002679
 80025e0:	0800267f 	.word	0x0800267f
 80025e4:	0800267f 	.word	0x0800267f
 80025e8:	0800267f 	.word	0x0800267f
 80025ec:	0800267f 	.word	0x0800267f
 80025f0:	0800267f 	.word	0x0800267f
 80025f4:	0800267f 	.word	0x0800267f
 80025f8:	0800267f 	.word	0x0800267f
 80025fc:	0800267f 	.word	0x0800267f
 8002600:	0800267f 	.word	0x0800267f
 8002604:	0800267f 	.word	0x0800267f
 8002608:	0800267f 	.word	0x0800267f
 800260c:	0800267f 	.word	0x0800267f
 8002610:	0800267f 	.word	0x0800267f
 8002614:	0800262d 	.word	0x0800262d
 8002618:	08002641 	.word	0x08002641
 800261c:	4a76      	ldr	r2, [pc, #472]	; (80027f8 <HAL_GPIO_Init+0x2a8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d013      	beq.n	800264a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002622:	e02c      	b.n	800267e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	623b      	str	r3, [r7, #32]
          break;
 800262a:	e029      	b.n	8002680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	3304      	adds	r3, #4
 8002632:	623b      	str	r3, [r7, #32]
          break;
 8002634:	e024      	b.n	8002680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	3308      	adds	r3, #8
 800263c:	623b      	str	r3, [r7, #32]
          break;
 800263e:	e01f      	b.n	8002680 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	330c      	adds	r3, #12
 8002646:	623b      	str	r3, [r7, #32]
          break;
 8002648:	e01a      	b.n	8002680 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d102      	bne.n	8002658 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002652:	2304      	movs	r3, #4
 8002654:	623b      	str	r3, [r7, #32]
          break;
 8002656:	e013      	b.n	8002680 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d105      	bne.n	800266c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002660:	2308      	movs	r3, #8
 8002662:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69fa      	ldr	r2, [r7, #28]
 8002668:	611a      	str	r2, [r3, #16]
          break;
 800266a:	e009      	b.n	8002680 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800266c:	2308      	movs	r3, #8
 800266e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	615a      	str	r2, [r3, #20]
          break;
 8002676:	e003      	b.n	8002680 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002678:	2300      	movs	r3, #0
 800267a:	623b      	str	r3, [r7, #32]
          break;
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x130>
          break;
 800267e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2bff      	cmp	r3, #255	; 0xff
 8002684:	d801      	bhi.n	800268a <HAL_GPIO_Init+0x13a>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	e001      	b.n	800268e <HAL_GPIO_Init+0x13e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	2bff      	cmp	r3, #255	; 0xff
 8002694:	d802      	bhi.n	800269c <HAL_GPIO_Init+0x14c>
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	e002      	b.n	80026a2 <HAL_GPIO_Init+0x152>
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	3b08      	subs	r3, #8
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	210f      	movs	r1, #15
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	fa01 f303 	lsl.w	r3, r1, r3
 80026b0:	43db      	mvns	r3, r3
 80026b2:	401a      	ands	r2, r3
 80026b4:	6a39      	ldr	r1, [r7, #32]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	431a      	orrs	r2, r3
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	f000 80a9 	beq.w	8002822 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026d0:	4b4a      	ldr	r3, [pc, #296]	; (80027fc <HAL_GPIO_Init+0x2ac>)
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	4a49      	ldr	r2, [pc, #292]	; (80027fc <HAL_GPIO_Init+0x2ac>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6193      	str	r3, [r2, #24]
 80026dc:	4b47      	ldr	r3, [pc, #284]	; (80027fc <HAL_GPIO_Init+0x2ac>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026e8:	4a45      	ldr	r2, [pc, #276]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	089b      	lsrs	r3, r3, #2
 80026ee:	3302      	adds	r3, #2
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	f003 0303 	and.w	r3, r3, #3
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	220f      	movs	r2, #15
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	68fa      	ldr	r2, [r7, #12]
 8002708:	4013      	ands	r3, r2
 800270a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a3d      	ldr	r2, [pc, #244]	; (8002804 <HAL_GPIO_Init+0x2b4>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00d      	beq.n	8002730 <HAL_GPIO_Init+0x1e0>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3c      	ldr	r2, [pc, #240]	; (8002808 <HAL_GPIO_Init+0x2b8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d007      	beq.n	800272c <HAL_GPIO_Init+0x1dc>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a3b      	ldr	r2, [pc, #236]	; (800280c <HAL_GPIO_Init+0x2bc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d101      	bne.n	8002728 <HAL_GPIO_Init+0x1d8>
 8002724:	2302      	movs	r3, #2
 8002726:	e004      	b.n	8002732 <HAL_GPIO_Init+0x1e2>
 8002728:	2303      	movs	r3, #3
 800272a:	e002      	b.n	8002732 <HAL_GPIO_Init+0x1e2>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_GPIO_Init+0x1e2>
 8002730:	2300      	movs	r3, #0
 8002732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002734:	f002 0203 	and.w	r2, r2, #3
 8002738:	0092      	lsls	r2, r2, #2
 800273a:	4093      	lsls	r3, r2
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002742:	492f      	ldr	r1, [pc, #188]	; (8002800 <HAL_GPIO_Init+0x2b0>)
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	089b      	lsrs	r3, r3, #2
 8002748:	3302      	adds	r3, #2
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800275c:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	492b      	ldr	r1, [pc, #172]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
 8002768:	e006      	b.n	8002778 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800276a:	4b29      	ldr	r3, [pc, #164]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 800276c:	689a      	ldr	r2, [r3, #8]
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	43db      	mvns	r3, r3
 8002772:	4927      	ldr	r1, [pc, #156]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 8002774:	4013      	ands	r3, r2
 8002776:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d006      	beq.n	8002792 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002784:	4b22      	ldr	r3, [pc, #136]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	4921      	ldr	r1, [pc, #132]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
 8002790:	e006      	b.n	80027a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002792:	4b1f      	ldr	r3, [pc, #124]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	43db      	mvns	r3, r3
 800279a:	491d      	ldr	r1, [pc, #116]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 800279c:	4013      	ands	r3, r2
 800279e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d006      	beq.n	80027ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027ac:	4b18      	ldr	r3, [pc, #96]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	4917      	ldr	r1, [pc, #92]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
 80027b8:	e006      	b.n	80027c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	4913      	ldr	r1, [pc, #76]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01f      	beq.n	8002814 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027d4:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	490d      	ldr	r1, [pc, #52]	; (8002810 <HAL_GPIO_Init+0x2c0>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	600b      	str	r3, [r1, #0]
 80027e0:	e01f      	b.n	8002822 <HAL_GPIO_Init+0x2d2>
 80027e2:	bf00      	nop
 80027e4:	10320000 	.word	0x10320000
 80027e8:	10310000 	.word	0x10310000
 80027ec:	10220000 	.word	0x10220000
 80027f0:	10210000 	.word	0x10210000
 80027f4:	10120000 	.word	0x10120000
 80027f8:	10110000 	.word	0x10110000
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010000 	.word	0x40010000
 8002804:	40010800 	.word	0x40010800
 8002808:	40010c00 	.word	0x40010c00
 800280c:	40011000 	.word	0x40011000
 8002810:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <HAL_GPIO_Init+0x2f4>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	43db      	mvns	r3, r3
 800281c:	4909      	ldr	r1, [pc, #36]	; (8002844 <HAL_GPIO_Init+0x2f4>)
 800281e:	4013      	ands	r3, r2
 8002820:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002824:	3301      	adds	r3, #1
 8002826:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282e:	fa22 f303 	lsr.w	r3, r2, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	f47f ae96 	bne.w	8002564 <HAL_GPIO_Init+0x14>
  }
}
 8002838:	bf00      	nop
 800283a:	bf00      	nop
 800283c:	372c      	adds	r7, #44	; 0x2c
 800283e:	46bd      	mov	sp, r7
 8002840:	bc80      	pop	{r7}
 8002842:	4770      	bx	lr
 8002844:	40010400 	.word	0x40010400

08002848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	460b      	mov	r3, r1
 8002852:	807b      	strh	r3, [r7, #2]
 8002854:	4613      	mov	r3, r2
 8002856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800285e:	887a      	ldrh	r2, [r7, #2]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002864:	e003      	b.n	800286e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002866:	887b      	ldrh	r3, [r7, #2]
 8002868:	041a      	lsls	r2, r3, #16
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	611a      	str	r2, [r3, #16]
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800288a:	887a      	ldrh	r2, [r7, #2]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	041a      	lsls	r2, r3, #16
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	43d9      	mvns	r1, r3
 8002896:	887b      	ldrh	r3, [r7, #2]
 8002898:	400b      	ands	r3, r1
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	611a      	str	r2, [r3, #16]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
	...

080028ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d101      	bne.n	80028be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e272      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 8087 	beq.w	80029da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028cc:	4b92      	ldr	r3, [pc, #584]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 030c 	and.w	r3, r3, #12
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d00c      	beq.n	80028f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028d8:	4b8f      	ldr	r3, [pc, #572]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d112      	bne.n	800290a <HAL_RCC_OscConfig+0x5e>
 80028e4:	4b8c      	ldr	r3, [pc, #560]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f0:	d10b      	bne.n	800290a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f2:	4b89      	ldr	r3, [pc, #548]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d06c      	beq.n	80029d8 <HAL_RCC_OscConfig+0x12c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d168      	bne.n	80029d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e24c      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002912:	d106      	bne.n	8002922 <HAL_RCC_OscConfig+0x76>
 8002914:	4b80      	ldr	r3, [pc, #512]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a7f      	ldr	r2, [pc, #508]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 800291a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291e:	6013      	str	r3, [r2, #0]
 8002920:	e02e      	b.n	8002980 <HAL_RCC_OscConfig+0xd4>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x98>
 800292a:	4b7b      	ldr	r3, [pc, #492]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a7a      	ldr	r2, [pc, #488]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002930:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	4b78      	ldr	r3, [pc, #480]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a77      	ldr	r2, [pc, #476]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 800293c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002940:	6013      	str	r3, [r2, #0]
 8002942:	e01d      	b.n	8002980 <HAL_RCC_OscConfig+0xd4>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800294c:	d10c      	bne.n	8002968 <HAL_RCC_OscConfig+0xbc>
 800294e:	4b72      	ldr	r3, [pc, #456]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a71      	ldr	r2, [pc, #452]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002958:	6013      	str	r3, [r2, #0]
 800295a:	4b6f      	ldr	r3, [pc, #444]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6e      	ldr	r2, [pc, #440]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002964:	6013      	str	r3, [r2, #0]
 8002966:	e00b      	b.n	8002980 <HAL_RCC_OscConfig+0xd4>
 8002968:	4b6b      	ldr	r3, [pc, #428]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a6a      	ldr	r2, [pc, #424]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 800296e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b68      	ldr	r3, [pc, #416]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a67      	ldr	r2, [pc, #412]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 800297a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7ff fbda 	bl	8002140 <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002990:	f7ff fbd6 	bl	8002140 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b64      	cmp	r3, #100	; 0x64
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e200      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a2:	4b5d      	ldr	r3, [pc, #372]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d0f0      	beq.n	8002990 <HAL_RCC_OscConfig+0xe4>
 80029ae:	e014      	b.n	80029da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b0:	f7ff fbc6 	bl	8002140 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b8:	f7ff fbc2 	bl	8002140 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b64      	cmp	r3, #100	; 0x64
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1ec      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ca:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x10c>
 80029d6:	e000      	b.n	80029da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d063      	beq.n	8002aae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e6:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029f2:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 030c 	and.w	r3, r3, #12
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d11c      	bne.n	8002a38 <HAL_RCC_OscConfig+0x18c>
 80029fe:	4b46      	ldr	r3, [pc, #280]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d116      	bne.n	8002a38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0a:	4b43      	ldr	r3, [pc, #268]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d005      	beq.n	8002a22 <HAL_RCC_OscConfig+0x176>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e1c0      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4939      	ldr	r1, [pc, #228]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a36:	e03a      	b.n	8002aae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d020      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a40:	4b36      	ldr	r3, [pc, #216]	; (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a46:	f7ff fb7b 	bl	8002140 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4e:	f7ff fb77 	bl	8002140 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e1a1      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a60:	4b2d      	ldr	r3, [pc, #180]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6c:	4b2a      	ldr	r3, [pc, #168]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	00db      	lsls	r3, r3, #3
 8002a7a:	4927      	ldr	r1, [pc, #156]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	600b      	str	r3, [r1, #0]
 8002a80:	e015      	b.n	8002aae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a82:	4b26      	ldr	r3, [pc, #152]	; (8002b1c <HAL_RCC_OscConfig+0x270>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff fb5a 	bl	8002140 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a90:	f7ff fb56 	bl	8002140 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e180      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa2:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d1f0      	bne.n	8002a90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03a      	beq.n	8002b30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d019      	beq.n	8002af6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ac2:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7ff fb3a 	bl	8002140 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad0:	f7ff fb36 	bl	8002140 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e160      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ae2:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <HAL_RCC_OscConfig+0x26c>)
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f003 0302 	and.w	r3, r3, #2
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d0f0      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002aee:	2001      	movs	r0, #1
 8002af0:	f000 face 	bl	8003090 <RCC_Delay>
 8002af4:	e01c      	b.n	8002b30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_OscConfig+0x274>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7ff fb20 	bl	8002140 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b02:	e00f      	b.n	8002b24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b04:	f7ff fb1c 	bl	8002140 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d908      	bls.n	8002b24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e146      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	42420000 	.word	0x42420000
 8002b20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b24:	4b92      	ldr	r3, [pc, #584]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1e9      	bne.n	8002b04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80a6 	beq.w	8002c8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	4a87      	ldr	r2, [pc, #540]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	61d3      	str	r3, [r2, #28]
 8002b5a:	4b85      	ldr	r3, [pc, #532]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	69db      	ldr	r3, [r3, #28]
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6a:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <HAL_RCC_OscConfig+0x4c8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b76:	4b7f      	ldr	r3, [pc, #508]	; (8002d74 <HAL_RCC_OscConfig+0x4c8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7e      	ldr	r2, [pc, #504]	; (8002d74 <HAL_RCC_OscConfig+0x4c8>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7ff fadd 	bl	8002140 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7ff fad9 	bl	8002140 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b64      	cmp	r3, #100	; 0x64
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e103      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x4c8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x312>
 8002bb0:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6213      	str	r3, [r2, #32]
 8002bbc:	e02d      	b.n	8002c1a <HAL_RCC_OscConfig+0x36e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x334>
 8002bc6:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	6213      	str	r3, [r2, #32]
 8002bd2:	4b67      	ldr	r3, [pc, #412]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	4a66      	ldr	r2, [pc, #408]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	6213      	str	r3, [r2, #32]
 8002bde:	e01c      	b.n	8002c1a <HAL_RCC_OscConfig+0x36e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x356>
 8002be8:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	4a60      	ldr	r2, [pc, #384]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bee:	f043 0304 	orr.w	r3, r3, #4
 8002bf2:	6213      	str	r3, [r2, #32]
 8002bf4:	4b5e      	ldr	r3, [pc, #376]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bf6:	6a1b      	ldr	r3, [r3, #32]
 8002bf8:	4a5d      	ldr	r2, [pc, #372]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6213      	str	r3, [r2, #32]
 8002c00:	e00b      	b.n	8002c1a <HAL_RCC_OscConfig+0x36e>
 8002c02:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4a5a      	ldr	r2, [pc, #360]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6213      	str	r3, [r2, #32]
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	4a57      	ldr	r2, [pc, #348]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d015      	beq.n	8002c4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c22:	f7ff fa8d 	bl	8002140 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7ff fa89 	bl	8002140 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0b1      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ee      	beq.n	8002c2a <HAL_RCC_OscConfig+0x37e>
 8002c4c:	e014      	b.n	8002c78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c4e:	f7ff fa77 	bl	8002140 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7ff fa73 	bl	8002140 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e09b      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c6e:	6a1b      	ldr	r3, [r3, #32]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ee      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7e:	4b3c      	ldr	r3, [pc, #240]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 8087 	beq.w	8002da2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d061      	beq.n	8002d64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d146      	bne.n	8002d36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	4b33      	ldr	r3, [pc, #204]	; (8002d78 <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cae:	f7ff fa47 	bl	8002140 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb6:	f7ff fa43 	bl	8002140 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e06d      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cc8:	4b29      	ldr	r3, [pc, #164]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1f0      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cde:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	4921      	ldr	r1, [pc, #132]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf0:	4b1f      	ldr	r3, [pc, #124]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a19      	ldr	r1, [r3, #32]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	430b      	orrs	r3, r1
 8002d02:	491b      	ldr	r1, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0e:	f7ff fa17 	bl	8002140 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d14:	e008      	b.n	8002d28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d16:	f7ff fa13 	bl	8002140 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e03d      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0f0      	beq.n	8002d16 <HAL_RCC_OscConfig+0x46a>
 8002d34:	e035      	b.n	8002da2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <HAL_RCC_OscConfig+0x4cc>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7ff fa00 	bl	8002140 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d44:	f7ff f9fc 	bl	8002140 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e026      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_OscConfig+0x4c4>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0x498>
 8002d62:	e01e      	b.n	8002da2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	69db      	ldr	r3, [r3, #28]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e019      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40007000 	.word	0x40007000
 8002d78:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d7c:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <HAL_RCC_OscConfig+0x500>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d001      	beq.n	8002da2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e000      	b.n	8002da4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40021000 	.word	0x40021000

08002db0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e0d0      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002dc4:	4b6a      	ldr	r3, [pc, #424]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d910      	bls.n	8002df4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd2:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f023 0207 	bic.w	r2, r3, #7
 8002dda:	4965      	ldr	r1, [pc, #404]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	683a      	ldr	r2, [r7, #0]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d001      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d020      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e0c:	4b59      	ldr	r3, [pc, #356]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a58      	ldr	r2, [pc, #352]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e24:	4b53      	ldr	r3, [pc, #332]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4a52      	ldr	r2, [pc, #328]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	494d      	ldr	r1, [pc, #308]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d040      	beq.n	8002ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d115      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e07f      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e6e:	4b41      	ldr	r3, [pc, #260]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e073      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e7e:	4b3d      	ldr	r3, [pc, #244]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e06b      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e8e:	4b39      	ldr	r3, [pc, #228]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4936      	ldr	r1, [pc, #216]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea0:	f7ff f94e 	bl	8002140 <HAL_GetTick>
 8002ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea6:	e00a      	b.n	8002ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea8:	f7ff f94a 	bl	8002140 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e053      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ebe:	4b2d      	ldr	r3, [pc, #180]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f003 020c 	and.w	r2, r3, #12
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d1eb      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b27      	ldr	r3, [pc, #156]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d210      	bcs.n	8002f00 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b24      	ldr	r3, [pc, #144]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 0207 	bic.w	r2, r3, #7
 8002ee6:	4922      	ldr	r1, [pc, #136]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e032      	b.n	8002f66 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d008      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f0c:	4b19      	ldr	r3, [pc, #100]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	4916      	ldr	r1, [pc, #88]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d009      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	490e      	ldr	r1, [pc, #56]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f3e:	f000 f821 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_RCC_ClockConfig+0x1c4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	f003 030f 	and.w	r3, r3, #15
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_RCC_ClockConfig+0x1c8>)
 8002f50:	5ccb      	ldrb	r3, [r1, r3]
 8002f52:	fa22 f303 	lsr.w	r3, r2, r3
 8002f56:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <HAL_RCC_ClockConfig+0x1cc>)
 8002f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_RCC_ClockConfig+0x1d0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7ff f8ac 	bl	80020bc <HAL_InitTick>

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40022000 	.word	0x40022000
 8002f74:	40021000 	.word	0x40021000
 8002f78:	08006118 	.word	0x08006118
 8002f7c:	20000004 	.word	0x20000004
 8002f80:	20000008 	.word	0x20000008

08002f84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b087      	sub	sp, #28
 8002f88:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60bb      	str	r3, [r7, #8]
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	2300      	movs	r3, #0
 8002f98:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f9e:	4b1e      	ldr	r3, [pc, #120]	; (8003018 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d002      	beq.n	8002fb4 <HAL_RCC_GetSysClockFreq+0x30>
 8002fae:	2b08      	cmp	r3, #8
 8002fb0:	d003      	beq.n	8002fba <HAL_RCC_GetSysClockFreq+0x36>
 8002fb2:	e027      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <HAL_RCC_GetSysClockFreq+0x98>)
 8002fb6:	613b      	str	r3, [r7, #16]
      break;
 8002fb8:	e027      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	0c9b      	lsrs	r3, r3, #18
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	4a17      	ldr	r2, [pc, #92]	; (8003020 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002fc4:	5cd3      	ldrb	r3, [r2, r3]
 8002fc6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fd2:	4b11      	ldr	r3, [pc, #68]	; (8003018 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	0c5b      	lsrs	r3, r3, #17
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	4a11      	ldr	r2, [pc, #68]	; (8003024 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <HAL_RCC_GetSysClockFreq+0x98>)
 8002fe6:	fb03 f202 	mul.w	r2, r3, r2
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e004      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a0c      	ldr	r2, [pc, #48]	; (8003028 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ff8:	fb02 f303 	mul.w	r3, r2, r3
 8002ffc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	613b      	str	r3, [r7, #16]
      break;
 8003002:	e002      	b.n	800300a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <HAL_RCC_GetSysClockFreq+0x98>)
 8003006:	613b      	str	r3, [r7, #16]
      break;
 8003008:	bf00      	nop
    }
  }
  return sysclockfreq;
 800300a:	693b      	ldr	r3, [r7, #16]
}
 800300c:	4618      	mov	r0, r3
 800300e:	371c      	adds	r7, #28
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000
 800301c:	007a1200 	.word	0x007a1200
 8003020:	08006130 	.word	0x08006130
 8003024:	08006140 	.word	0x08006140
 8003028:	003d0900 	.word	0x003d0900

0800302c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b02      	ldr	r3, [pc, #8]	; (800303c <HAL_RCC_GetHCLKFreq+0x10>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr
 800303c:	20000004 	.word	0x20000004

08003040 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003044:	f7ff fff2 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003048:	4602      	mov	r2, r0
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetPCLK1Freq+0x20>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	4903      	ldr	r1, [pc, #12]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003056:	5ccb      	ldrb	r3, [r1, r3]
 8003058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800305c:	4618      	mov	r0, r3
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40021000 	.word	0x40021000
 8003064:	08006128 	.word	0x08006128

08003068 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800306c:	f7ff ffde 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003070:	4602      	mov	r2, r0
 8003072:	4b05      	ldr	r3, [pc, #20]	; (8003088 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	0adb      	lsrs	r3, r3, #11
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	4903      	ldr	r1, [pc, #12]	; (800308c <HAL_RCC_GetPCLK2Freq+0x24>)
 800307e:	5ccb      	ldrb	r3, [r1, r3]
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40021000 	.word	0x40021000
 800308c:	08006128 	.word	0x08006128

08003090 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003098:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <RCC_Delay+0x34>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0a      	ldr	r2, [pc, #40]	; (80030c8 <RCC_Delay+0x38>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0a5b      	lsrs	r3, r3, #9
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	fb02 f303 	mul.w	r3, r2, r3
 80030aa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80030ac:	bf00      	nop
  }
  while (Delay --);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	60fa      	str	r2, [r7, #12]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1f9      	bne.n	80030ac <RCC_Delay+0x1c>
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	20000004 	.word	0x20000004
 80030c8:	10624dd3 	.word	0x10624dd3

080030cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e041      	b.n	8003162 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d106      	bne.n	80030f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f7fe fcf2 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3304      	adds	r3, #4
 8003108:	4619      	mov	r1, r3
 800310a:	4610      	mov	r0, r2
 800310c:	f000 fa9c 	bl	8003648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003160:	2300      	movs	r3, #0
}
 8003162:	4618      	mov	r0, r3
 8003164:	3708      	adds	r7, #8
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b01      	cmp	r3, #1
 800317e:	d001      	beq.n	8003184 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e035      	b.n	80031f0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a16      	ldr	r2, [pc, #88]	; (80031fc <HAL_TIM_Base_Start_IT+0x90>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d009      	beq.n	80031ba <HAL_TIM_Base_Start_IT+0x4e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d004      	beq.n	80031ba <HAL_TIM_Base_Start_IT+0x4e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a12      	ldr	r2, [pc, #72]	; (8003200 <HAL_TIM_Base_Start_IT+0x94>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d111      	bne.n	80031de <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2b06      	cmp	r3, #6
 80031ca:	d010      	beq.n	80031ee <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0201 	orr.w	r2, r2, #1
 80031da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031dc:	e007      	b.n	80031ee <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400

08003204 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f022 0201 	bic.w	r2, r2, #1
 800321a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6a1a      	ldr	r2, [r3, #32]
 8003222:	f241 1311 	movw	r3, #4369	; 0x1111
 8003226:	4013      	ands	r3, r2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10f      	bne.n	800324c <HAL_TIM_Base_Stop_IT+0x48>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a1a      	ldr	r2, [r3, #32]
 8003232:	f240 4344 	movw	r3, #1092	; 0x444
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d107      	bne.n	800324c <HAL_TIM_Base_Stop_IT+0x48>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b02      	cmp	r3, #2
 8003274:	d122      	bne.n	80032bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b02      	cmp	r3, #2
 8003282:	d11b      	bne.n	80032bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f06f 0202 	mvn.w	r2, #2
 800328c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f9b4 	bl	8003610 <HAL_TIM_IC_CaptureCallback>
 80032a8:	e005      	b.n	80032b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 f9a7 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f000 f9b6 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	d122      	bne.n	8003310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d11b      	bne.n	8003310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f06f 0204 	mvn.w	r2, #4
 80032e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2202      	movs	r2, #2
 80032e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 f98a 	bl	8003610 <HAL_TIM_IC_CaptureCallback>
 80032fc:	e005      	b.n	800330a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f97d 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f98c 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d122      	bne.n	8003364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d11b      	bne.n	8003364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0208 	mvn.w	r2, #8
 8003334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2204      	movs	r2, #4
 800333a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d003      	beq.n	8003352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f960 	bl	8003610 <HAL_TIM_IC_CaptureCallback>
 8003350:	e005      	b.n	800335e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f953 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f000 f962 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	f003 0310 	and.w	r3, r3, #16
 800336e:	2b10      	cmp	r3, #16
 8003370:	d122      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b10      	cmp	r3, #16
 800337e:	d11b      	bne.n	80033b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f06f 0210 	mvn.w	r2, #16
 8003388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2208      	movs	r2, #8
 800338e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f936 	bl	8003610 <HAL_TIM_IC_CaptureCallback>
 80033a4:	e005      	b.n	80033b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f929 	bl	80035fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f938 	bl	8003622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d10e      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0201 	mvn.w	r2, #1
 80033dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd fbae 	bl	8000b40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ee:	2b80      	cmp	r3, #128	; 0x80
 80033f0:	d10e      	bne.n	8003410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b80      	cmp	r3, #128	; 0x80
 80033fe:	d107      	bne.n	8003410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 fa6b 	bl	80038e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b40      	cmp	r3, #64	; 0x40
 800341c:	d10e      	bne.n	800343c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d107      	bne.n	800343c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8fc 	bl	8003634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	2b20      	cmp	r3, #32
 8003448:	d10e      	bne.n	8003468 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b20      	cmp	r3, #32
 8003456:	d107      	bne.n	8003468 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f06f 0220 	mvn.w	r2, #32
 8003460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa36 	bl	80038d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003468:	bf00      	nop
 800346a:	3708      	adds	r7, #8
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003484:	2b01      	cmp	r3, #1
 8003486:	d101      	bne.n	800348c <HAL_TIM_ConfigClockSource+0x1c>
 8003488:	2302      	movs	r3, #2
 800348a:	e0b4      	b.n	80035f6 <HAL_TIM_ConfigClockSource+0x186>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c4:	d03e      	beq.n	8003544 <HAL_TIM_ConfigClockSource+0xd4>
 80034c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034ca:	f200 8087 	bhi.w	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	f000 8086 	beq.w	80035e2 <HAL_TIM_ConfigClockSource+0x172>
 80034d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034da:	d87f      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034dc:	2b70      	cmp	r3, #112	; 0x70
 80034de:	d01a      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0xa6>
 80034e0:	2b70      	cmp	r3, #112	; 0x70
 80034e2:	d87b      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034e4:	2b60      	cmp	r3, #96	; 0x60
 80034e6:	d050      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x11a>
 80034e8:	2b60      	cmp	r3, #96	; 0x60
 80034ea:	d877      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034ec:	2b50      	cmp	r3, #80	; 0x50
 80034ee:	d03c      	beq.n	800356a <HAL_TIM_ConfigClockSource+0xfa>
 80034f0:	2b50      	cmp	r3, #80	; 0x50
 80034f2:	d873      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034f4:	2b40      	cmp	r3, #64	; 0x40
 80034f6:	d058      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x13a>
 80034f8:	2b40      	cmp	r3, #64	; 0x40
 80034fa:	d86f      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 80034fc:	2b30      	cmp	r3, #48	; 0x30
 80034fe:	d064      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x15a>
 8003500:	2b30      	cmp	r3, #48	; 0x30
 8003502:	d86b      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 8003504:	2b20      	cmp	r3, #32
 8003506:	d060      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x15a>
 8003508:	2b20      	cmp	r3, #32
 800350a:	d867      	bhi.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05c      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x15a>
 8003510:	2b10      	cmp	r3, #16
 8003512:	d05a      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x15a>
 8003514:	e062      	b.n	80035dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003526:	f000 f95e 	bl	80037e6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	609a      	str	r2, [r3, #8]
      break;
 8003542:	e04f      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003554:	f000 f947 	bl	80037e6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003566:	609a      	str	r2, [r3, #8]
      break;
 8003568:	e03c      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003576:	461a      	mov	r2, r3
 8003578:	f000 f8be 	bl	80036f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2150      	movs	r1, #80	; 0x50
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f915 	bl	80037b2 <TIM_ITRx_SetConfig>
      break;
 8003588:	e02c      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003596:	461a      	mov	r2, r3
 8003598:	f000 f8dc 	bl	8003754 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2160      	movs	r1, #96	; 0x60
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f905 	bl	80037b2 <TIM_ITRx_SetConfig>
      break;
 80035a8:	e01c      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	461a      	mov	r2, r3
 80035b8:	f000 f89e 	bl	80036f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2140      	movs	r1, #64	; 0x40
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 f8f5 	bl	80037b2 <TIM_ITRx_SetConfig>
      break;
 80035c8:	e00c      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f000 f8ec 	bl	80037b2 <TIM_ITRx_SetConfig>
      break;
 80035da:	e003      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	73fb      	strb	r3, [r7, #15]
      break;
 80035e0:	e000      	b.n	80035e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	bc80      	pop	{r7}
 8003644:	4770      	bx	lr
	...

08003648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <TIM_Base_SetConfig+0xa8>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d007      	beq.n	8003670 <TIM_Base_SetConfig+0x28>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003666:	d003      	beq.n	8003670 <TIM_Base_SetConfig+0x28>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a22      	ldr	r2, [pc, #136]	; (80036f4 <TIM_Base_SetConfig+0xac>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d108      	bne.n	8003682 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003676:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a1a      	ldr	r2, [pc, #104]	; (80036f0 <TIM_Base_SetConfig+0xa8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_Base_SetConfig+0x52>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003690:	d003      	beq.n	800369a <TIM_Base_SetConfig+0x52>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <TIM_Base_SetConfig+0xac>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d108      	bne.n	80036ac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a07      	ldr	r2, [pc, #28]	; (80036f0 <TIM_Base_SetConfig+0xa8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d103      	bne.n	80036e0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	615a      	str	r2, [r3, #20]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bc80      	pop	{r7}
 80036ee:	4770      	bx	lr
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40000400 	.word	0x40000400

080036f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	f023 0201 	bic.w	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f023 030a 	bic.w	r3, r3, #10
 8003734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4313      	orrs	r3, r2
 800373c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f023 0210 	bic.w	r2, r3, #16
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800377e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	031b      	lsls	r3, r3, #12
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003790:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4313      	orrs	r3, r2
 800379a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	621a      	str	r2, [r3, #32]
}
 80037a8:	bf00      	nop
 80037aa:	371c      	adds	r7, #28
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b085      	sub	sp, #20
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	f043 0307 	orr.w	r3, r3, #7
 80037d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	609a      	str	r2, [r3, #8]
}
 80037dc:	bf00      	nop
 80037de:	3714      	adds	r7, #20
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc80      	pop	{r7}
 80037e4:	4770      	bx	lr

080037e6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b087      	sub	sp, #28
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
 80037f2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003800:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	021a      	lsls	r2, r3, #8
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	431a      	orrs	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4313      	orrs	r3, r2
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	4313      	orrs	r3, r2
 8003812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	609a      	str	r2, [r3, #8]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	bc80      	pop	{r7}
 8003822:	4770      	bx	lr

08003824 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003838:	2302      	movs	r3, #2
 800383a:	e041      	b.n	80038c0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a14      	ldr	r2, [pc, #80]	; (80038cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d009      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003888:	d004      	beq.n	8003894 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a10      	ldr	r2, [pc, #64]	; (80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d10c      	bne.n	80038ae <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2201      	movs	r2, #1
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bc80      	pop	{r7}
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40000400 	.word	0x40000400

080038d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bc80      	pop	{r7}
 80038e4:	4770      	bx	lr

080038e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80038e6:	b480      	push	{r7}
 80038e8:	b083      	sub	sp, #12
 80038ea:	af00      	add	r7, sp, #0
 80038ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc80      	pop	{r7}
 80038f6:	4770      	bx	lr

080038f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e042      	b.n	8003990 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fe f902 	bl	8001b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800393a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 fd71 	bl	8004424 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003950:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003960:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68da      	ldr	r2, [r3, #12]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003970:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	; 0x28
 800399c:	af02      	add	r7, sp, #8
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	603b      	str	r3, [r7, #0]
 80039a4:	4613      	mov	r3, r2
 80039a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b20      	cmp	r3, #32
 80039b6:	d16d      	bne.n	8003a94 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_UART_Transmit+0x2c>
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e066      	b.n	8003a96 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2221      	movs	r2, #33	; 0x21
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80039d6:	f7fe fbb3 	bl	8002140 <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	88fa      	ldrh	r2, [r7, #6]
 80039e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	88fa      	ldrh	r2, [r7, #6]
 80039e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f0:	d108      	bne.n	8003a04 <HAL_UART_Transmit+0x6c>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d104      	bne.n	8003a04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	61bb      	str	r3, [r7, #24]
 8003a02:	e003      	b.n	8003a0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a0c:	e02a      	b.n	8003a64 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2200      	movs	r2, #0
 8003a16:	2180      	movs	r1, #128	; 0x80
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 faf9 	bl	8004010 <UART_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e036      	b.n	8003a96 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d10b      	bne.n	8003a46 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	3302      	adds	r3, #2
 8003a42:	61bb      	str	r3, [r7, #24]
 8003a44:	e007      	b.n	8003a56 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	3301      	adds	r3, #1
 8003a54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1cf      	bne.n	8003a0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	2200      	movs	r2, #0
 8003a76:	2140      	movs	r1, #64	; 0x40
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 fac9 	bl	8004010 <UART_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e006      	b.n	8003a96 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	e000      	b.n	8003a96 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a94:	2302      	movs	r3, #2
  }
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3720      	adds	r7, #32
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
	...

08003aa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b0ba      	sub	sp, #232	; 0xe8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003ade:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10f      	bne.n	8003b06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d009      	beq.n	8003b06 <HAL_UART_IRQHandler+0x66>
 8003af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af6:	f003 0320 	and.w	r3, r3, #32
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fbd1 	bl	80042a6 <UART_Receive_IT>
      return;
 8003b04:	e25b      	b.n	8003fbe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 80de 	beq.w	8003ccc <HAL_UART_IRQHandler+0x22c>
 8003b10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b20:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80d1 	beq.w	8003ccc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <HAL_UART_IRQHandler+0xae>
 8003b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f043 0201 	orr.w	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00b      	beq.n	8003b72 <HAL_UART_IRQHandler+0xd2>
 8003b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d005      	beq.n	8003b72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6a:	f043 0202 	orr.w	r2, r3, #2
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00b      	beq.n	8003b96 <HAL_UART_IRQHandler+0xf6>
 8003b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0204 	orr.w	r2, r3, #4
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d011      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x126>
 8003ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d105      	bne.n	8003bba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003bae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d005      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bbe:	f043 0208 	orr.w	r2, r3, #8
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f000 81f2 	beq.w	8003fb4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_UART_IRQHandler+0x14e>
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d002      	beq.n	8003bee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f000 fb5c 	bl	80042a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	bf14      	ite	ne
 8003bfc:	2301      	movne	r3, #1
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <HAL_UART_IRQHandler+0x17a>
 8003c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d04f      	beq.n	8003cba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa66 	bl	80040ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d041      	beq.n	8003cb2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3314      	adds	r3, #20
 8003c34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c3c:	e853 3f00 	ldrex	r3, [r3]
 8003c40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c44:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c4c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3314      	adds	r3, #20
 8003c56:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c5a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003c5e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003c66:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c6a:	e841 2300 	strex	r3, r2, [r1]
 8003c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1d9      	bne.n	8003c2e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d013      	beq.n	8003caa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c86:	4a7e      	ldr	r2, [pc, #504]	; (8003e80 <HAL_UART_IRQHandler+0x3e0>)
 8003c88:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fbe6 	bl	8002460 <HAL_DMA_Abort_IT>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d016      	beq.n	8003cc8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca8:	e00e      	b.n	8003cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 f99c 	bl	8003fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb0:	e00a      	b.n	8003cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f998 	bl	8003fe8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cb8:	e006      	b.n	8003cc8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f994 	bl	8003fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003cc6:	e175      	b.n	8003fb4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc8:	bf00      	nop
    return;
 8003cca:	e173      	b.n	8003fb4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 814f 	bne.w	8003f74 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cda:	f003 0310 	and.w	r3, r3, #16
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	f000 8148 	beq.w	8003f74 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 8141 	beq.w	8003f74 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	f000 80b6 	beq.w	8003e84 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 8145 	beq.w	8003fb8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d36:	429a      	cmp	r2, r3
 8003d38:	f080 813e 	bcs.w	8003fb8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d42:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	f000 8088 	beq.w	8003e60 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d5e:	e853 3f00 	ldrex	r3, [r3]
 8003d62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003d66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d7c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d84:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d88:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1d9      	bne.n	8003d50 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003dac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003dae:	f023 0301 	bic.w	r3, r3, #1
 8003db2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3314      	adds	r3, #20
 8003dbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003dc0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003dc4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003dc8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e1      	bne.n	8003d9c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	3314      	adds	r3, #20
 8003dde:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003de2:	e853 3f00 	ldrex	r3, [r3]
 8003de6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	3314      	adds	r3, #20
 8003df8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003dfc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003dfe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e04:	e841 2300 	strex	r3, r2, [r1]
 8003e08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1e3      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2220      	movs	r2, #32
 8003e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	330c      	adds	r3, #12
 8003e24:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e30:	f023 0310 	bic.w	r3, r3, #16
 8003e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	330c      	adds	r3, #12
 8003e3e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003e42:	65ba      	str	r2, [r7, #88]	; 0x58
 8003e44:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e3      	bne.n	8003e1e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fac5 	bl	80023ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	4619      	mov	r1, r3
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f8bf 	bl	8003ffa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e7c:	e09c      	b.n	8003fb8 <HAL_UART_IRQHandler+0x518>
 8003e7e:	bf00      	nop
 8003e80:	080041b1 	.word	0x080041b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 808e 	beq.w	8003fbc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8089 	beq.w	8003fbc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	330c      	adds	r3, #12
 8003eb0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ebc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	330c      	adds	r3, #12
 8003eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003ece:	647a      	str	r2, [r7, #68]	; 0x44
 8003ed0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ed4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ed6:	e841 2300 	strex	r3, r2, [r1]
 8003eda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003edc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d1e3      	bne.n	8003eaa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eec:	e853 3f00 	ldrex	r3, [r3]
 8003ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3314      	adds	r3, #20
 8003f02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f06:	633a      	str	r2, [r7, #48]	; 0x30
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e3      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0310 	bic.w	r3, r3, #16
 8003f3e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	330c      	adds	r3, #12
 8003f48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003f4c:	61fa      	str	r2, [r7, #28]
 8003f4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	69b9      	ldr	r1, [r7, #24]
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	617b      	str	r3, [r7, #20]
   return(result);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e3      	bne.n	8003f28 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f66:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	f000 f844 	bl	8003ffa <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f72:	e023      	b.n	8003fbc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <HAL_UART_IRQHandler+0x4f4>
 8003f80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f923 	bl	80041d8 <UART_Transmit_IT>
    return;
 8003f92:	e014      	b.n	8003fbe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <HAL_UART_IRQHandler+0x51e>
 8003fa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 f962 	bl	8004276 <UART_EndTransmit_IT>
    return;
 8003fb2:	e004      	b.n	8003fbe <HAL_UART_IRQHandler+0x51e>
    return;
 8003fb4:	bf00      	nop
 8003fb6:	e002      	b.n	8003fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8003fb8:	bf00      	nop
 8003fba:	e000      	b.n	8003fbe <HAL_UART_IRQHandler+0x51e>
      return;
 8003fbc:	bf00      	nop
  }
}
 8003fbe:	37e8      	adds	r7, #232	; 0xe8
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003fcc:	bf00      	nop
 8003fce:	370c      	adds	r7, #12
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bc80      	pop	{r7}
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bc80      	pop	{r7}
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bc80      	pop	{r7}
 8003ff8:	4770      	bx	lr

08003ffa <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	460b      	mov	r3, r1
 8004004:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b090      	sub	sp, #64	; 0x40
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	4613      	mov	r3, r2
 800401e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004020:	e050      	b.n	80040c4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d04c      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800402a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800402c:	2b00      	cmp	r3, #0
 800402e:	d007      	beq.n	8004040 <UART_WaitOnFlagUntilTimeout+0x30>
 8004030:	f7fe f886 	bl	8002140 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800403c:	429a      	cmp	r2, r3
 800403e:	d241      	bcs.n	80040c4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004060:	637a      	str	r2, [r7, #52]	; 0x34
 8004062:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800406e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e5      	bne.n	8004040 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	3314      	adds	r3, #20
 800407a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	e853 3f00 	ldrex	r3, [r3]
 8004082:	613b      	str	r3, [r7, #16]
   return(result);
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	63bb      	str	r3, [r7, #56]	; 0x38
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004094:	623a      	str	r2, [r7, #32]
 8004096:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004098:	69f9      	ldr	r1, [r7, #28]
 800409a:	6a3a      	ldr	r2, [r7, #32]
 800409c:	e841 2300 	strex	r3, r2, [r1]
 80040a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d1e5      	bne.n	8004074 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e00f      	b.n	80040e4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	4013      	ands	r3, r2
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	bf0c      	ite	eq
 80040d4:	2301      	moveq	r3, #1
 80040d6:	2300      	movne	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	79fb      	ldrb	r3, [r7, #7]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d09f      	beq.n	8004022 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3740      	adds	r7, #64	; 0x40
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b095      	sub	sp, #84	; 0x54
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fe:	e853 3f00 	ldrex	r3, [r3]
 8004102:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800410a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004114:	643a      	str	r2, [r7, #64]	; 0x40
 8004116:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004118:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800411a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800411c:	e841 2300 	strex	r3, r2, [r1]
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1e5      	bne.n	80040f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	61fb      	str	r3, [r7, #28]
   return(result);
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f023 0301 	bic.w	r3, r3, #1
 800413e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3314      	adds	r3, #20
 8004146:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004148:	62fa      	str	r2, [r7, #44]	; 0x2c
 800414a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800414e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e5      	bne.n	8004128 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	2b01      	cmp	r3, #1
 8004162:	d119      	bne.n	8004198 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	60bb      	str	r3, [r7, #8]
   return(result);
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f023 0310 	bic.w	r3, r3, #16
 800417a:	647b      	str	r3, [r7, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004184:	61ba      	str	r2, [r7, #24]
 8004186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6979      	ldr	r1, [r7, #20]
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	613b      	str	r3, [r7, #16]
   return(result);
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80041a6:	bf00      	nop
 80041a8:	3754      	adds	r7, #84	; 0x54
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff ff0c 	bl	8003fe8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b21      	cmp	r3, #33	; 0x21
 80041ea:	d13e      	bne.n	800426a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f4:	d114      	bne.n	8004220 <UART_Transmit_IT+0x48>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d110      	bne.n	8004220 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	461a      	mov	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004212:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	1c9a      	adds	r2, r3, #2
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	621a      	str	r2, [r3, #32]
 800421e:	e008      	b.n	8004232 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	1c59      	adds	r1, r3, #1
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	6211      	str	r1, [r2, #32]
 800422a:	781a      	ldrb	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004236:	b29b      	uxth	r3, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	b29b      	uxth	r3, r3
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	4619      	mov	r1, r3
 8004240:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004254:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004264:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	e000      	b.n	800426c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800426a:	2302      	movs	r3, #2
  }
}
 800426c:	4618      	mov	r0, r3
 800426e:	3714      	adds	r7, #20
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004276:	b580      	push	{r7, lr}
 8004278:	b082      	sub	sp, #8
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68da      	ldr	r2, [r3, #12]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7ff fe94 	bl	8003fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3708      	adds	r7, #8
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b08c      	sub	sp, #48	; 0x30
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b22      	cmp	r3, #34	; 0x22
 80042b8:	f040 80ae 	bne.w	8004418 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042c4:	d117      	bne.n	80042f6 <UART_Receive_IT+0x50>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d113      	bne.n	80042f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	1c9a      	adds	r2, r3, #2
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	629a      	str	r2, [r3, #40]	; 0x28
 80042f4:	e026      	b.n	8004344 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004308:	d007      	beq.n	800431a <UART_Receive_IT+0x74>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <UART_Receive_IT+0x82>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e008      	b.n	800433a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	b2db      	uxtb	r3, r3
 8004330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004334:	b2da      	uxtb	r2, r3
 8004336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004338:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004348:	b29b      	uxth	r3, r3
 800434a:	3b01      	subs	r3, #1
 800434c:	b29b      	uxth	r3, r3
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4619      	mov	r1, r3
 8004352:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004354:	2b00      	cmp	r3, #0
 8004356:	d15d      	bne.n	8004414 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0220 	bic.w	r2, r2, #32
 8004366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004376:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0201 	bic.w	r2, r2, #1
 8004386:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	2b01      	cmp	r3, #1
 800439c:	d135      	bne.n	800440a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	330c      	adds	r3, #12
 80043aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	e853 3f00 	ldrex	r3, [r3]
 80043b2:	613b      	str	r3, [r7, #16]
   return(result);
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	f023 0310 	bic.w	r3, r3, #16
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c4:	623a      	str	r2, [r7, #32]
 80043c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c8:	69f9      	ldr	r1, [r7, #28]
 80043ca:	6a3a      	ldr	r2, [r7, #32]
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d1e5      	bne.n	80043a4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0310 	and.w	r3, r3, #16
 80043e2:	2b10      	cmp	r3, #16
 80043e4:	d10a      	bne.n	80043fc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043e6:	2300      	movs	r3, #0
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004400:	4619      	mov	r1, r3
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7ff fdf9 	bl	8003ffa <HAL_UARTEx_RxEventCallback>
 8004408:	e002      	b.n	8004410 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff fde3 	bl	8003fd6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004410:	2300      	movs	r3, #0
 8004412:	e002      	b.n	800441a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3730      	adds	r7, #48	; 0x30
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	4313      	orrs	r3, r2
 8004452:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800445e:	f023 030c 	bic.w	r3, r3, #12
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	6812      	ldr	r2, [r2, #0]
 8004466:	68b9      	ldr	r1, [r7, #8]
 8004468:	430b      	orrs	r3, r1
 800446a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	430a      	orrs	r2, r1
 8004480:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a2c      	ldr	r2, [pc, #176]	; (8004538 <UART_SetConfig+0x114>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d103      	bne.n	8004494 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800448c:	f7fe fdec 	bl	8003068 <HAL_RCC_GetPCLK2Freq>
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	e002      	b.n	800449a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004494:	f7fe fdd4 	bl	8003040 <HAL_RCC_GetPCLK1Freq>
 8004498:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	4613      	mov	r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	009a      	lsls	r2, r3, #2
 80044a4:	441a      	add	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80044b0:	4a22      	ldr	r2, [pc, #136]	; (800453c <UART_SetConfig+0x118>)
 80044b2:	fba2 2303 	umull	r2, r3, r2, r3
 80044b6:	095b      	lsrs	r3, r3, #5
 80044b8:	0119      	lsls	r1, r3, #4
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4613      	mov	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	009a      	lsls	r2, r3, #2
 80044c4:	441a      	add	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044d0:	4b1a      	ldr	r3, [pc, #104]	; (800453c <UART_SetConfig+0x118>)
 80044d2:	fba3 0302 	umull	r0, r3, r3, r2
 80044d6:	095b      	lsrs	r3, r3, #5
 80044d8:	2064      	movs	r0, #100	; 0x64
 80044da:	fb00 f303 	mul.w	r3, r0, r3
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	011b      	lsls	r3, r3, #4
 80044e2:	3332      	adds	r3, #50	; 0x32
 80044e4:	4a15      	ldr	r2, [pc, #84]	; (800453c <UART_SetConfig+0x118>)
 80044e6:	fba2 2303 	umull	r2, r3, r2, r3
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f0:	4419      	add	r1, r3
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009a      	lsls	r2, r3, #2
 80044fc:	441a      	add	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	fbb2 f2f3 	udiv	r2, r2, r3
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <UART_SetConfig+0x118>)
 800450a:	fba3 0302 	umull	r0, r3, r3, r2
 800450e:	095b      	lsrs	r3, r3, #5
 8004510:	2064      	movs	r0, #100	; 0x64
 8004512:	fb00 f303 	mul.w	r3, r0, r3
 8004516:	1ad3      	subs	r3, r2, r3
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	3332      	adds	r3, #50	; 0x32
 800451c:	4a07      	ldr	r2, [pc, #28]	; (800453c <UART_SetConfig+0x118>)
 800451e:	fba2 2303 	umull	r2, r3, r2, r3
 8004522:	095b      	lsrs	r3, r3, #5
 8004524:	f003 020f 	and.w	r2, r3, #15
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	440a      	add	r2, r1
 800452e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004530:	bf00      	nop
 8004532:	3710      	adds	r7, #16
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	40013800 	.word	0x40013800
 800453c:	51eb851f 	.word	0x51eb851f

08004540 <atoi>:
 8004540:	220a      	movs	r2, #10
 8004542:	2100      	movs	r1, #0
 8004544:	f000 b87e 	b.w	8004644 <strtol>

08004548 <_strtol_l.constprop.0>:
 8004548:	2b01      	cmp	r3, #1
 800454a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800454e:	4686      	mov	lr, r0
 8004550:	4690      	mov	r8, r2
 8004552:	d001      	beq.n	8004558 <_strtol_l.constprop.0+0x10>
 8004554:	2b24      	cmp	r3, #36	; 0x24
 8004556:	d906      	bls.n	8004566 <_strtol_l.constprop.0+0x1e>
 8004558:	f000 fa72 	bl	8004a40 <__errno>
 800455c:	2316      	movs	r3, #22
 800455e:	6003      	str	r3, [r0, #0]
 8004560:	2000      	movs	r0, #0
 8004562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004566:	460d      	mov	r5, r1
 8004568:	4835      	ldr	r0, [pc, #212]	; (8004640 <_strtol_l.constprop.0+0xf8>)
 800456a:	462a      	mov	r2, r5
 800456c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004570:	5d06      	ldrb	r6, [r0, r4]
 8004572:	f016 0608 	ands.w	r6, r6, #8
 8004576:	d1f8      	bne.n	800456a <_strtol_l.constprop.0+0x22>
 8004578:	2c2d      	cmp	r4, #45	; 0x2d
 800457a:	d12e      	bne.n	80045da <_strtol_l.constprop.0+0x92>
 800457c:	2601      	movs	r6, #1
 800457e:	782c      	ldrb	r4, [r5, #0]
 8004580:	1c95      	adds	r5, r2, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d057      	beq.n	8004636 <_strtol_l.constprop.0+0xee>
 8004586:	2b10      	cmp	r3, #16
 8004588:	d109      	bne.n	800459e <_strtol_l.constprop.0+0x56>
 800458a:	2c30      	cmp	r4, #48	; 0x30
 800458c:	d107      	bne.n	800459e <_strtol_l.constprop.0+0x56>
 800458e:	782a      	ldrb	r2, [r5, #0]
 8004590:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8004594:	2a58      	cmp	r2, #88	; 0x58
 8004596:	d149      	bne.n	800462c <_strtol_l.constprop.0+0xe4>
 8004598:	2310      	movs	r3, #16
 800459a:	786c      	ldrb	r4, [r5, #1]
 800459c:	3502      	adds	r5, #2
 800459e:	2200      	movs	r2, #0
 80045a0:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80045a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80045a8:	fbbc f9f3 	udiv	r9, ip, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80045b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80045b6:	2f09      	cmp	r7, #9
 80045b8:	d814      	bhi.n	80045e4 <_strtol_l.constprop.0+0x9c>
 80045ba:	463c      	mov	r4, r7
 80045bc:	42a3      	cmp	r3, r4
 80045be:	dd20      	ble.n	8004602 <_strtol_l.constprop.0+0xba>
 80045c0:	1c57      	adds	r7, r2, #1
 80045c2:	d007      	beq.n	80045d4 <_strtol_l.constprop.0+0x8c>
 80045c4:	4581      	cmp	r9, r0
 80045c6:	d319      	bcc.n	80045fc <_strtol_l.constprop.0+0xb4>
 80045c8:	d101      	bne.n	80045ce <_strtol_l.constprop.0+0x86>
 80045ca:	45a2      	cmp	sl, r4
 80045cc:	db16      	blt.n	80045fc <_strtol_l.constprop.0+0xb4>
 80045ce:	2201      	movs	r2, #1
 80045d0:	fb00 4003 	mla	r0, r0, r3, r4
 80045d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045d8:	e7eb      	b.n	80045b2 <_strtol_l.constprop.0+0x6a>
 80045da:	2c2b      	cmp	r4, #43	; 0x2b
 80045dc:	bf04      	itt	eq
 80045de:	782c      	ldrbeq	r4, [r5, #0]
 80045e0:	1c95      	addeq	r5, r2, #2
 80045e2:	e7ce      	b.n	8004582 <_strtol_l.constprop.0+0x3a>
 80045e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80045e8:	2f19      	cmp	r7, #25
 80045ea:	d801      	bhi.n	80045f0 <_strtol_l.constprop.0+0xa8>
 80045ec:	3c37      	subs	r4, #55	; 0x37
 80045ee:	e7e5      	b.n	80045bc <_strtol_l.constprop.0+0x74>
 80045f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80045f4:	2f19      	cmp	r7, #25
 80045f6:	d804      	bhi.n	8004602 <_strtol_l.constprop.0+0xba>
 80045f8:	3c57      	subs	r4, #87	; 0x57
 80045fa:	e7df      	b.n	80045bc <_strtol_l.constprop.0+0x74>
 80045fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004600:	e7e8      	b.n	80045d4 <_strtol_l.constprop.0+0x8c>
 8004602:	1c53      	adds	r3, r2, #1
 8004604:	d108      	bne.n	8004618 <_strtol_l.constprop.0+0xd0>
 8004606:	2322      	movs	r3, #34	; 0x22
 8004608:	4660      	mov	r0, ip
 800460a:	f8ce 3000 	str.w	r3, [lr]
 800460e:	f1b8 0f00 	cmp.w	r8, #0
 8004612:	d0a6      	beq.n	8004562 <_strtol_l.constprop.0+0x1a>
 8004614:	1e69      	subs	r1, r5, #1
 8004616:	e006      	b.n	8004626 <_strtol_l.constprop.0+0xde>
 8004618:	b106      	cbz	r6, 800461c <_strtol_l.constprop.0+0xd4>
 800461a:	4240      	negs	r0, r0
 800461c:	f1b8 0f00 	cmp.w	r8, #0
 8004620:	d09f      	beq.n	8004562 <_strtol_l.constprop.0+0x1a>
 8004622:	2a00      	cmp	r2, #0
 8004624:	d1f6      	bne.n	8004614 <_strtol_l.constprop.0+0xcc>
 8004626:	f8c8 1000 	str.w	r1, [r8]
 800462a:	e79a      	b.n	8004562 <_strtol_l.constprop.0+0x1a>
 800462c:	2430      	movs	r4, #48	; 0x30
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1b5      	bne.n	800459e <_strtol_l.constprop.0+0x56>
 8004632:	2308      	movs	r3, #8
 8004634:	e7b3      	b.n	800459e <_strtol_l.constprop.0+0x56>
 8004636:	2c30      	cmp	r4, #48	; 0x30
 8004638:	d0a9      	beq.n	800458e <_strtol_l.constprop.0+0x46>
 800463a:	230a      	movs	r3, #10
 800463c:	e7af      	b.n	800459e <_strtol_l.constprop.0+0x56>
 800463e:	bf00      	nop
 8004640:	08006143 	.word	0x08006143

08004644 <strtol>:
 8004644:	4613      	mov	r3, r2
 8004646:	460a      	mov	r2, r1
 8004648:	4601      	mov	r1, r0
 800464a:	4802      	ldr	r0, [pc, #8]	; (8004654 <strtol+0x10>)
 800464c:	6800      	ldr	r0, [r0, #0]
 800464e:	f7ff bf7b 	b.w	8004548 <_strtol_l.constprop.0>
 8004652:	bf00      	nop
 8004654:	20000068 	.word	0x20000068

08004658 <std>:
 8004658:	2300      	movs	r3, #0
 800465a:	b510      	push	{r4, lr}
 800465c:	4604      	mov	r4, r0
 800465e:	e9c0 3300 	strd	r3, r3, [r0]
 8004662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004666:	6083      	str	r3, [r0, #8]
 8004668:	8181      	strh	r1, [r0, #12]
 800466a:	6643      	str	r3, [r0, #100]	; 0x64
 800466c:	81c2      	strh	r2, [r0, #14]
 800466e:	6183      	str	r3, [r0, #24]
 8004670:	4619      	mov	r1, r3
 8004672:	2208      	movs	r2, #8
 8004674:	305c      	adds	r0, #92	; 0x5c
 8004676:	f000 f916 	bl	80048a6 <memset>
 800467a:	4b05      	ldr	r3, [pc, #20]	; (8004690 <std+0x38>)
 800467c:	6224      	str	r4, [r4, #32]
 800467e:	6263      	str	r3, [r4, #36]	; 0x24
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <std+0x3c>)
 8004682:	62a3      	str	r3, [r4, #40]	; 0x28
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <std+0x40>)
 8004686:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004688:	4b04      	ldr	r3, [pc, #16]	; (800469c <std+0x44>)
 800468a:	6323      	str	r3, [r4, #48]	; 0x30
 800468c:	bd10      	pop	{r4, pc}
 800468e:	bf00      	nop
 8004690:	08004821 	.word	0x08004821
 8004694:	08004843 	.word	0x08004843
 8004698:	0800487b 	.word	0x0800487b
 800469c:	0800489f 	.word	0x0800489f

080046a0 <stdio_exit_handler>:
 80046a0:	4a02      	ldr	r2, [pc, #8]	; (80046ac <stdio_exit_handler+0xc>)
 80046a2:	4903      	ldr	r1, [pc, #12]	; (80046b0 <stdio_exit_handler+0x10>)
 80046a4:	4803      	ldr	r0, [pc, #12]	; (80046b4 <stdio_exit_handler+0x14>)
 80046a6:	f000 b869 	b.w	800477c <_fwalk_sglue>
 80046aa:	bf00      	nop
 80046ac:	20000010 	.word	0x20000010
 80046b0:	080053a9 	.word	0x080053a9
 80046b4:	2000001c 	.word	0x2000001c

080046b8 <cleanup_stdio>:
 80046b8:	6841      	ldr	r1, [r0, #4]
 80046ba:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <cleanup_stdio+0x34>)
 80046bc:	b510      	push	{r4, lr}
 80046be:	4299      	cmp	r1, r3
 80046c0:	4604      	mov	r4, r0
 80046c2:	d001      	beq.n	80046c8 <cleanup_stdio+0x10>
 80046c4:	f000 fe70 	bl	80053a8 <_fflush_r>
 80046c8:	68a1      	ldr	r1, [r4, #8]
 80046ca:	4b09      	ldr	r3, [pc, #36]	; (80046f0 <cleanup_stdio+0x38>)
 80046cc:	4299      	cmp	r1, r3
 80046ce:	d002      	beq.n	80046d6 <cleanup_stdio+0x1e>
 80046d0:	4620      	mov	r0, r4
 80046d2:	f000 fe69 	bl	80053a8 <_fflush_r>
 80046d6:	68e1      	ldr	r1, [r4, #12]
 80046d8:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <cleanup_stdio+0x3c>)
 80046da:	4299      	cmp	r1, r3
 80046dc:	d004      	beq.n	80046e8 <cleanup_stdio+0x30>
 80046de:	4620      	mov	r0, r4
 80046e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046e4:	f000 be60 	b.w	80053a8 <_fflush_r>
 80046e8:	bd10      	pop	{r4, pc}
 80046ea:	bf00      	nop
 80046ec:	20000468 	.word	0x20000468
 80046f0:	200004d0 	.word	0x200004d0
 80046f4:	20000538 	.word	0x20000538

080046f8 <global_stdio_init.part.0>:
 80046f8:	b510      	push	{r4, lr}
 80046fa:	4b0b      	ldr	r3, [pc, #44]	; (8004728 <global_stdio_init.part.0+0x30>)
 80046fc:	4c0b      	ldr	r4, [pc, #44]	; (800472c <global_stdio_init.part.0+0x34>)
 80046fe:	4a0c      	ldr	r2, [pc, #48]	; (8004730 <global_stdio_init.part.0+0x38>)
 8004700:	4620      	mov	r0, r4
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	2104      	movs	r1, #4
 8004706:	2200      	movs	r2, #0
 8004708:	f7ff ffa6 	bl	8004658 <std>
 800470c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004710:	2201      	movs	r2, #1
 8004712:	2109      	movs	r1, #9
 8004714:	f7ff ffa0 	bl	8004658 <std>
 8004718:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800471c:	2202      	movs	r2, #2
 800471e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004722:	2112      	movs	r1, #18
 8004724:	f7ff bf98 	b.w	8004658 <std>
 8004728:	200005a0 	.word	0x200005a0
 800472c:	20000468 	.word	0x20000468
 8004730:	080046a1 	.word	0x080046a1

08004734 <__sfp_lock_acquire>:
 8004734:	4801      	ldr	r0, [pc, #4]	; (800473c <__sfp_lock_acquire+0x8>)
 8004736:	f000 b9ad 	b.w	8004a94 <__retarget_lock_acquire_recursive>
 800473a:	bf00      	nop
 800473c:	200005a9 	.word	0x200005a9

08004740 <__sfp_lock_release>:
 8004740:	4801      	ldr	r0, [pc, #4]	; (8004748 <__sfp_lock_release+0x8>)
 8004742:	f000 b9a8 	b.w	8004a96 <__retarget_lock_release_recursive>
 8004746:	bf00      	nop
 8004748:	200005a9 	.word	0x200005a9

0800474c <__sinit>:
 800474c:	b510      	push	{r4, lr}
 800474e:	4604      	mov	r4, r0
 8004750:	f7ff fff0 	bl	8004734 <__sfp_lock_acquire>
 8004754:	6a23      	ldr	r3, [r4, #32]
 8004756:	b11b      	cbz	r3, 8004760 <__sinit+0x14>
 8004758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800475c:	f7ff bff0 	b.w	8004740 <__sfp_lock_release>
 8004760:	4b04      	ldr	r3, [pc, #16]	; (8004774 <__sinit+0x28>)
 8004762:	6223      	str	r3, [r4, #32]
 8004764:	4b04      	ldr	r3, [pc, #16]	; (8004778 <__sinit+0x2c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d1f5      	bne.n	8004758 <__sinit+0xc>
 800476c:	f7ff ffc4 	bl	80046f8 <global_stdio_init.part.0>
 8004770:	e7f2      	b.n	8004758 <__sinit+0xc>
 8004772:	bf00      	nop
 8004774:	080046b9 	.word	0x080046b9
 8004778:	200005a0 	.word	0x200005a0

0800477c <_fwalk_sglue>:
 800477c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004780:	4607      	mov	r7, r0
 8004782:	4688      	mov	r8, r1
 8004784:	4614      	mov	r4, r2
 8004786:	2600      	movs	r6, #0
 8004788:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800478c:	f1b9 0901 	subs.w	r9, r9, #1
 8004790:	d505      	bpl.n	800479e <_fwalk_sglue+0x22>
 8004792:	6824      	ldr	r4, [r4, #0]
 8004794:	2c00      	cmp	r4, #0
 8004796:	d1f7      	bne.n	8004788 <_fwalk_sglue+0xc>
 8004798:	4630      	mov	r0, r6
 800479a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800479e:	89ab      	ldrh	r3, [r5, #12]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d907      	bls.n	80047b4 <_fwalk_sglue+0x38>
 80047a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80047a8:	3301      	adds	r3, #1
 80047aa:	d003      	beq.n	80047b4 <_fwalk_sglue+0x38>
 80047ac:	4629      	mov	r1, r5
 80047ae:	4638      	mov	r0, r7
 80047b0:	47c0      	blx	r8
 80047b2:	4306      	orrs	r6, r0
 80047b4:	3568      	adds	r5, #104	; 0x68
 80047b6:	e7e9      	b.n	800478c <_fwalk_sglue+0x10>

080047b8 <sniprintf>:
 80047b8:	b40c      	push	{r2, r3}
 80047ba:	b530      	push	{r4, r5, lr}
 80047bc:	4b17      	ldr	r3, [pc, #92]	; (800481c <sniprintf+0x64>)
 80047be:	1e0c      	subs	r4, r1, #0
 80047c0:	681d      	ldr	r5, [r3, #0]
 80047c2:	b09d      	sub	sp, #116	; 0x74
 80047c4:	da08      	bge.n	80047d8 <sniprintf+0x20>
 80047c6:	238b      	movs	r3, #139	; 0x8b
 80047c8:	f04f 30ff 	mov.w	r0, #4294967295
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	b01d      	add	sp, #116	; 0x74
 80047d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80047d4:	b002      	add	sp, #8
 80047d6:	4770      	bx	lr
 80047d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80047dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80047e0:	bf0c      	ite	eq
 80047e2:	4623      	moveq	r3, r4
 80047e4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	9307      	str	r3, [sp, #28]
 80047ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047f0:	9002      	str	r0, [sp, #8]
 80047f2:	9006      	str	r0, [sp, #24]
 80047f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80047f8:	4628      	mov	r0, r5
 80047fa:	ab21      	add	r3, sp, #132	; 0x84
 80047fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80047fe:	a902      	add	r1, sp, #8
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	f000 fabd 	bl	8004d80 <_svfiprintf_r>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	bfbc      	itt	lt
 800480a:	238b      	movlt	r3, #139	; 0x8b
 800480c:	602b      	strlt	r3, [r5, #0]
 800480e:	2c00      	cmp	r4, #0
 8004810:	d0dd      	beq.n	80047ce <sniprintf+0x16>
 8004812:	2200      	movs	r2, #0
 8004814:	9b02      	ldr	r3, [sp, #8]
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	e7d9      	b.n	80047ce <sniprintf+0x16>
 800481a:	bf00      	nop
 800481c:	20000068 	.word	0x20000068

08004820 <__sread>:
 8004820:	b510      	push	{r4, lr}
 8004822:	460c      	mov	r4, r1
 8004824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004828:	f000 f8e6 	bl	80049f8 <_read_r>
 800482c:	2800      	cmp	r0, #0
 800482e:	bfab      	itete	ge
 8004830:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004832:	89a3      	ldrhlt	r3, [r4, #12]
 8004834:	181b      	addge	r3, r3, r0
 8004836:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800483a:	bfac      	ite	ge
 800483c:	6563      	strge	r3, [r4, #84]	; 0x54
 800483e:	81a3      	strhlt	r3, [r4, #12]
 8004840:	bd10      	pop	{r4, pc}

08004842 <__swrite>:
 8004842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004846:	461f      	mov	r7, r3
 8004848:	898b      	ldrh	r3, [r1, #12]
 800484a:	4605      	mov	r5, r0
 800484c:	05db      	lsls	r3, r3, #23
 800484e:	460c      	mov	r4, r1
 8004850:	4616      	mov	r6, r2
 8004852:	d505      	bpl.n	8004860 <__swrite+0x1e>
 8004854:	2302      	movs	r3, #2
 8004856:	2200      	movs	r2, #0
 8004858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800485c:	f000 f8ba 	bl	80049d4 <_lseek_r>
 8004860:	89a3      	ldrh	r3, [r4, #12]
 8004862:	4632      	mov	r2, r6
 8004864:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004868:	81a3      	strh	r3, [r4, #12]
 800486a:	4628      	mov	r0, r5
 800486c:	463b      	mov	r3, r7
 800486e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004872:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004876:	f000 b8d1 	b.w	8004a1c <_write_r>

0800487a <__sseek>:
 800487a:	b510      	push	{r4, lr}
 800487c:	460c      	mov	r4, r1
 800487e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004882:	f000 f8a7 	bl	80049d4 <_lseek_r>
 8004886:	1c43      	adds	r3, r0, #1
 8004888:	89a3      	ldrh	r3, [r4, #12]
 800488a:	bf15      	itete	ne
 800488c:	6560      	strne	r0, [r4, #84]	; 0x54
 800488e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004892:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004896:	81a3      	strheq	r3, [r4, #12]
 8004898:	bf18      	it	ne
 800489a:	81a3      	strhne	r3, [r4, #12]
 800489c:	bd10      	pop	{r4, pc}

0800489e <__sclose>:
 800489e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a2:	f000 b887 	b.w	80049b4 <_close_r>

080048a6 <memset>:
 80048a6:	4603      	mov	r3, r0
 80048a8:	4402      	add	r2, r0
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d100      	bne.n	80048b0 <memset+0xa>
 80048ae:	4770      	bx	lr
 80048b0:	f803 1b01 	strb.w	r1, [r3], #1
 80048b4:	e7f9      	b.n	80048aa <memset+0x4>

080048b6 <strchr>:
 80048b6:	4603      	mov	r3, r0
 80048b8:	b2c9      	uxtb	r1, r1
 80048ba:	4618      	mov	r0, r3
 80048bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048c0:	b112      	cbz	r2, 80048c8 <strchr+0x12>
 80048c2:	428a      	cmp	r2, r1
 80048c4:	d1f9      	bne.n	80048ba <strchr+0x4>
 80048c6:	4770      	bx	lr
 80048c8:	2900      	cmp	r1, #0
 80048ca:	bf18      	it	ne
 80048cc:	2000      	movne	r0, #0
 80048ce:	4770      	bx	lr

080048d0 <strtok>:
 80048d0:	4b16      	ldr	r3, [pc, #88]	; (800492c <strtok+0x5c>)
 80048d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d6:	681f      	ldr	r7, [r3, #0]
 80048d8:	4605      	mov	r5, r0
 80048da:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80048dc:	460e      	mov	r6, r1
 80048de:	b9ec      	cbnz	r4, 800491c <strtok+0x4c>
 80048e0:	2050      	movs	r0, #80	; 0x50
 80048e2:	f000 f93f 	bl	8004b64 <malloc>
 80048e6:	4602      	mov	r2, r0
 80048e8:	6478      	str	r0, [r7, #68]	; 0x44
 80048ea:	b920      	cbnz	r0, 80048f6 <strtok+0x26>
 80048ec:	215b      	movs	r1, #91	; 0x5b
 80048ee:	4b10      	ldr	r3, [pc, #64]	; (8004930 <strtok+0x60>)
 80048f0:	4810      	ldr	r0, [pc, #64]	; (8004934 <strtok+0x64>)
 80048f2:	f000 f8d1 	bl	8004a98 <__assert_func>
 80048f6:	e9c0 4400 	strd	r4, r4, [r0]
 80048fa:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80048fe:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004902:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004906:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800490a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800490e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004912:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004916:	6184      	str	r4, [r0, #24]
 8004918:	7704      	strb	r4, [r0, #28]
 800491a:	6244      	str	r4, [r0, #36]	; 0x24
 800491c:	4631      	mov	r1, r6
 800491e:	4628      	mov	r0, r5
 8004920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004922:	2301      	movs	r3, #1
 8004924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	f000 b806 	b.w	8004938 <__strtok_r>
 800492c:	20000068 	.word	0x20000068
 8004930:	08006243 	.word	0x08006243
 8004934:	0800625a 	.word	0x0800625a

08004938 <__strtok_r>:
 8004938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493a:	b908      	cbnz	r0, 8004940 <__strtok_r+0x8>
 800493c:	6810      	ldr	r0, [r2, #0]
 800493e:	b188      	cbz	r0, 8004964 <__strtok_r+0x2c>
 8004940:	4604      	mov	r4, r0
 8004942:	460f      	mov	r7, r1
 8004944:	4620      	mov	r0, r4
 8004946:	f814 5b01 	ldrb.w	r5, [r4], #1
 800494a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800494e:	b91e      	cbnz	r6, 8004958 <__strtok_r+0x20>
 8004950:	b965      	cbnz	r5, 800496c <__strtok_r+0x34>
 8004952:	4628      	mov	r0, r5
 8004954:	6015      	str	r5, [r2, #0]
 8004956:	e005      	b.n	8004964 <__strtok_r+0x2c>
 8004958:	42b5      	cmp	r5, r6
 800495a:	d1f6      	bne.n	800494a <__strtok_r+0x12>
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f0      	bne.n	8004942 <__strtok_r+0xa>
 8004960:	6014      	str	r4, [r2, #0]
 8004962:	7003      	strb	r3, [r0, #0]
 8004964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004966:	461c      	mov	r4, r3
 8004968:	e00c      	b.n	8004984 <__strtok_r+0x4c>
 800496a:	b915      	cbnz	r5, 8004972 <__strtok_r+0x3a>
 800496c:	460e      	mov	r6, r1
 800496e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004972:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004976:	42ab      	cmp	r3, r5
 8004978:	d1f7      	bne.n	800496a <__strtok_r+0x32>
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f3      	beq.n	8004966 <__strtok_r+0x2e>
 800497e:	2300      	movs	r3, #0
 8004980:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004984:	6014      	str	r4, [r2, #0]
 8004986:	e7ed      	b.n	8004964 <__strtok_r+0x2c>

08004988 <strstr>:
 8004988:	780a      	ldrb	r2, [r1, #0]
 800498a:	b570      	push	{r4, r5, r6, lr}
 800498c:	b96a      	cbnz	r2, 80049aa <strstr+0x22>
 800498e:	bd70      	pop	{r4, r5, r6, pc}
 8004990:	429a      	cmp	r2, r3
 8004992:	d109      	bne.n	80049a8 <strstr+0x20>
 8004994:	460c      	mov	r4, r1
 8004996:	4605      	mov	r5, r0
 8004998:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f6      	beq.n	800498e <strstr+0x6>
 80049a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80049a4:	429e      	cmp	r6, r3
 80049a6:	d0f7      	beq.n	8004998 <strstr+0x10>
 80049a8:	3001      	adds	r0, #1
 80049aa:	7803      	ldrb	r3, [r0, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1ef      	bne.n	8004990 <strstr+0x8>
 80049b0:	4618      	mov	r0, r3
 80049b2:	e7ec      	b.n	800498e <strstr+0x6>

080049b4 <_close_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	2300      	movs	r3, #0
 80049b8:	4d05      	ldr	r5, [pc, #20]	; (80049d0 <_close_r+0x1c>)
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	602b      	str	r3, [r5, #0]
 80049c0:	f7fd fa48 	bl	8001e54 <_close>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_close_r+0x1a>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_close_r+0x1a>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	200005a4 	.word	0x200005a4

080049d4 <_lseek_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4604      	mov	r4, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	2200      	movs	r2, #0
 80049de:	4d05      	ldr	r5, [pc, #20]	; (80049f4 <_lseek_r+0x20>)
 80049e0:	602a      	str	r2, [r5, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	f7fd fa5a 	bl	8001e9c <_lseek>
 80049e8:	1c43      	adds	r3, r0, #1
 80049ea:	d102      	bne.n	80049f2 <_lseek_r+0x1e>
 80049ec:	682b      	ldr	r3, [r5, #0]
 80049ee:	b103      	cbz	r3, 80049f2 <_lseek_r+0x1e>
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	bd38      	pop	{r3, r4, r5, pc}
 80049f4:	200005a4 	.word	0x200005a4

080049f8 <_read_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	4611      	mov	r1, r2
 8004a00:	2200      	movs	r2, #0
 8004a02:	4d05      	ldr	r5, [pc, #20]	; (8004a18 <_read_r+0x20>)
 8004a04:	602a      	str	r2, [r5, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f7fd f9eb 	bl	8001de2 <_read>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d102      	bne.n	8004a16 <_read_r+0x1e>
 8004a10:	682b      	ldr	r3, [r5, #0]
 8004a12:	b103      	cbz	r3, 8004a16 <_read_r+0x1e>
 8004a14:	6023      	str	r3, [r4, #0]
 8004a16:	bd38      	pop	{r3, r4, r5, pc}
 8004a18:	200005a4 	.word	0x200005a4

08004a1c <_write_r>:
 8004a1c:	b538      	push	{r3, r4, r5, lr}
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	4611      	mov	r1, r2
 8004a24:	2200      	movs	r2, #0
 8004a26:	4d05      	ldr	r5, [pc, #20]	; (8004a3c <_write_r+0x20>)
 8004a28:	602a      	str	r2, [r5, #0]
 8004a2a:	461a      	mov	r2, r3
 8004a2c:	f7fd f9f6 	bl	8001e1c <_write>
 8004a30:	1c43      	adds	r3, r0, #1
 8004a32:	d102      	bne.n	8004a3a <_write_r+0x1e>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	b103      	cbz	r3, 8004a3a <_write_r+0x1e>
 8004a38:	6023      	str	r3, [r4, #0]
 8004a3a:	bd38      	pop	{r3, r4, r5, pc}
 8004a3c:	200005a4 	.word	0x200005a4

08004a40 <__errno>:
 8004a40:	4b01      	ldr	r3, [pc, #4]	; (8004a48 <__errno+0x8>)
 8004a42:	6818      	ldr	r0, [r3, #0]
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	20000068 	.word	0x20000068

08004a4c <__libc_init_array>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	2600      	movs	r6, #0
 8004a50:	4d0c      	ldr	r5, [pc, #48]	; (8004a84 <__libc_init_array+0x38>)
 8004a52:	4c0d      	ldr	r4, [pc, #52]	; (8004a88 <__libc_init_array+0x3c>)
 8004a54:	1b64      	subs	r4, r4, r5
 8004a56:	10a4      	asrs	r4, r4, #2
 8004a58:	42a6      	cmp	r6, r4
 8004a5a:	d109      	bne.n	8004a70 <__libc_init_array+0x24>
 8004a5c:	f001 f802 	bl	8005a64 <_init>
 8004a60:	2600      	movs	r6, #0
 8004a62:	4d0a      	ldr	r5, [pc, #40]	; (8004a8c <__libc_init_array+0x40>)
 8004a64:	4c0a      	ldr	r4, [pc, #40]	; (8004a90 <__libc_init_array+0x44>)
 8004a66:	1b64      	subs	r4, r4, r5
 8004a68:	10a4      	asrs	r4, r4, #2
 8004a6a:	42a6      	cmp	r6, r4
 8004a6c:	d105      	bne.n	8004a7a <__libc_init_array+0x2e>
 8004a6e:	bd70      	pop	{r4, r5, r6, pc}
 8004a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a74:	4798      	blx	r3
 8004a76:	3601      	adds	r6, #1
 8004a78:	e7ee      	b.n	8004a58 <__libc_init_array+0xc>
 8004a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a7e:	4798      	blx	r3
 8004a80:	3601      	adds	r6, #1
 8004a82:	e7f2      	b.n	8004a6a <__libc_init_array+0x1e>
 8004a84:	08006324 	.word	0x08006324
 8004a88:	08006324 	.word	0x08006324
 8004a8c:	08006324 	.word	0x08006324
 8004a90:	08006328 	.word	0x08006328

08004a94 <__retarget_lock_acquire_recursive>:
 8004a94:	4770      	bx	lr

08004a96 <__retarget_lock_release_recursive>:
 8004a96:	4770      	bx	lr

08004a98 <__assert_func>:
 8004a98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a9a:	4614      	mov	r4, r2
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <__assert_func+0x2c>)
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68d8      	ldr	r0, [r3, #12]
 8004aa6:	b14c      	cbz	r4, 8004abc <__assert_func+0x24>
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <__assert_func+0x30>)
 8004aaa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004aae:	9100      	str	r1, [sp, #0]
 8004ab0:	462b      	mov	r3, r5
 8004ab2:	4906      	ldr	r1, [pc, #24]	; (8004acc <__assert_func+0x34>)
 8004ab4:	f000 fca0 	bl	80053f8 <fiprintf>
 8004ab8:	f000 fcf6 	bl	80054a8 <abort>
 8004abc:	4b04      	ldr	r3, [pc, #16]	; (8004ad0 <__assert_func+0x38>)
 8004abe:	461c      	mov	r4, r3
 8004ac0:	e7f3      	b.n	8004aaa <__assert_func+0x12>
 8004ac2:	bf00      	nop
 8004ac4:	20000068 	.word	0x20000068
 8004ac8:	080062b4 	.word	0x080062b4
 8004acc:	080062c1 	.word	0x080062c1
 8004ad0:	080062ef 	.word	0x080062ef

08004ad4 <_free_r>:
 8004ad4:	b538      	push	{r3, r4, r5, lr}
 8004ad6:	4605      	mov	r5, r0
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	d040      	beq.n	8004b5e <_free_r+0x8a>
 8004adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ae0:	1f0c      	subs	r4, r1, #4
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	bfb8      	it	lt
 8004ae6:	18e4      	addlt	r4, r4, r3
 8004ae8:	f000 f8e4 	bl	8004cb4 <__malloc_lock>
 8004aec:	4a1c      	ldr	r2, [pc, #112]	; (8004b60 <_free_r+0x8c>)
 8004aee:	6813      	ldr	r3, [r2, #0]
 8004af0:	b933      	cbnz	r3, 8004b00 <_free_r+0x2c>
 8004af2:	6063      	str	r3, [r4, #4]
 8004af4:	6014      	str	r4, [r2, #0]
 8004af6:	4628      	mov	r0, r5
 8004af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004afc:	f000 b8e0 	b.w	8004cc0 <__malloc_unlock>
 8004b00:	42a3      	cmp	r3, r4
 8004b02:	d908      	bls.n	8004b16 <_free_r+0x42>
 8004b04:	6820      	ldr	r0, [r4, #0]
 8004b06:	1821      	adds	r1, r4, r0
 8004b08:	428b      	cmp	r3, r1
 8004b0a:	bf01      	itttt	eq
 8004b0c:	6819      	ldreq	r1, [r3, #0]
 8004b0e:	685b      	ldreq	r3, [r3, #4]
 8004b10:	1809      	addeq	r1, r1, r0
 8004b12:	6021      	streq	r1, [r4, #0]
 8004b14:	e7ed      	b.n	8004af2 <_free_r+0x1e>
 8004b16:	461a      	mov	r2, r3
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b10b      	cbz	r3, 8004b20 <_free_r+0x4c>
 8004b1c:	42a3      	cmp	r3, r4
 8004b1e:	d9fa      	bls.n	8004b16 <_free_r+0x42>
 8004b20:	6811      	ldr	r1, [r2, #0]
 8004b22:	1850      	adds	r0, r2, r1
 8004b24:	42a0      	cmp	r0, r4
 8004b26:	d10b      	bne.n	8004b40 <_free_r+0x6c>
 8004b28:	6820      	ldr	r0, [r4, #0]
 8004b2a:	4401      	add	r1, r0
 8004b2c:	1850      	adds	r0, r2, r1
 8004b2e:	4283      	cmp	r3, r0
 8004b30:	6011      	str	r1, [r2, #0]
 8004b32:	d1e0      	bne.n	8004af6 <_free_r+0x22>
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	4408      	add	r0, r1
 8004b3a:	6010      	str	r0, [r2, #0]
 8004b3c:	6053      	str	r3, [r2, #4]
 8004b3e:	e7da      	b.n	8004af6 <_free_r+0x22>
 8004b40:	d902      	bls.n	8004b48 <_free_r+0x74>
 8004b42:	230c      	movs	r3, #12
 8004b44:	602b      	str	r3, [r5, #0]
 8004b46:	e7d6      	b.n	8004af6 <_free_r+0x22>
 8004b48:	6820      	ldr	r0, [r4, #0]
 8004b4a:	1821      	adds	r1, r4, r0
 8004b4c:	428b      	cmp	r3, r1
 8004b4e:	bf01      	itttt	eq
 8004b50:	6819      	ldreq	r1, [r3, #0]
 8004b52:	685b      	ldreq	r3, [r3, #4]
 8004b54:	1809      	addeq	r1, r1, r0
 8004b56:	6021      	streq	r1, [r4, #0]
 8004b58:	6063      	str	r3, [r4, #4]
 8004b5a:	6054      	str	r4, [r2, #4]
 8004b5c:	e7cb      	b.n	8004af6 <_free_r+0x22>
 8004b5e:	bd38      	pop	{r3, r4, r5, pc}
 8004b60:	200005ac 	.word	0x200005ac

08004b64 <malloc>:
 8004b64:	4b02      	ldr	r3, [pc, #8]	; (8004b70 <malloc+0xc>)
 8004b66:	4601      	mov	r1, r0
 8004b68:	6818      	ldr	r0, [r3, #0]
 8004b6a:	f000 b823 	b.w	8004bb4 <_malloc_r>
 8004b6e:	bf00      	nop
 8004b70:	20000068 	.word	0x20000068

08004b74 <sbrk_aligned>:
 8004b74:	b570      	push	{r4, r5, r6, lr}
 8004b76:	4e0e      	ldr	r6, [pc, #56]	; (8004bb0 <sbrk_aligned+0x3c>)
 8004b78:	460c      	mov	r4, r1
 8004b7a:	6831      	ldr	r1, [r6, #0]
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	b911      	cbnz	r1, 8004b86 <sbrk_aligned+0x12>
 8004b80:	f000 fc66 	bl	8005450 <_sbrk_r>
 8004b84:	6030      	str	r0, [r6, #0]
 8004b86:	4621      	mov	r1, r4
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f000 fc61 	bl	8005450 <_sbrk_r>
 8004b8e:	1c43      	adds	r3, r0, #1
 8004b90:	d00a      	beq.n	8004ba8 <sbrk_aligned+0x34>
 8004b92:	1cc4      	adds	r4, r0, #3
 8004b94:	f024 0403 	bic.w	r4, r4, #3
 8004b98:	42a0      	cmp	r0, r4
 8004b9a:	d007      	beq.n	8004bac <sbrk_aligned+0x38>
 8004b9c:	1a21      	subs	r1, r4, r0
 8004b9e:	4628      	mov	r0, r5
 8004ba0:	f000 fc56 	bl	8005450 <_sbrk_r>
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d101      	bne.n	8004bac <sbrk_aligned+0x38>
 8004ba8:	f04f 34ff 	mov.w	r4, #4294967295
 8004bac:	4620      	mov	r0, r4
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
 8004bb0:	200005b0 	.word	0x200005b0

08004bb4 <_malloc_r>:
 8004bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bb8:	1ccd      	adds	r5, r1, #3
 8004bba:	f025 0503 	bic.w	r5, r5, #3
 8004bbe:	3508      	adds	r5, #8
 8004bc0:	2d0c      	cmp	r5, #12
 8004bc2:	bf38      	it	cc
 8004bc4:	250c      	movcc	r5, #12
 8004bc6:	2d00      	cmp	r5, #0
 8004bc8:	4607      	mov	r7, r0
 8004bca:	db01      	blt.n	8004bd0 <_malloc_r+0x1c>
 8004bcc:	42a9      	cmp	r1, r5
 8004bce:	d905      	bls.n	8004bdc <_malloc_r+0x28>
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	603b      	str	r3, [r7, #0]
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bdc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004cb0 <_malloc_r+0xfc>
 8004be0:	f000 f868 	bl	8004cb4 <__malloc_lock>
 8004be4:	f8d8 3000 	ldr.w	r3, [r8]
 8004be8:	461c      	mov	r4, r3
 8004bea:	bb5c      	cbnz	r4, 8004c44 <_malloc_r+0x90>
 8004bec:	4629      	mov	r1, r5
 8004bee:	4638      	mov	r0, r7
 8004bf0:	f7ff ffc0 	bl	8004b74 <sbrk_aligned>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	4604      	mov	r4, r0
 8004bf8:	d155      	bne.n	8004ca6 <_malloc_r+0xf2>
 8004bfa:	f8d8 4000 	ldr.w	r4, [r8]
 8004bfe:	4626      	mov	r6, r4
 8004c00:	2e00      	cmp	r6, #0
 8004c02:	d145      	bne.n	8004c90 <_malloc_r+0xdc>
 8004c04:	2c00      	cmp	r4, #0
 8004c06:	d048      	beq.n	8004c9a <_malloc_r+0xe6>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	4631      	mov	r1, r6
 8004c0c:	4638      	mov	r0, r7
 8004c0e:	eb04 0903 	add.w	r9, r4, r3
 8004c12:	f000 fc1d 	bl	8005450 <_sbrk_r>
 8004c16:	4581      	cmp	r9, r0
 8004c18:	d13f      	bne.n	8004c9a <_malloc_r+0xe6>
 8004c1a:	6821      	ldr	r1, [r4, #0]
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	1a6d      	subs	r5, r5, r1
 8004c20:	4629      	mov	r1, r5
 8004c22:	f7ff ffa7 	bl	8004b74 <sbrk_aligned>
 8004c26:	3001      	adds	r0, #1
 8004c28:	d037      	beq.n	8004c9a <_malloc_r+0xe6>
 8004c2a:	6823      	ldr	r3, [r4, #0]
 8004c2c:	442b      	add	r3, r5
 8004c2e:	6023      	str	r3, [r4, #0]
 8004c30:	f8d8 3000 	ldr.w	r3, [r8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d038      	beq.n	8004caa <_malloc_r+0xf6>
 8004c38:	685a      	ldr	r2, [r3, #4]
 8004c3a:	42a2      	cmp	r2, r4
 8004c3c:	d12b      	bne.n	8004c96 <_malloc_r+0xe2>
 8004c3e:	2200      	movs	r2, #0
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	e00f      	b.n	8004c64 <_malloc_r+0xb0>
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	1b52      	subs	r2, r2, r5
 8004c48:	d41f      	bmi.n	8004c8a <_malloc_r+0xd6>
 8004c4a:	2a0b      	cmp	r2, #11
 8004c4c:	d917      	bls.n	8004c7e <_malloc_r+0xca>
 8004c4e:	1961      	adds	r1, r4, r5
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	6025      	str	r5, [r4, #0]
 8004c54:	bf18      	it	ne
 8004c56:	6059      	strne	r1, [r3, #4]
 8004c58:	6863      	ldr	r3, [r4, #4]
 8004c5a:	bf08      	it	eq
 8004c5c:	f8c8 1000 	streq.w	r1, [r8]
 8004c60:	5162      	str	r2, [r4, r5]
 8004c62:	604b      	str	r3, [r1, #4]
 8004c64:	4638      	mov	r0, r7
 8004c66:	f104 060b 	add.w	r6, r4, #11
 8004c6a:	f000 f829 	bl	8004cc0 <__malloc_unlock>
 8004c6e:	f026 0607 	bic.w	r6, r6, #7
 8004c72:	1d23      	adds	r3, r4, #4
 8004c74:	1af2      	subs	r2, r6, r3
 8004c76:	d0ae      	beq.n	8004bd6 <_malloc_r+0x22>
 8004c78:	1b9b      	subs	r3, r3, r6
 8004c7a:	50a3      	str	r3, [r4, r2]
 8004c7c:	e7ab      	b.n	8004bd6 <_malloc_r+0x22>
 8004c7e:	42a3      	cmp	r3, r4
 8004c80:	6862      	ldr	r2, [r4, #4]
 8004c82:	d1dd      	bne.n	8004c40 <_malloc_r+0x8c>
 8004c84:	f8c8 2000 	str.w	r2, [r8]
 8004c88:	e7ec      	b.n	8004c64 <_malloc_r+0xb0>
 8004c8a:	4623      	mov	r3, r4
 8004c8c:	6864      	ldr	r4, [r4, #4]
 8004c8e:	e7ac      	b.n	8004bea <_malloc_r+0x36>
 8004c90:	4634      	mov	r4, r6
 8004c92:	6876      	ldr	r6, [r6, #4]
 8004c94:	e7b4      	b.n	8004c00 <_malloc_r+0x4c>
 8004c96:	4613      	mov	r3, r2
 8004c98:	e7cc      	b.n	8004c34 <_malloc_r+0x80>
 8004c9a:	230c      	movs	r3, #12
 8004c9c:	4638      	mov	r0, r7
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	f000 f80e 	bl	8004cc0 <__malloc_unlock>
 8004ca4:	e797      	b.n	8004bd6 <_malloc_r+0x22>
 8004ca6:	6025      	str	r5, [r4, #0]
 8004ca8:	e7dc      	b.n	8004c64 <_malloc_r+0xb0>
 8004caa:	605b      	str	r3, [r3, #4]
 8004cac:	deff      	udf	#255	; 0xff
 8004cae:	bf00      	nop
 8004cb0:	200005ac 	.word	0x200005ac

08004cb4 <__malloc_lock>:
 8004cb4:	4801      	ldr	r0, [pc, #4]	; (8004cbc <__malloc_lock+0x8>)
 8004cb6:	f7ff beed 	b.w	8004a94 <__retarget_lock_acquire_recursive>
 8004cba:	bf00      	nop
 8004cbc:	200005a8 	.word	0x200005a8

08004cc0 <__malloc_unlock>:
 8004cc0:	4801      	ldr	r0, [pc, #4]	; (8004cc8 <__malloc_unlock+0x8>)
 8004cc2:	f7ff bee8 	b.w	8004a96 <__retarget_lock_release_recursive>
 8004cc6:	bf00      	nop
 8004cc8:	200005a8 	.word	0x200005a8

08004ccc <__ssputs_r>:
 8004ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd0:	461f      	mov	r7, r3
 8004cd2:	688e      	ldr	r6, [r1, #8]
 8004cd4:	4682      	mov	sl, r0
 8004cd6:	42be      	cmp	r6, r7
 8004cd8:	460c      	mov	r4, r1
 8004cda:	4690      	mov	r8, r2
 8004cdc:	680b      	ldr	r3, [r1, #0]
 8004cde:	d82c      	bhi.n	8004d3a <__ssputs_r+0x6e>
 8004ce0:	898a      	ldrh	r2, [r1, #12]
 8004ce2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ce6:	d026      	beq.n	8004d36 <__ssputs_r+0x6a>
 8004ce8:	6965      	ldr	r5, [r4, #20]
 8004cea:	6909      	ldr	r1, [r1, #16]
 8004cec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004cf0:	eba3 0901 	sub.w	r9, r3, r1
 8004cf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004cf8:	1c7b      	adds	r3, r7, #1
 8004cfa:	444b      	add	r3, r9
 8004cfc:	106d      	asrs	r5, r5, #1
 8004cfe:	429d      	cmp	r5, r3
 8004d00:	bf38      	it	cc
 8004d02:	461d      	movcc	r5, r3
 8004d04:	0553      	lsls	r3, r2, #21
 8004d06:	d527      	bpl.n	8004d58 <__ssputs_r+0x8c>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	f7ff ff53 	bl	8004bb4 <_malloc_r>
 8004d0e:	4606      	mov	r6, r0
 8004d10:	b360      	cbz	r0, 8004d6c <__ssputs_r+0xa0>
 8004d12:	464a      	mov	r2, r9
 8004d14:	6921      	ldr	r1, [r4, #16]
 8004d16:	f000 fbb9 	bl	800548c <memcpy>
 8004d1a:	89a3      	ldrh	r3, [r4, #12]
 8004d1c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d24:	81a3      	strh	r3, [r4, #12]
 8004d26:	6126      	str	r6, [r4, #16]
 8004d28:	444e      	add	r6, r9
 8004d2a:	6026      	str	r6, [r4, #0]
 8004d2c:	463e      	mov	r6, r7
 8004d2e:	6165      	str	r5, [r4, #20]
 8004d30:	eba5 0509 	sub.w	r5, r5, r9
 8004d34:	60a5      	str	r5, [r4, #8]
 8004d36:	42be      	cmp	r6, r7
 8004d38:	d900      	bls.n	8004d3c <__ssputs_r+0x70>
 8004d3a:	463e      	mov	r6, r7
 8004d3c:	4632      	mov	r2, r6
 8004d3e:	4641      	mov	r1, r8
 8004d40:	6820      	ldr	r0, [r4, #0]
 8004d42:	f000 fb6b 	bl	800541c <memmove>
 8004d46:	2000      	movs	r0, #0
 8004d48:	68a3      	ldr	r3, [r4, #8]
 8004d4a:	1b9b      	subs	r3, r3, r6
 8004d4c:	60a3      	str	r3, [r4, #8]
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	4433      	add	r3, r6
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d58:	462a      	mov	r2, r5
 8004d5a:	f000 fbac 	bl	80054b6 <_realloc_r>
 8004d5e:	4606      	mov	r6, r0
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d1e0      	bne.n	8004d26 <__ssputs_r+0x5a>
 8004d64:	4650      	mov	r0, sl
 8004d66:	6921      	ldr	r1, [r4, #16]
 8004d68:	f7ff feb4 	bl	8004ad4 <_free_r>
 8004d6c:	230c      	movs	r3, #12
 8004d6e:	f8ca 3000 	str.w	r3, [sl]
 8004d72:	89a3      	ldrh	r3, [r4, #12]
 8004d74:	f04f 30ff 	mov.w	r0, #4294967295
 8004d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d7c:	81a3      	strh	r3, [r4, #12]
 8004d7e:	e7e9      	b.n	8004d54 <__ssputs_r+0x88>

08004d80 <_svfiprintf_r>:
 8004d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d84:	4698      	mov	r8, r3
 8004d86:	898b      	ldrh	r3, [r1, #12]
 8004d88:	4607      	mov	r7, r0
 8004d8a:	061b      	lsls	r3, r3, #24
 8004d8c:	460d      	mov	r5, r1
 8004d8e:	4614      	mov	r4, r2
 8004d90:	b09d      	sub	sp, #116	; 0x74
 8004d92:	d50e      	bpl.n	8004db2 <_svfiprintf_r+0x32>
 8004d94:	690b      	ldr	r3, [r1, #16]
 8004d96:	b963      	cbnz	r3, 8004db2 <_svfiprintf_r+0x32>
 8004d98:	2140      	movs	r1, #64	; 0x40
 8004d9a:	f7ff ff0b 	bl	8004bb4 <_malloc_r>
 8004d9e:	6028      	str	r0, [r5, #0]
 8004da0:	6128      	str	r0, [r5, #16]
 8004da2:	b920      	cbnz	r0, 8004dae <_svfiprintf_r+0x2e>
 8004da4:	230c      	movs	r3, #12
 8004da6:	603b      	str	r3, [r7, #0]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	e0d0      	b.n	8004f50 <_svfiprintf_r+0x1d0>
 8004dae:	2340      	movs	r3, #64	; 0x40
 8004db0:	616b      	str	r3, [r5, #20]
 8004db2:	2300      	movs	r3, #0
 8004db4:	9309      	str	r3, [sp, #36]	; 0x24
 8004db6:	2320      	movs	r3, #32
 8004db8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dbc:	2330      	movs	r3, #48	; 0x30
 8004dbe:	f04f 0901 	mov.w	r9, #1
 8004dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dc6:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8004f68 <_svfiprintf_r+0x1e8>
 8004dca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dce:	4623      	mov	r3, r4
 8004dd0:	469a      	mov	sl, r3
 8004dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dd6:	b10a      	cbz	r2, 8004ddc <_svfiprintf_r+0x5c>
 8004dd8:	2a25      	cmp	r2, #37	; 0x25
 8004dda:	d1f9      	bne.n	8004dd0 <_svfiprintf_r+0x50>
 8004ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8004de0:	d00b      	beq.n	8004dfa <_svfiprintf_r+0x7a>
 8004de2:	465b      	mov	r3, fp
 8004de4:	4622      	mov	r2, r4
 8004de6:	4629      	mov	r1, r5
 8004de8:	4638      	mov	r0, r7
 8004dea:	f7ff ff6f 	bl	8004ccc <__ssputs_r>
 8004dee:	3001      	adds	r0, #1
 8004df0:	f000 80a9 	beq.w	8004f46 <_svfiprintf_r+0x1c6>
 8004df4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004df6:	445a      	add	r2, fp
 8004df8:	9209      	str	r2, [sp, #36]	; 0x24
 8004dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 80a1 	beq.w	8004f46 <_svfiprintf_r+0x1c6>
 8004e04:	2300      	movs	r3, #0
 8004e06:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e0e:	f10a 0a01 	add.w	sl, sl, #1
 8004e12:	9304      	str	r3, [sp, #16]
 8004e14:	9307      	str	r3, [sp, #28]
 8004e16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e1a:	931a      	str	r3, [sp, #104]	; 0x68
 8004e1c:	4654      	mov	r4, sl
 8004e1e:	2205      	movs	r2, #5
 8004e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e24:	4850      	ldr	r0, [pc, #320]	; (8004f68 <_svfiprintf_r+0x1e8>)
 8004e26:	f000 fb23 	bl	8005470 <memchr>
 8004e2a:	9a04      	ldr	r2, [sp, #16]
 8004e2c:	b9d8      	cbnz	r0, 8004e66 <_svfiprintf_r+0xe6>
 8004e2e:	06d0      	lsls	r0, r2, #27
 8004e30:	bf44      	itt	mi
 8004e32:	2320      	movmi	r3, #32
 8004e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e38:	0711      	lsls	r1, r2, #28
 8004e3a:	bf44      	itt	mi
 8004e3c:	232b      	movmi	r3, #43	; 0x2b
 8004e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e42:	f89a 3000 	ldrb.w	r3, [sl]
 8004e46:	2b2a      	cmp	r3, #42	; 0x2a
 8004e48:	d015      	beq.n	8004e76 <_svfiprintf_r+0xf6>
 8004e4a:	4654      	mov	r4, sl
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f04f 0c0a 	mov.w	ip, #10
 8004e52:	9a07      	ldr	r2, [sp, #28]
 8004e54:	4621      	mov	r1, r4
 8004e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e5a:	3b30      	subs	r3, #48	; 0x30
 8004e5c:	2b09      	cmp	r3, #9
 8004e5e:	d94d      	bls.n	8004efc <_svfiprintf_r+0x17c>
 8004e60:	b1b0      	cbz	r0, 8004e90 <_svfiprintf_r+0x110>
 8004e62:	9207      	str	r2, [sp, #28]
 8004e64:	e014      	b.n	8004e90 <_svfiprintf_r+0x110>
 8004e66:	eba0 0308 	sub.w	r3, r0, r8
 8004e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	46a2      	mov	sl, r4
 8004e72:	9304      	str	r3, [sp, #16]
 8004e74:	e7d2      	b.n	8004e1c <_svfiprintf_r+0x9c>
 8004e76:	9b03      	ldr	r3, [sp, #12]
 8004e78:	1d19      	adds	r1, r3, #4
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	9103      	str	r1, [sp, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	bfbb      	ittet	lt
 8004e82:	425b      	neglt	r3, r3
 8004e84:	f042 0202 	orrlt.w	r2, r2, #2
 8004e88:	9307      	strge	r3, [sp, #28]
 8004e8a:	9307      	strlt	r3, [sp, #28]
 8004e8c:	bfb8      	it	lt
 8004e8e:	9204      	strlt	r2, [sp, #16]
 8004e90:	7823      	ldrb	r3, [r4, #0]
 8004e92:	2b2e      	cmp	r3, #46	; 0x2e
 8004e94:	d10c      	bne.n	8004eb0 <_svfiprintf_r+0x130>
 8004e96:	7863      	ldrb	r3, [r4, #1]
 8004e98:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9a:	d134      	bne.n	8004f06 <_svfiprintf_r+0x186>
 8004e9c:	9b03      	ldr	r3, [sp, #12]
 8004e9e:	3402      	adds	r4, #2
 8004ea0:	1d1a      	adds	r2, r3, #4
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	9203      	str	r2, [sp, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bfb8      	it	lt
 8004eaa:	f04f 33ff 	movlt.w	r3, #4294967295
 8004eae:	9305      	str	r3, [sp, #20]
 8004eb0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8004f6c <_svfiprintf_r+0x1ec>
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	7821      	ldrb	r1, [r4, #0]
 8004eba:	f000 fad9 	bl	8005470 <memchr>
 8004ebe:	b138      	cbz	r0, 8004ed0 <_svfiprintf_r+0x150>
 8004ec0:	2240      	movs	r2, #64	; 0x40
 8004ec2:	9b04      	ldr	r3, [sp, #16]
 8004ec4:	eba0 000a 	sub.w	r0, r0, sl
 8004ec8:	4082      	lsls	r2, r0
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	3401      	adds	r4, #1
 8004ece:	9304      	str	r3, [sp, #16]
 8004ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed4:	2206      	movs	r2, #6
 8004ed6:	4826      	ldr	r0, [pc, #152]	; (8004f70 <_svfiprintf_r+0x1f0>)
 8004ed8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004edc:	f000 fac8 	bl	8005470 <memchr>
 8004ee0:	2800      	cmp	r0, #0
 8004ee2:	d038      	beq.n	8004f56 <_svfiprintf_r+0x1d6>
 8004ee4:	4b23      	ldr	r3, [pc, #140]	; (8004f74 <_svfiprintf_r+0x1f4>)
 8004ee6:	bb1b      	cbnz	r3, 8004f30 <_svfiprintf_r+0x1b0>
 8004ee8:	9b03      	ldr	r3, [sp, #12]
 8004eea:	3307      	adds	r3, #7
 8004eec:	f023 0307 	bic.w	r3, r3, #7
 8004ef0:	3308      	adds	r3, #8
 8004ef2:	9303      	str	r3, [sp, #12]
 8004ef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef6:	4433      	add	r3, r6
 8004ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8004efa:	e768      	b.n	8004dce <_svfiprintf_r+0x4e>
 8004efc:	460c      	mov	r4, r1
 8004efe:	2001      	movs	r0, #1
 8004f00:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f04:	e7a6      	b.n	8004e54 <_svfiprintf_r+0xd4>
 8004f06:	2300      	movs	r3, #0
 8004f08:	f04f 0c0a 	mov.w	ip, #10
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	3401      	adds	r4, #1
 8004f10:	9305      	str	r3, [sp, #20]
 8004f12:	4620      	mov	r0, r4
 8004f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f18:	3a30      	subs	r2, #48	; 0x30
 8004f1a:	2a09      	cmp	r2, #9
 8004f1c:	d903      	bls.n	8004f26 <_svfiprintf_r+0x1a6>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0c6      	beq.n	8004eb0 <_svfiprintf_r+0x130>
 8004f22:	9105      	str	r1, [sp, #20]
 8004f24:	e7c4      	b.n	8004eb0 <_svfiprintf_r+0x130>
 8004f26:	4604      	mov	r4, r0
 8004f28:	2301      	movs	r3, #1
 8004f2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f2e:	e7f0      	b.n	8004f12 <_svfiprintf_r+0x192>
 8004f30:	ab03      	add	r3, sp, #12
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	462a      	mov	r2, r5
 8004f36:	4638      	mov	r0, r7
 8004f38:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <_svfiprintf_r+0x1f8>)
 8004f3a:	a904      	add	r1, sp, #16
 8004f3c:	f3af 8000 	nop.w
 8004f40:	1c42      	adds	r2, r0, #1
 8004f42:	4606      	mov	r6, r0
 8004f44:	d1d6      	bne.n	8004ef4 <_svfiprintf_r+0x174>
 8004f46:	89ab      	ldrh	r3, [r5, #12]
 8004f48:	065b      	lsls	r3, r3, #25
 8004f4a:	f53f af2d 	bmi.w	8004da8 <_svfiprintf_r+0x28>
 8004f4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f50:	b01d      	add	sp, #116	; 0x74
 8004f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f56:	ab03      	add	r3, sp, #12
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	462a      	mov	r2, r5
 8004f5c:	4638      	mov	r0, r7
 8004f5e:	4b06      	ldr	r3, [pc, #24]	; (8004f78 <_svfiprintf_r+0x1f8>)
 8004f60:	a904      	add	r1, sp, #16
 8004f62:	f000 f87d 	bl	8005060 <_printf_i>
 8004f66:	e7eb      	b.n	8004f40 <_svfiprintf_r+0x1c0>
 8004f68:	080062f0 	.word	0x080062f0
 8004f6c:	080062f6 	.word	0x080062f6
 8004f70:	080062fa 	.word	0x080062fa
 8004f74:	00000000 	.word	0x00000000
 8004f78:	08004ccd 	.word	0x08004ccd

08004f7c <_printf_common>:
 8004f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f80:	4616      	mov	r6, r2
 8004f82:	4699      	mov	r9, r3
 8004f84:	688a      	ldr	r2, [r1, #8]
 8004f86:	690b      	ldr	r3, [r1, #16]
 8004f88:	4607      	mov	r7, r0
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	bfb8      	it	lt
 8004f8e:	4613      	movlt	r3, r2
 8004f90:	6033      	str	r3, [r6, #0]
 8004f92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f96:	460c      	mov	r4, r1
 8004f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f9c:	b10a      	cbz	r2, 8004fa2 <_printf_common+0x26>
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	6823      	ldr	r3, [r4, #0]
 8004fa4:	0699      	lsls	r1, r3, #26
 8004fa6:	bf42      	ittt	mi
 8004fa8:	6833      	ldrmi	r3, [r6, #0]
 8004faa:	3302      	addmi	r3, #2
 8004fac:	6033      	strmi	r3, [r6, #0]
 8004fae:	6825      	ldr	r5, [r4, #0]
 8004fb0:	f015 0506 	ands.w	r5, r5, #6
 8004fb4:	d106      	bne.n	8004fc4 <_printf_common+0x48>
 8004fb6:	f104 0a19 	add.w	sl, r4, #25
 8004fba:	68e3      	ldr	r3, [r4, #12]
 8004fbc:	6832      	ldr	r2, [r6, #0]
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	42ab      	cmp	r3, r5
 8004fc2:	dc2b      	bgt.n	800501c <_printf_common+0xa0>
 8004fc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fc8:	1e13      	subs	r3, r2, #0
 8004fca:	6822      	ldr	r2, [r4, #0]
 8004fcc:	bf18      	it	ne
 8004fce:	2301      	movne	r3, #1
 8004fd0:	0692      	lsls	r2, r2, #26
 8004fd2:	d430      	bmi.n	8005036 <_printf_common+0xba>
 8004fd4:	4649      	mov	r1, r9
 8004fd6:	4638      	mov	r0, r7
 8004fd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fdc:	47c0      	blx	r8
 8004fde:	3001      	adds	r0, #1
 8004fe0:	d023      	beq.n	800502a <_printf_common+0xae>
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	6922      	ldr	r2, [r4, #16]
 8004fe6:	f003 0306 	and.w	r3, r3, #6
 8004fea:	2b04      	cmp	r3, #4
 8004fec:	bf14      	ite	ne
 8004fee:	2500      	movne	r5, #0
 8004ff0:	6833      	ldreq	r3, [r6, #0]
 8004ff2:	f04f 0600 	mov.w	r6, #0
 8004ff6:	bf08      	it	eq
 8004ff8:	68e5      	ldreq	r5, [r4, #12]
 8004ffa:	f104 041a 	add.w	r4, r4, #26
 8004ffe:	bf08      	it	eq
 8005000:	1aed      	subeq	r5, r5, r3
 8005002:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005006:	bf08      	it	eq
 8005008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800500c:	4293      	cmp	r3, r2
 800500e:	bfc4      	itt	gt
 8005010:	1a9b      	subgt	r3, r3, r2
 8005012:	18ed      	addgt	r5, r5, r3
 8005014:	42b5      	cmp	r5, r6
 8005016:	d11a      	bne.n	800504e <_printf_common+0xd2>
 8005018:	2000      	movs	r0, #0
 800501a:	e008      	b.n	800502e <_printf_common+0xb2>
 800501c:	2301      	movs	r3, #1
 800501e:	4652      	mov	r2, sl
 8005020:	4649      	mov	r1, r9
 8005022:	4638      	mov	r0, r7
 8005024:	47c0      	blx	r8
 8005026:	3001      	adds	r0, #1
 8005028:	d103      	bne.n	8005032 <_printf_common+0xb6>
 800502a:	f04f 30ff 	mov.w	r0, #4294967295
 800502e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005032:	3501      	adds	r5, #1
 8005034:	e7c1      	b.n	8004fba <_printf_common+0x3e>
 8005036:	2030      	movs	r0, #48	; 0x30
 8005038:	18e1      	adds	r1, r4, r3
 800503a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005044:	4422      	add	r2, r4
 8005046:	3302      	adds	r3, #2
 8005048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800504c:	e7c2      	b.n	8004fd4 <_printf_common+0x58>
 800504e:	2301      	movs	r3, #1
 8005050:	4622      	mov	r2, r4
 8005052:	4649      	mov	r1, r9
 8005054:	4638      	mov	r0, r7
 8005056:	47c0      	blx	r8
 8005058:	3001      	adds	r0, #1
 800505a:	d0e6      	beq.n	800502a <_printf_common+0xae>
 800505c:	3601      	adds	r6, #1
 800505e:	e7d9      	b.n	8005014 <_printf_common+0x98>

08005060 <_printf_i>:
 8005060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005064:	7e0f      	ldrb	r7, [r1, #24]
 8005066:	4691      	mov	r9, r2
 8005068:	2f78      	cmp	r7, #120	; 0x78
 800506a:	4680      	mov	r8, r0
 800506c:	460c      	mov	r4, r1
 800506e:	469a      	mov	sl, r3
 8005070:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005076:	d807      	bhi.n	8005088 <_printf_i+0x28>
 8005078:	2f62      	cmp	r7, #98	; 0x62
 800507a:	d80a      	bhi.n	8005092 <_printf_i+0x32>
 800507c:	2f00      	cmp	r7, #0
 800507e:	f000 80d5 	beq.w	800522c <_printf_i+0x1cc>
 8005082:	2f58      	cmp	r7, #88	; 0x58
 8005084:	f000 80c1 	beq.w	800520a <_printf_i+0x1aa>
 8005088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800508c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005090:	e03a      	b.n	8005108 <_printf_i+0xa8>
 8005092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005096:	2b15      	cmp	r3, #21
 8005098:	d8f6      	bhi.n	8005088 <_printf_i+0x28>
 800509a:	a101      	add	r1, pc, #4	; (adr r1, 80050a0 <_printf_i+0x40>)
 800509c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050a0:	080050f9 	.word	0x080050f9
 80050a4:	0800510d 	.word	0x0800510d
 80050a8:	08005089 	.word	0x08005089
 80050ac:	08005089 	.word	0x08005089
 80050b0:	08005089 	.word	0x08005089
 80050b4:	08005089 	.word	0x08005089
 80050b8:	0800510d 	.word	0x0800510d
 80050bc:	08005089 	.word	0x08005089
 80050c0:	08005089 	.word	0x08005089
 80050c4:	08005089 	.word	0x08005089
 80050c8:	08005089 	.word	0x08005089
 80050cc:	08005213 	.word	0x08005213
 80050d0:	08005139 	.word	0x08005139
 80050d4:	080051cd 	.word	0x080051cd
 80050d8:	08005089 	.word	0x08005089
 80050dc:	08005089 	.word	0x08005089
 80050e0:	08005235 	.word	0x08005235
 80050e4:	08005089 	.word	0x08005089
 80050e8:	08005139 	.word	0x08005139
 80050ec:	08005089 	.word	0x08005089
 80050f0:	08005089 	.word	0x08005089
 80050f4:	080051d5 	.word	0x080051d5
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	1d1a      	adds	r2, r3, #4
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	602a      	str	r2, [r5, #0]
 8005100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005108:	2301      	movs	r3, #1
 800510a:	e0a0      	b.n	800524e <_printf_i+0x1ee>
 800510c:	6820      	ldr	r0, [r4, #0]
 800510e:	682b      	ldr	r3, [r5, #0]
 8005110:	0607      	lsls	r7, r0, #24
 8005112:	f103 0104 	add.w	r1, r3, #4
 8005116:	6029      	str	r1, [r5, #0]
 8005118:	d501      	bpl.n	800511e <_printf_i+0xbe>
 800511a:	681e      	ldr	r6, [r3, #0]
 800511c:	e003      	b.n	8005126 <_printf_i+0xc6>
 800511e:	0646      	lsls	r6, r0, #25
 8005120:	d5fb      	bpl.n	800511a <_printf_i+0xba>
 8005122:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005126:	2e00      	cmp	r6, #0
 8005128:	da03      	bge.n	8005132 <_printf_i+0xd2>
 800512a:	232d      	movs	r3, #45	; 0x2d
 800512c:	4276      	negs	r6, r6
 800512e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005132:	230a      	movs	r3, #10
 8005134:	4859      	ldr	r0, [pc, #356]	; (800529c <_printf_i+0x23c>)
 8005136:	e012      	b.n	800515e <_printf_i+0xfe>
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	6820      	ldr	r0, [r4, #0]
 800513c:	1d19      	adds	r1, r3, #4
 800513e:	6029      	str	r1, [r5, #0]
 8005140:	0605      	lsls	r5, r0, #24
 8005142:	d501      	bpl.n	8005148 <_printf_i+0xe8>
 8005144:	681e      	ldr	r6, [r3, #0]
 8005146:	e002      	b.n	800514e <_printf_i+0xee>
 8005148:	0641      	lsls	r1, r0, #25
 800514a:	d5fb      	bpl.n	8005144 <_printf_i+0xe4>
 800514c:	881e      	ldrh	r6, [r3, #0]
 800514e:	2f6f      	cmp	r7, #111	; 0x6f
 8005150:	bf0c      	ite	eq
 8005152:	2308      	moveq	r3, #8
 8005154:	230a      	movne	r3, #10
 8005156:	4851      	ldr	r0, [pc, #324]	; (800529c <_printf_i+0x23c>)
 8005158:	2100      	movs	r1, #0
 800515a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800515e:	6865      	ldr	r5, [r4, #4]
 8005160:	2d00      	cmp	r5, #0
 8005162:	bfa8      	it	ge
 8005164:	6821      	ldrge	r1, [r4, #0]
 8005166:	60a5      	str	r5, [r4, #8]
 8005168:	bfa4      	itt	ge
 800516a:	f021 0104 	bicge.w	r1, r1, #4
 800516e:	6021      	strge	r1, [r4, #0]
 8005170:	b90e      	cbnz	r6, 8005176 <_printf_i+0x116>
 8005172:	2d00      	cmp	r5, #0
 8005174:	d04b      	beq.n	800520e <_printf_i+0x1ae>
 8005176:	4615      	mov	r5, r2
 8005178:	fbb6 f1f3 	udiv	r1, r6, r3
 800517c:	fb03 6711 	mls	r7, r3, r1, r6
 8005180:	5dc7      	ldrb	r7, [r0, r7]
 8005182:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005186:	4637      	mov	r7, r6
 8005188:	42bb      	cmp	r3, r7
 800518a:	460e      	mov	r6, r1
 800518c:	d9f4      	bls.n	8005178 <_printf_i+0x118>
 800518e:	2b08      	cmp	r3, #8
 8005190:	d10b      	bne.n	80051aa <_printf_i+0x14a>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	07de      	lsls	r6, r3, #31
 8005196:	d508      	bpl.n	80051aa <_printf_i+0x14a>
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	6861      	ldr	r1, [r4, #4]
 800519c:	4299      	cmp	r1, r3
 800519e:	bfde      	ittt	le
 80051a0:	2330      	movle	r3, #48	; 0x30
 80051a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051aa:	1b52      	subs	r2, r2, r5
 80051ac:	6122      	str	r2, [r4, #16]
 80051ae:	464b      	mov	r3, r9
 80051b0:	4621      	mov	r1, r4
 80051b2:	4640      	mov	r0, r8
 80051b4:	f8cd a000 	str.w	sl, [sp]
 80051b8:	aa03      	add	r2, sp, #12
 80051ba:	f7ff fedf 	bl	8004f7c <_printf_common>
 80051be:	3001      	adds	r0, #1
 80051c0:	d14a      	bne.n	8005258 <_printf_i+0x1f8>
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295
 80051c6:	b004      	add	sp, #16
 80051c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	f043 0320 	orr.w	r3, r3, #32
 80051d2:	6023      	str	r3, [r4, #0]
 80051d4:	2778      	movs	r7, #120	; 0x78
 80051d6:	4832      	ldr	r0, [pc, #200]	; (80052a0 <_printf_i+0x240>)
 80051d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051dc:	6823      	ldr	r3, [r4, #0]
 80051de:	6829      	ldr	r1, [r5, #0]
 80051e0:	061f      	lsls	r7, r3, #24
 80051e2:	f851 6b04 	ldr.w	r6, [r1], #4
 80051e6:	d402      	bmi.n	80051ee <_printf_i+0x18e>
 80051e8:	065f      	lsls	r7, r3, #25
 80051ea:	bf48      	it	mi
 80051ec:	b2b6      	uxthmi	r6, r6
 80051ee:	07df      	lsls	r7, r3, #31
 80051f0:	bf48      	it	mi
 80051f2:	f043 0320 	orrmi.w	r3, r3, #32
 80051f6:	6029      	str	r1, [r5, #0]
 80051f8:	bf48      	it	mi
 80051fa:	6023      	strmi	r3, [r4, #0]
 80051fc:	b91e      	cbnz	r6, 8005206 <_printf_i+0x1a6>
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	f023 0320 	bic.w	r3, r3, #32
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	2310      	movs	r3, #16
 8005208:	e7a6      	b.n	8005158 <_printf_i+0xf8>
 800520a:	4824      	ldr	r0, [pc, #144]	; (800529c <_printf_i+0x23c>)
 800520c:	e7e4      	b.n	80051d8 <_printf_i+0x178>
 800520e:	4615      	mov	r5, r2
 8005210:	e7bd      	b.n	800518e <_printf_i+0x12e>
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	6826      	ldr	r6, [r4, #0]
 8005216:	1d18      	adds	r0, r3, #4
 8005218:	6961      	ldr	r1, [r4, #20]
 800521a:	6028      	str	r0, [r5, #0]
 800521c:	0635      	lsls	r5, r6, #24
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	d501      	bpl.n	8005226 <_printf_i+0x1c6>
 8005222:	6019      	str	r1, [r3, #0]
 8005224:	e002      	b.n	800522c <_printf_i+0x1cc>
 8005226:	0670      	lsls	r0, r6, #25
 8005228:	d5fb      	bpl.n	8005222 <_printf_i+0x1c2>
 800522a:	8019      	strh	r1, [r3, #0]
 800522c:	2300      	movs	r3, #0
 800522e:	4615      	mov	r5, r2
 8005230:	6123      	str	r3, [r4, #16]
 8005232:	e7bc      	b.n	80051ae <_printf_i+0x14e>
 8005234:	682b      	ldr	r3, [r5, #0]
 8005236:	2100      	movs	r1, #0
 8005238:	1d1a      	adds	r2, r3, #4
 800523a:	602a      	str	r2, [r5, #0]
 800523c:	681d      	ldr	r5, [r3, #0]
 800523e:	6862      	ldr	r2, [r4, #4]
 8005240:	4628      	mov	r0, r5
 8005242:	f000 f915 	bl	8005470 <memchr>
 8005246:	b108      	cbz	r0, 800524c <_printf_i+0x1ec>
 8005248:	1b40      	subs	r0, r0, r5
 800524a:	6060      	str	r0, [r4, #4]
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	6123      	str	r3, [r4, #16]
 8005250:	2300      	movs	r3, #0
 8005252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005256:	e7aa      	b.n	80051ae <_printf_i+0x14e>
 8005258:	462a      	mov	r2, r5
 800525a:	4649      	mov	r1, r9
 800525c:	4640      	mov	r0, r8
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	47d0      	blx	sl
 8005262:	3001      	adds	r0, #1
 8005264:	d0ad      	beq.n	80051c2 <_printf_i+0x162>
 8005266:	6823      	ldr	r3, [r4, #0]
 8005268:	079b      	lsls	r3, r3, #30
 800526a:	d413      	bmi.n	8005294 <_printf_i+0x234>
 800526c:	68e0      	ldr	r0, [r4, #12]
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	4298      	cmp	r0, r3
 8005272:	bfb8      	it	lt
 8005274:	4618      	movlt	r0, r3
 8005276:	e7a6      	b.n	80051c6 <_printf_i+0x166>
 8005278:	2301      	movs	r3, #1
 800527a:	4632      	mov	r2, r6
 800527c:	4649      	mov	r1, r9
 800527e:	4640      	mov	r0, r8
 8005280:	47d0      	blx	sl
 8005282:	3001      	adds	r0, #1
 8005284:	d09d      	beq.n	80051c2 <_printf_i+0x162>
 8005286:	3501      	adds	r5, #1
 8005288:	68e3      	ldr	r3, [r4, #12]
 800528a:	9903      	ldr	r1, [sp, #12]
 800528c:	1a5b      	subs	r3, r3, r1
 800528e:	42ab      	cmp	r3, r5
 8005290:	dcf2      	bgt.n	8005278 <_printf_i+0x218>
 8005292:	e7eb      	b.n	800526c <_printf_i+0x20c>
 8005294:	2500      	movs	r5, #0
 8005296:	f104 0619 	add.w	r6, r4, #25
 800529a:	e7f5      	b.n	8005288 <_printf_i+0x228>
 800529c:	08006301 	.word	0x08006301
 80052a0:	08006312 	.word	0x08006312

080052a4 <__sflush_r>:
 80052a4:	898a      	ldrh	r2, [r1, #12]
 80052a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052a8:	4605      	mov	r5, r0
 80052aa:	0710      	lsls	r0, r2, #28
 80052ac:	460c      	mov	r4, r1
 80052ae:	d457      	bmi.n	8005360 <__sflush_r+0xbc>
 80052b0:	684b      	ldr	r3, [r1, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	dc04      	bgt.n	80052c0 <__sflush_r+0x1c>
 80052b6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dc01      	bgt.n	80052c0 <__sflush_r+0x1c>
 80052bc:	2000      	movs	r0, #0
 80052be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052c2:	2e00      	cmp	r6, #0
 80052c4:	d0fa      	beq.n	80052bc <__sflush_r+0x18>
 80052c6:	2300      	movs	r3, #0
 80052c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052cc:	682f      	ldr	r7, [r5, #0]
 80052ce:	6a21      	ldr	r1, [r4, #32]
 80052d0:	602b      	str	r3, [r5, #0]
 80052d2:	d032      	beq.n	800533a <__sflush_r+0x96>
 80052d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052d6:	89a3      	ldrh	r3, [r4, #12]
 80052d8:	075a      	lsls	r2, r3, #29
 80052da:	d505      	bpl.n	80052e8 <__sflush_r+0x44>
 80052dc:	6863      	ldr	r3, [r4, #4]
 80052de:	1ac0      	subs	r0, r0, r3
 80052e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052e2:	b10b      	cbz	r3, 80052e8 <__sflush_r+0x44>
 80052e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052e6:	1ac0      	subs	r0, r0, r3
 80052e8:	2300      	movs	r3, #0
 80052ea:	4602      	mov	r2, r0
 80052ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ee:	4628      	mov	r0, r5
 80052f0:	6a21      	ldr	r1, [r4, #32]
 80052f2:	47b0      	blx	r6
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	89a3      	ldrh	r3, [r4, #12]
 80052f8:	d106      	bne.n	8005308 <__sflush_r+0x64>
 80052fa:	6829      	ldr	r1, [r5, #0]
 80052fc:	291d      	cmp	r1, #29
 80052fe:	d82b      	bhi.n	8005358 <__sflush_r+0xb4>
 8005300:	4a28      	ldr	r2, [pc, #160]	; (80053a4 <__sflush_r+0x100>)
 8005302:	410a      	asrs	r2, r1
 8005304:	07d6      	lsls	r6, r2, #31
 8005306:	d427      	bmi.n	8005358 <__sflush_r+0xb4>
 8005308:	2200      	movs	r2, #0
 800530a:	6062      	str	r2, [r4, #4]
 800530c:	6922      	ldr	r2, [r4, #16]
 800530e:	04d9      	lsls	r1, r3, #19
 8005310:	6022      	str	r2, [r4, #0]
 8005312:	d504      	bpl.n	800531e <__sflush_r+0x7a>
 8005314:	1c42      	adds	r2, r0, #1
 8005316:	d101      	bne.n	800531c <__sflush_r+0x78>
 8005318:	682b      	ldr	r3, [r5, #0]
 800531a:	b903      	cbnz	r3, 800531e <__sflush_r+0x7a>
 800531c:	6560      	str	r0, [r4, #84]	; 0x54
 800531e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005320:	602f      	str	r7, [r5, #0]
 8005322:	2900      	cmp	r1, #0
 8005324:	d0ca      	beq.n	80052bc <__sflush_r+0x18>
 8005326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800532a:	4299      	cmp	r1, r3
 800532c:	d002      	beq.n	8005334 <__sflush_r+0x90>
 800532e:	4628      	mov	r0, r5
 8005330:	f7ff fbd0 	bl	8004ad4 <_free_r>
 8005334:	2000      	movs	r0, #0
 8005336:	6360      	str	r0, [r4, #52]	; 0x34
 8005338:	e7c1      	b.n	80052be <__sflush_r+0x1a>
 800533a:	2301      	movs	r3, #1
 800533c:	4628      	mov	r0, r5
 800533e:	47b0      	blx	r6
 8005340:	1c41      	adds	r1, r0, #1
 8005342:	d1c8      	bne.n	80052d6 <__sflush_r+0x32>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0c5      	beq.n	80052d6 <__sflush_r+0x32>
 800534a:	2b1d      	cmp	r3, #29
 800534c:	d001      	beq.n	8005352 <__sflush_r+0xae>
 800534e:	2b16      	cmp	r3, #22
 8005350:	d101      	bne.n	8005356 <__sflush_r+0xb2>
 8005352:	602f      	str	r7, [r5, #0]
 8005354:	e7b2      	b.n	80052bc <__sflush_r+0x18>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	e7ae      	b.n	80052be <__sflush_r+0x1a>
 8005360:	690f      	ldr	r7, [r1, #16]
 8005362:	2f00      	cmp	r7, #0
 8005364:	d0aa      	beq.n	80052bc <__sflush_r+0x18>
 8005366:	0793      	lsls	r3, r2, #30
 8005368:	bf18      	it	ne
 800536a:	2300      	movne	r3, #0
 800536c:	680e      	ldr	r6, [r1, #0]
 800536e:	bf08      	it	eq
 8005370:	694b      	ldreq	r3, [r1, #20]
 8005372:	1bf6      	subs	r6, r6, r7
 8005374:	600f      	str	r7, [r1, #0]
 8005376:	608b      	str	r3, [r1, #8]
 8005378:	2e00      	cmp	r6, #0
 800537a:	dd9f      	ble.n	80052bc <__sflush_r+0x18>
 800537c:	4633      	mov	r3, r6
 800537e:	463a      	mov	r2, r7
 8005380:	4628      	mov	r0, r5
 8005382:	6a21      	ldr	r1, [r4, #32]
 8005384:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005388:	47e0      	blx	ip
 800538a:	2800      	cmp	r0, #0
 800538c:	dc06      	bgt.n	800539c <__sflush_r+0xf8>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f04f 30ff 	mov.w	r0, #4294967295
 8005394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	e790      	b.n	80052be <__sflush_r+0x1a>
 800539c:	4407      	add	r7, r0
 800539e:	1a36      	subs	r6, r6, r0
 80053a0:	e7ea      	b.n	8005378 <__sflush_r+0xd4>
 80053a2:	bf00      	nop
 80053a4:	dfbffffe 	.word	0xdfbffffe

080053a8 <_fflush_r>:
 80053a8:	b538      	push	{r3, r4, r5, lr}
 80053aa:	690b      	ldr	r3, [r1, #16]
 80053ac:	4605      	mov	r5, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	b913      	cbnz	r3, 80053b8 <_fflush_r+0x10>
 80053b2:	2500      	movs	r5, #0
 80053b4:	4628      	mov	r0, r5
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	b118      	cbz	r0, 80053c2 <_fflush_r+0x1a>
 80053ba:	6a03      	ldr	r3, [r0, #32]
 80053bc:	b90b      	cbnz	r3, 80053c2 <_fflush_r+0x1a>
 80053be:	f7ff f9c5 	bl	800474c <__sinit>
 80053c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0f3      	beq.n	80053b2 <_fflush_r+0xa>
 80053ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053cc:	07d0      	lsls	r0, r2, #31
 80053ce:	d404      	bmi.n	80053da <_fflush_r+0x32>
 80053d0:	0599      	lsls	r1, r3, #22
 80053d2:	d402      	bmi.n	80053da <_fflush_r+0x32>
 80053d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053d6:	f7ff fb5d 	bl	8004a94 <__retarget_lock_acquire_recursive>
 80053da:	4628      	mov	r0, r5
 80053dc:	4621      	mov	r1, r4
 80053de:	f7ff ff61 	bl	80052a4 <__sflush_r>
 80053e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053e4:	4605      	mov	r5, r0
 80053e6:	07da      	lsls	r2, r3, #31
 80053e8:	d4e4      	bmi.n	80053b4 <_fflush_r+0xc>
 80053ea:	89a3      	ldrh	r3, [r4, #12]
 80053ec:	059b      	lsls	r3, r3, #22
 80053ee:	d4e1      	bmi.n	80053b4 <_fflush_r+0xc>
 80053f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053f2:	f7ff fb50 	bl	8004a96 <__retarget_lock_release_recursive>
 80053f6:	e7dd      	b.n	80053b4 <_fflush_r+0xc>

080053f8 <fiprintf>:
 80053f8:	b40e      	push	{r1, r2, r3}
 80053fa:	b503      	push	{r0, r1, lr}
 80053fc:	4601      	mov	r1, r0
 80053fe:	ab03      	add	r3, sp, #12
 8005400:	4805      	ldr	r0, [pc, #20]	; (8005418 <fiprintf+0x20>)
 8005402:	f853 2b04 	ldr.w	r2, [r3], #4
 8005406:	6800      	ldr	r0, [r0, #0]
 8005408:	9301      	str	r3, [sp, #4]
 800540a:	f000 f8ab 	bl	8005564 <_vfiprintf_r>
 800540e:	b002      	add	sp, #8
 8005410:	f85d eb04 	ldr.w	lr, [sp], #4
 8005414:	b003      	add	sp, #12
 8005416:	4770      	bx	lr
 8005418:	20000068 	.word	0x20000068

0800541c <memmove>:
 800541c:	4288      	cmp	r0, r1
 800541e:	b510      	push	{r4, lr}
 8005420:	eb01 0402 	add.w	r4, r1, r2
 8005424:	d902      	bls.n	800542c <memmove+0x10>
 8005426:	4284      	cmp	r4, r0
 8005428:	4623      	mov	r3, r4
 800542a:	d807      	bhi.n	800543c <memmove+0x20>
 800542c:	1e43      	subs	r3, r0, #1
 800542e:	42a1      	cmp	r1, r4
 8005430:	d008      	beq.n	8005444 <memmove+0x28>
 8005432:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005436:	f803 2f01 	strb.w	r2, [r3, #1]!
 800543a:	e7f8      	b.n	800542e <memmove+0x12>
 800543c:	4601      	mov	r1, r0
 800543e:	4402      	add	r2, r0
 8005440:	428a      	cmp	r2, r1
 8005442:	d100      	bne.n	8005446 <memmove+0x2a>
 8005444:	bd10      	pop	{r4, pc}
 8005446:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800544a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800544e:	e7f7      	b.n	8005440 <memmove+0x24>

08005450 <_sbrk_r>:
 8005450:	b538      	push	{r3, r4, r5, lr}
 8005452:	2300      	movs	r3, #0
 8005454:	4d05      	ldr	r5, [pc, #20]	; (800546c <_sbrk_r+0x1c>)
 8005456:	4604      	mov	r4, r0
 8005458:	4608      	mov	r0, r1
 800545a:	602b      	str	r3, [r5, #0]
 800545c:	f7fc fd2a 	bl	8001eb4 <_sbrk>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_sbrk_r+0x1a>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_sbrk_r+0x1a>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	200005a4 	.word	0x200005a4

08005470 <memchr>:
 8005470:	4603      	mov	r3, r0
 8005472:	b510      	push	{r4, lr}
 8005474:	b2c9      	uxtb	r1, r1
 8005476:	4402      	add	r2, r0
 8005478:	4293      	cmp	r3, r2
 800547a:	4618      	mov	r0, r3
 800547c:	d101      	bne.n	8005482 <memchr+0x12>
 800547e:	2000      	movs	r0, #0
 8005480:	e003      	b.n	800548a <memchr+0x1a>
 8005482:	7804      	ldrb	r4, [r0, #0]
 8005484:	3301      	adds	r3, #1
 8005486:	428c      	cmp	r4, r1
 8005488:	d1f6      	bne.n	8005478 <memchr+0x8>
 800548a:	bd10      	pop	{r4, pc}

0800548c <memcpy>:
 800548c:	440a      	add	r2, r1
 800548e:	4291      	cmp	r1, r2
 8005490:	f100 33ff 	add.w	r3, r0, #4294967295
 8005494:	d100      	bne.n	8005498 <memcpy+0xc>
 8005496:	4770      	bx	lr
 8005498:	b510      	push	{r4, lr}
 800549a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549e:	4291      	cmp	r1, r2
 80054a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054a4:	d1f9      	bne.n	800549a <memcpy+0xe>
 80054a6:	bd10      	pop	{r4, pc}

080054a8 <abort>:
 80054a8:	2006      	movs	r0, #6
 80054aa:	b508      	push	{r3, lr}
 80054ac:	f000 fa32 	bl	8005914 <raise>
 80054b0:	2001      	movs	r0, #1
 80054b2:	f7fc fc8c 	bl	8001dce <_exit>

080054b6 <_realloc_r>:
 80054b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054ba:	4680      	mov	r8, r0
 80054bc:	4614      	mov	r4, r2
 80054be:	460e      	mov	r6, r1
 80054c0:	b921      	cbnz	r1, 80054cc <_realloc_r+0x16>
 80054c2:	4611      	mov	r1, r2
 80054c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c8:	f7ff bb74 	b.w	8004bb4 <_malloc_r>
 80054cc:	b92a      	cbnz	r2, 80054da <_realloc_r+0x24>
 80054ce:	f7ff fb01 	bl	8004ad4 <_free_r>
 80054d2:	4625      	mov	r5, r4
 80054d4:	4628      	mov	r0, r5
 80054d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054da:	f000 fa37 	bl	800594c <_malloc_usable_size_r>
 80054de:	4284      	cmp	r4, r0
 80054e0:	4607      	mov	r7, r0
 80054e2:	d802      	bhi.n	80054ea <_realloc_r+0x34>
 80054e4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054e8:	d812      	bhi.n	8005510 <_realloc_r+0x5a>
 80054ea:	4621      	mov	r1, r4
 80054ec:	4640      	mov	r0, r8
 80054ee:	f7ff fb61 	bl	8004bb4 <_malloc_r>
 80054f2:	4605      	mov	r5, r0
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d0ed      	beq.n	80054d4 <_realloc_r+0x1e>
 80054f8:	42bc      	cmp	r4, r7
 80054fa:	4622      	mov	r2, r4
 80054fc:	4631      	mov	r1, r6
 80054fe:	bf28      	it	cs
 8005500:	463a      	movcs	r2, r7
 8005502:	f7ff ffc3 	bl	800548c <memcpy>
 8005506:	4631      	mov	r1, r6
 8005508:	4640      	mov	r0, r8
 800550a:	f7ff fae3 	bl	8004ad4 <_free_r>
 800550e:	e7e1      	b.n	80054d4 <_realloc_r+0x1e>
 8005510:	4635      	mov	r5, r6
 8005512:	e7df      	b.n	80054d4 <_realloc_r+0x1e>

08005514 <__sfputc_r>:
 8005514:	6893      	ldr	r3, [r2, #8]
 8005516:	b410      	push	{r4}
 8005518:	3b01      	subs	r3, #1
 800551a:	2b00      	cmp	r3, #0
 800551c:	6093      	str	r3, [r2, #8]
 800551e:	da07      	bge.n	8005530 <__sfputc_r+0x1c>
 8005520:	6994      	ldr	r4, [r2, #24]
 8005522:	42a3      	cmp	r3, r4
 8005524:	db01      	blt.n	800552a <__sfputc_r+0x16>
 8005526:	290a      	cmp	r1, #10
 8005528:	d102      	bne.n	8005530 <__sfputc_r+0x1c>
 800552a:	bc10      	pop	{r4}
 800552c:	f000 b934 	b.w	8005798 <__swbuf_r>
 8005530:	6813      	ldr	r3, [r2, #0]
 8005532:	1c58      	adds	r0, r3, #1
 8005534:	6010      	str	r0, [r2, #0]
 8005536:	7019      	strb	r1, [r3, #0]
 8005538:	4608      	mov	r0, r1
 800553a:	bc10      	pop	{r4}
 800553c:	4770      	bx	lr

0800553e <__sfputs_r>:
 800553e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005540:	4606      	mov	r6, r0
 8005542:	460f      	mov	r7, r1
 8005544:	4614      	mov	r4, r2
 8005546:	18d5      	adds	r5, r2, r3
 8005548:	42ac      	cmp	r4, r5
 800554a:	d101      	bne.n	8005550 <__sfputs_r+0x12>
 800554c:	2000      	movs	r0, #0
 800554e:	e007      	b.n	8005560 <__sfputs_r+0x22>
 8005550:	463a      	mov	r2, r7
 8005552:	4630      	mov	r0, r6
 8005554:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005558:	f7ff ffdc 	bl	8005514 <__sfputc_r>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d1f3      	bne.n	8005548 <__sfputs_r+0xa>
 8005560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005564 <_vfiprintf_r>:
 8005564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005568:	460d      	mov	r5, r1
 800556a:	4614      	mov	r4, r2
 800556c:	4698      	mov	r8, r3
 800556e:	4606      	mov	r6, r0
 8005570:	b09d      	sub	sp, #116	; 0x74
 8005572:	b118      	cbz	r0, 800557c <_vfiprintf_r+0x18>
 8005574:	6a03      	ldr	r3, [r0, #32]
 8005576:	b90b      	cbnz	r3, 800557c <_vfiprintf_r+0x18>
 8005578:	f7ff f8e8 	bl	800474c <__sinit>
 800557c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800557e:	07d9      	lsls	r1, r3, #31
 8005580:	d405      	bmi.n	800558e <_vfiprintf_r+0x2a>
 8005582:	89ab      	ldrh	r3, [r5, #12]
 8005584:	059a      	lsls	r2, r3, #22
 8005586:	d402      	bmi.n	800558e <_vfiprintf_r+0x2a>
 8005588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800558a:	f7ff fa83 	bl	8004a94 <__retarget_lock_acquire_recursive>
 800558e:	89ab      	ldrh	r3, [r5, #12]
 8005590:	071b      	lsls	r3, r3, #28
 8005592:	d501      	bpl.n	8005598 <_vfiprintf_r+0x34>
 8005594:	692b      	ldr	r3, [r5, #16]
 8005596:	b99b      	cbnz	r3, 80055c0 <_vfiprintf_r+0x5c>
 8005598:	4629      	mov	r1, r5
 800559a:	4630      	mov	r0, r6
 800559c:	f000 f93a 	bl	8005814 <__swsetup_r>
 80055a0:	b170      	cbz	r0, 80055c0 <_vfiprintf_r+0x5c>
 80055a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80055a4:	07dc      	lsls	r4, r3, #31
 80055a6:	d504      	bpl.n	80055b2 <_vfiprintf_r+0x4e>
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	b01d      	add	sp, #116	; 0x74
 80055ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b2:	89ab      	ldrh	r3, [r5, #12]
 80055b4:	0598      	lsls	r0, r3, #22
 80055b6:	d4f7      	bmi.n	80055a8 <_vfiprintf_r+0x44>
 80055b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055ba:	f7ff fa6c 	bl	8004a96 <__retarget_lock_release_recursive>
 80055be:	e7f3      	b.n	80055a8 <_vfiprintf_r+0x44>
 80055c0:	2300      	movs	r3, #0
 80055c2:	9309      	str	r3, [sp, #36]	; 0x24
 80055c4:	2320      	movs	r3, #32
 80055c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055ca:	2330      	movs	r3, #48	; 0x30
 80055cc:	f04f 0901 	mov.w	r9, #1
 80055d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80055d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005784 <_vfiprintf_r+0x220>
 80055d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055dc:	4623      	mov	r3, r4
 80055de:	469a      	mov	sl, r3
 80055e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055e4:	b10a      	cbz	r2, 80055ea <_vfiprintf_r+0x86>
 80055e6:	2a25      	cmp	r2, #37	; 0x25
 80055e8:	d1f9      	bne.n	80055de <_vfiprintf_r+0x7a>
 80055ea:	ebba 0b04 	subs.w	fp, sl, r4
 80055ee:	d00b      	beq.n	8005608 <_vfiprintf_r+0xa4>
 80055f0:	465b      	mov	r3, fp
 80055f2:	4622      	mov	r2, r4
 80055f4:	4629      	mov	r1, r5
 80055f6:	4630      	mov	r0, r6
 80055f8:	f7ff ffa1 	bl	800553e <__sfputs_r>
 80055fc:	3001      	adds	r0, #1
 80055fe:	f000 80a9 	beq.w	8005754 <_vfiprintf_r+0x1f0>
 8005602:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005604:	445a      	add	r2, fp
 8005606:	9209      	str	r2, [sp, #36]	; 0x24
 8005608:	f89a 3000 	ldrb.w	r3, [sl]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f000 80a1 	beq.w	8005754 <_vfiprintf_r+0x1f0>
 8005612:	2300      	movs	r3, #0
 8005614:	f04f 32ff 	mov.w	r2, #4294967295
 8005618:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800561c:	f10a 0a01 	add.w	sl, sl, #1
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	9307      	str	r3, [sp, #28]
 8005624:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005628:	931a      	str	r3, [sp, #104]	; 0x68
 800562a:	4654      	mov	r4, sl
 800562c:	2205      	movs	r2, #5
 800562e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005632:	4854      	ldr	r0, [pc, #336]	; (8005784 <_vfiprintf_r+0x220>)
 8005634:	f7ff ff1c 	bl	8005470 <memchr>
 8005638:	9a04      	ldr	r2, [sp, #16]
 800563a:	b9d8      	cbnz	r0, 8005674 <_vfiprintf_r+0x110>
 800563c:	06d1      	lsls	r1, r2, #27
 800563e:	bf44      	itt	mi
 8005640:	2320      	movmi	r3, #32
 8005642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005646:	0713      	lsls	r3, r2, #28
 8005648:	bf44      	itt	mi
 800564a:	232b      	movmi	r3, #43	; 0x2b
 800564c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005650:	f89a 3000 	ldrb.w	r3, [sl]
 8005654:	2b2a      	cmp	r3, #42	; 0x2a
 8005656:	d015      	beq.n	8005684 <_vfiprintf_r+0x120>
 8005658:	4654      	mov	r4, sl
 800565a:	2000      	movs	r0, #0
 800565c:	f04f 0c0a 	mov.w	ip, #10
 8005660:	9a07      	ldr	r2, [sp, #28]
 8005662:	4621      	mov	r1, r4
 8005664:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005668:	3b30      	subs	r3, #48	; 0x30
 800566a:	2b09      	cmp	r3, #9
 800566c:	d94d      	bls.n	800570a <_vfiprintf_r+0x1a6>
 800566e:	b1b0      	cbz	r0, 800569e <_vfiprintf_r+0x13a>
 8005670:	9207      	str	r2, [sp, #28]
 8005672:	e014      	b.n	800569e <_vfiprintf_r+0x13a>
 8005674:	eba0 0308 	sub.w	r3, r0, r8
 8005678:	fa09 f303 	lsl.w	r3, r9, r3
 800567c:	4313      	orrs	r3, r2
 800567e:	46a2      	mov	sl, r4
 8005680:	9304      	str	r3, [sp, #16]
 8005682:	e7d2      	b.n	800562a <_vfiprintf_r+0xc6>
 8005684:	9b03      	ldr	r3, [sp, #12]
 8005686:	1d19      	adds	r1, r3, #4
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	9103      	str	r1, [sp, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	bfbb      	ittet	lt
 8005690:	425b      	neglt	r3, r3
 8005692:	f042 0202 	orrlt.w	r2, r2, #2
 8005696:	9307      	strge	r3, [sp, #28]
 8005698:	9307      	strlt	r3, [sp, #28]
 800569a:	bfb8      	it	lt
 800569c:	9204      	strlt	r2, [sp, #16]
 800569e:	7823      	ldrb	r3, [r4, #0]
 80056a0:	2b2e      	cmp	r3, #46	; 0x2e
 80056a2:	d10c      	bne.n	80056be <_vfiprintf_r+0x15a>
 80056a4:	7863      	ldrb	r3, [r4, #1]
 80056a6:	2b2a      	cmp	r3, #42	; 0x2a
 80056a8:	d134      	bne.n	8005714 <_vfiprintf_r+0x1b0>
 80056aa:	9b03      	ldr	r3, [sp, #12]
 80056ac:	3402      	adds	r4, #2
 80056ae:	1d1a      	adds	r2, r3, #4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	9203      	str	r2, [sp, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	bfb8      	it	lt
 80056b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80056bc:	9305      	str	r3, [sp, #20]
 80056be:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005788 <_vfiprintf_r+0x224>
 80056c2:	2203      	movs	r2, #3
 80056c4:	4650      	mov	r0, sl
 80056c6:	7821      	ldrb	r1, [r4, #0]
 80056c8:	f7ff fed2 	bl	8005470 <memchr>
 80056cc:	b138      	cbz	r0, 80056de <_vfiprintf_r+0x17a>
 80056ce:	2240      	movs	r2, #64	; 0x40
 80056d0:	9b04      	ldr	r3, [sp, #16]
 80056d2:	eba0 000a 	sub.w	r0, r0, sl
 80056d6:	4082      	lsls	r2, r0
 80056d8:	4313      	orrs	r3, r2
 80056da:	3401      	adds	r4, #1
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e2:	2206      	movs	r2, #6
 80056e4:	4829      	ldr	r0, [pc, #164]	; (800578c <_vfiprintf_r+0x228>)
 80056e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056ea:	f7ff fec1 	bl	8005470 <memchr>
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d03f      	beq.n	8005772 <_vfiprintf_r+0x20e>
 80056f2:	4b27      	ldr	r3, [pc, #156]	; (8005790 <_vfiprintf_r+0x22c>)
 80056f4:	bb1b      	cbnz	r3, 800573e <_vfiprintf_r+0x1da>
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	3307      	adds	r3, #7
 80056fa:	f023 0307 	bic.w	r3, r3, #7
 80056fe:	3308      	adds	r3, #8
 8005700:	9303      	str	r3, [sp, #12]
 8005702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005704:	443b      	add	r3, r7
 8005706:	9309      	str	r3, [sp, #36]	; 0x24
 8005708:	e768      	b.n	80055dc <_vfiprintf_r+0x78>
 800570a:	460c      	mov	r4, r1
 800570c:	2001      	movs	r0, #1
 800570e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005712:	e7a6      	b.n	8005662 <_vfiprintf_r+0xfe>
 8005714:	2300      	movs	r3, #0
 8005716:	f04f 0c0a 	mov.w	ip, #10
 800571a:	4619      	mov	r1, r3
 800571c:	3401      	adds	r4, #1
 800571e:	9305      	str	r3, [sp, #20]
 8005720:	4620      	mov	r0, r4
 8005722:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005726:	3a30      	subs	r2, #48	; 0x30
 8005728:	2a09      	cmp	r2, #9
 800572a:	d903      	bls.n	8005734 <_vfiprintf_r+0x1d0>
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0c6      	beq.n	80056be <_vfiprintf_r+0x15a>
 8005730:	9105      	str	r1, [sp, #20]
 8005732:	e7c4      	b.n	80056be <_vfiprintf_r+0x15a>
 8005734:	4604      	mov	r4, r0
 8005736:	2301      	movs	r3, #1
 8005738:	fb0c 2101 	mla	r1, ip, r1, r2
 800573c:	e7f0      	b.n	8005720 <_vfiprintf_r+0x1bc>
 800573e:	ab03      	add	r3, sp, #12
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	462a      	mov	r2, r5
 8005744:	4630      	mov	r0, r6
 8005746:	4b13      	ldr	r3, [pc, #76]	; (8005794 <_vfiprintf_r+0x230>)
 8005748:	a904      	add	r1, sp, #16
 800574a:	f3af 8000 	nop.w
 800574e:	4607      	mov	r7, r0
 8005750:	1c78      	adds	r0, r7, #1
 8005752:	d1d6      	bne.n	8005702 <_vfiprintf_r+0x19e>
 8005754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005756:	07d9      	lsls	r1, r3, #31
 8005758:	d405      	bmi.n	8005766 <_vfiprintf_r+0x202>
 800575a:	89ab      	ldrh	r3, [r5, #12]
 800575c:	059a      	lsls	r2, r3, #22
 800575e:	d402      	bmi.n	8005766 <_vfiprintf_r+0x202>
 8005760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005762:	f7ff f998 	bl	8004a96 <__retarget_lock_release_recursive>
 8005766:	89ab      	ldrh	r3, [r5, #12]
 8005768:	065b      	lsls	r3, r3, #25
 800576a:	f53f af1d 	bmi.w	80055a8 <_vfiprintf_r+0x44>
 800576e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005770:	e71c      	b.n	80055ac <_vfiprintf_r+0x48>
 8005772:	ab03      	add	r3, sp, #12
 8005774:	9300      	str	r3, [sp, #0]
 8005776:	462a      	mov	r2, r5
 8005778:	4630      	mov	r0, r6
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <_vfiprintf_r+0x230>)
 800577c:	a904      	add	r1, sp, #16
 800577e:	f7ff fc6f 	bl	8005060 <_printf_i>
 8005782:	e7e4      	b.n	800574e <_vfiprintf_r+0x1ea>
 8005784:	080062f0 	.word	0x080062f0
 8005788:	080062f6 	.word	0x080062f6
 800578c:	080062fa 	.word	0x080062fa
 8005790:	00000000 	.word	0x00000000
 8005794:	0800553f 	.word	0x0800553f

08005798 <__swbuf_r>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	460e      	mov	r6, r1
 800579c:	4614      	mov	r4, r2
 800579e:	4605      	mov	r5, r0
 80057a0:	b118      	cbz	r0, 80057aa <__swbuf_r+0x12>
 80057a2:	6a03      	ldr	r3, [r0, #32]
 80057a4:	b90b      	cbnz	r3, 80057aa <__swbuf_r+0x12>
 80057a6:	f7fe ffd1 	bl	800474c <__sinit>
 80057aa:	69a3      	ldr	r3, [r4, #24]
 80057ac:	60a3      	str	r3, [r4, #8]
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	071a      	lsls	r2, r3, #28
 80057b2:	d525      	bpl.n	8005800 <__swbuf_r+0x68>
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	b31b      	cbz	r3, 8005800 <__swbuf_r+0x68>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	6922      	ldr	r2, [r4, #16]
 80057bc:	b2f6      	uxtb	r6, r6
 80057be:	1a98      	subs	r0, r3, r2
 80057c0:	6963      	ldr	r3, [r4, #20]
 80057c2:	4637      	mov	r7, r6
 80057c4:	4283      	cmp	r3, r0
 80057c6:	dc04      	bgt.n	80057d2 <__swbuf_r+0x3a>
 80057c8:	4621      	mov	r1, r4
 80057ca:	4628      	mov	r0, r5
 80057cc:	f7ff fdec 	bl	80053a8 <_fflush_r>
 80057d0:	b9e0      	cbnz	r0, 800580c <__swbuf_r+0x74>
 80057d2:	68a3      	ldr	r3, [r4, #8]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	60a3      	str	r3, [r4, #8]
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	6022      	str	r2, [r4, #0]
 80057de:	701e      	strb	r6, [r3, #0]
 80057e0:	6962      	ldr	r2, [r4, #20]
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d004      	beq.n	80057f2 <__swbuf_r+0x5a>
 80057e8:	89a3      	ldrh	r3, [r4, #12]
 80057ea:	07db      	lsls	r3, r3, #31
 80057ec:	d506      	bpl.n	80057fc <__swbuf_r+0x64>
 80057ee:	2e0a      	cmp	r6, #10
 80057f0:	d104      	bne.n	80057fc <__swbuf_r+0x64>
 80057f2:	4621      	mov	r1, r4
 80057f4:	4628      	mov	r0, r5
 80057f6:	f7ff fdd7 	bl	80053a8 <_fflush_r>
 80057fa:	b938      	cbnz	r0, 800580c <__swbuf_r+0x74>
 80057fc:	4638      	mov	r0, r7
 80057fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005800:	4621      	mov	r1, r4
 8005802:	4628      	mov	r0, r5
 8005804:	f000 f806 	bl	8005814 <__swsetup_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	d0d5      	beq.n	80057b8 <__swbuf_r+0x20>
 800580c:	f04f 37ff 	mov.w	r7, #4294967295
 8005810:	e7f4      	b.n	80057fc <__swbuf_r+0x64>
	...

08005814 <__swsetup_r>:
 8005814:	b538      	push	{r3, r4, r5, lr}
 8005816:	4b2a      	ldr	r3, [pc, #168]	; (80058c0 <__swsetup_r+0xac>)
 8005818:	4605      	mov	r5, r0
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	460c      	mov	r4, r1
 800581e:	b118      	cbz	r0, 8005828 <__swsetup_r+0x14>
 8005820:	6a03      	ldr	r3, [r0, #32]
 8005822:	b90b      	cbnz	r3, 8005828 <__swsetup_r+0x14>
 8005824:	f7fe ff92 	bl	800474c <__sinit>
 8005828:	89a3      	ldrh	r3, [r4, #12]
 800582a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800582e:	0718      	lsls	r0, r3, #28
 8005830:	d422      	bmi.n	8005878 <__swsetup_r+0x64>
 8005832:	06d9      	lsls	r1, r3, #27
 8005834:	d407      	bmi.n	8005846 <__swsetup_r+0x32>
 8005836:	2309      	movs	r3, #9
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800583e:	f04f 30ff 	mov.w	r0, #4294967295
 8005842:	81a3      	strh	r3, [r4, #12]
 8005844:	e034      	b.n	80058b0 <__swsetup_r+0x9c>
 8005846:	0758      	lsls	r0, r3, #29
 8005848:	d512      	bpl.n	8005870 <__swsetup_r+0x5c>
 800584a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584c:	b141      	cbz	r1, 8005860 <__swsetup_r+0x4c>
 800584e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005852:	4299      	cmp	r1, r3
 8005854:	d002      	beq.n	800585c <__swsetup_r+0x48>
 8005856:	4628      	mov	r0, r5
 8005858:	f7ff f93c 	bl	8004ad4 <_free_r>
 800585c:	2300      	movs	r3, #0
 800585e:	6363      	str	r3, [r4, #52]	; 0x34
 8005860:	89a3      	ldrh	r3, [r4, #12]
 8005862:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	2300      	movs	r3, #0
 800586a:	6063      	str	r3, [r4, #4]
 800586c:	6923      	ldr	r3, [r4, #16]
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	f043 0308 	orr.w	r3, r3, #8
 8005876:	81a3      	strh	r3, [r4, #12]
 8005878:	6923      	ldr	r3, [r4, #16]
 800587a:	b94b      	cbnz	r3, 8005890 <__swsetup_r+0x7c>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005886:	d003      	beq.n	8005890 <__swsetup_r+0x7c>
 8005888:	4621      	mov	r1, r4
 800588a:	4628      	mov	r0, r5
 800588c:	f000 f88b 	bl	80059a6 <__smakebuf_r>
 8005890:	89a0      	ldrh	r0, [r4, #12]
 8005892:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005896:	f010 0301 	ands.w	r3, r0, #1
 800589a:	d00a      	beq.n	80058b2 <__swsetup_r+0x9e>
 800589c:	2300      	movs	r3, #0
 800589e:	60a3      	str	r3, [r4, #8]
 80058a0:	6963      	ldr	r3, [r4, #20]
 80058a2:	425b      	negs	r3, r3
 80058a4:	61a3      	str	r3, [r4, #24]
 80058a6:	6923      	ldr	r3, [r4, #16]
 80058a8:	b943      	cbnz	r3, 80058bc <__swsetup_r+0xa8>
 80058aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058ae:	d1c4      	bne.n	800583a <__swsetup_r+0x26>
 80058b0:	bd38      	pop	{r3, r4, r5, pc}
 80058b2:	0781      	lsls	r1, r0, #30
 80058b4:	bf58      	it	pl
 80058b6:	6963      	ldrpl	r3, [r4, #20]
 80058b8:	60a3      	str	r3, [r4, #8]
 80058ba:	e7f4      	b.n	80058a6 <__swsetup_r+0x92>
 80058bc:	2000      	movs	r0, #0
 80058be:	e7f7      	b.n	80058b0 <__swsetup_r+0x9c>
 80058c0:	20000068 	.word	0x20000068

080058c4 <_raise_r>:
 80058c4:	291f      	cmp	r1, #31
 80058c6:	b538      	push	{r3, r4, r5, lr}
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	d904      	bls.n	80058d8 <_raise_r+0x14>
 80058ce:	2316      	movs	r3, #22
 80058d0:	6003      	str	r3, [r0, #0]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80058da:	b112      	cbz	r2, 80058e2 <_raise_r+0x1e>
 80058dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80058e0:	b94b      	cbnz	r3, 80058f6 <_raise_r+0x32>
 80058e2:	4620      	mov	r0, r4
 80058e4:	f000 f830 	bl	8005948 <_getpid_r>
 80058e8:	462a      	mov	r2, r5
 80058ea:	4601      	mov	r1, r0
 80058ec:	4620      	mov	r0, r4
 80058ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058f2:	f000 b817 	b.w	8005924 <_kill_r>
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d00a      	beq.n	8005910 <_raise_r+0x4c>
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	d103      	bne.n	8005906 <_raise_r+0x42>
 80058fe:	2316      	movs	r3, #22
 8005900:	6003      	str	r3, [r0, #0]
 8005902:	2001      	movs	r0, #1
 8005904:	e7e7      	b.n	80058d6 <_raise_r+0x12>
 8005906:	2400      	movs	r4, #0
 8005908:	4628      	mov	r0, r5
 800590a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800590e:	4798      	blx	r3
 8005910:	2000      	movs	r0, #0
 8005912:	e7e0      	b.n	80058d6 <_raise_r+0x12>

08005914 <raise>:
 8005914:	4b02      	ldr	r3, [pc, #8]	; (8005920 <raise+0xc>)
 8005916:	4601      	mov	r1, r0
 8005918:	6818      	ldr	r0, [r3, #0]
 800591a:	f7ff bfd3 	b.w	80058c4 <_raise_r>
 800591e:	bf00      	nop
 8005920:	20000068 	.word	0x20000068

08005924 <_kill_r>:
 8005924:	b538      	push	{r3, r4, r5, lr}
 8005926:	2300      	movs	r3, #0
 8005928:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_kill_r+0x20>)
 800592a:	4604      	mov	r4, r0
 800592c:	4608      	mov	r0, r1
 800592e:	4611      	mov	r1, r2
 8005930:	602b      	str	r3, [r5, #0]
 8005932:	f7fc fa3c 	bl	8001dae <_kill>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	d102      	bne.n	8005940 <_kill_r+0x1c>
 800593a:	682b      	ldr	r3, [r5, #0]
 800593c:	b103      	cbz	r3, 8005940 <_kill_r+0x1c>
 800593e:	6023      	str	r3, [r4, #0]
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	bf00      	nop
 8005944:	200005a4 	.word	0x200005a4

08005948 <_getpid_r>:
 8005948:	f7fc ba2a 	b.w	8001da0 <_getpid>

0800594c <_malloc_usable_size_r>:
 800594c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005950:	1f18      	subs	r0, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	bfbc      	itt	lt
 8005956:	580b      	ldrlt	r3, [r1, r0]
 8005958:	18c0      	addlt	r0, r0, r3
 800595a:	4770      	bx	lr

0800595c <__swhatbuf_r>:
 800595c:	b570      	push	{r4, r5, r6, lr}
 800595e:	460c      	mov	r4, r1
 8005960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005964:	4615      	mov	r5, r2
 8005966:	2900      	cmp	r1, #0
 8005968:	461e      	mov	r6, r3
 800596a:	b096      	sub	sp, #88	; 0x58
 800596c:	da0c      	bge.n	8005988 <__swhatbuf_r+0x2c>
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	2100      	movs	r1, #0
 8005972:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005976:	bf0c      	ite	eq
 8005978:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800597c:	2340      	movne	r3, #64	; 0x40
 800597e:	2000      	movs	r0, #0
 8005980:	6031      	str	r1, [r6, #0]
 8005982:	602b      	str	r3, [r5, #0]
 8005984:	b016      	add	sp, #88	; 0x58
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	466a      	mov	r2, sp
 800598a:	f000 f849 	bl	8005a20 <_fstat_r>
 800598e:	2800      	cmp	r0, #0
 8005990:	dbed      	blt.n	800596e <__swhatbuf_r+0x12>
 8005992:	9901      	ldr	r1, [sp, #4]
 8005994:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005998:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800599c:	4259      	negs	r1, r3
 800599e:	4159      	adcs	r1, r3
 80059a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059a4:	e7eb      	b.n	800597e <__swhatbuf_r+0x22>

080059a6 <__smakebuf_r>:
 80059a6:	898b      	ldrh	r3, [r1, #12]
 80059a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059aa:	079d      	lsls	r5, r3, #30
 80059ac:	4606      	mov	r6, r0
 80059ae:	460c      	mov	r4, r1
 80059b0:	d507      	bpl.n	80059c2 <__smakebuf_r+0x1c>
 80059b2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	6123      	str	r3, [r4, #16]
 80059ba:	2301      	movs	r3, #1
 80059bc:	6163      	str	r3, [r4, #20]
 80059be:	b002      	add	sp, #8
 80059c0:	bd70      	pop	{r4, r5, r6, pc}
 80059c2:	466a      	mov	r2, sp
 80059c4:	ab01      	add	r3, sp, #4
 80059c6:	f7ff ffc9 	bl	800595c <__swhatbuf_r>
 80059ca:	9900      	ldr	r1, [sp, #0]
 80059cc:	4605      	mov	r5, r0
 80059ce:	4630      	mov	r0, r6
 80059d0:	f7ff f8f0 	bl	8004bb4 <_malloc_r>
 80059d4:	b948      	cbnz	r0, 80059ea <__smakebuf_r+0x44>
 80059d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059da:	059a      	lsls	r2, r3, #22
 80059dc:	d4ef      	bmi.n	80059be <__smakebuf_r+0x18>
 80059de:	f023 0303 	bic.w	r3, r3, #3
 80059e2:	f043 0302 	orr.w	r3, r3, #2
 80059e6:	81a3      	strh	r3, [r4, #12]
 80059e8:	e7e3      	b.n	80059b2 <__smakebuf_r+0xc>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	6020      	str	r0, [r4, #0]
 80059ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f2:	81a3      	strh	r3, [r4, #12]
 80059f4:	9b00      	ldr	r3, [sp, #0]
 80059f6:	6120      	str	r0, [r4, #16]
 80059f8:	6163      	str	r3, [r4, #20]
 80059fa:	9b01      	ldr	r3, [sp, #4]
 80059fc:	b15b      	cbz	r3, 8005a16 <__smakebuf_r+0x70>
 80059fe:	4630      	mov	r0, r6
 8005a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a04:	f000 f81e 	bl	8005a44 <_isatty_r>
 8005a08:	b128      	cbz	r0, 8005a16 <__smakebuf_r+0x70>
 8005a0a:	89a3      	ldrh	r3, [r4, #12]
 8005a0c:	f023 0303 	bic.w	r3, r3, #3
 8005a10:	f043 0301 	orr.w	r3, r3, #1
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	89a3      	ldrh	r3, [r4, #12]
 8005a18:	431d      	orrs	r5, r3
 8005a1a:	81a5      	strh	r5, [r4, #12]
 8005a1c:	e7cf      	b.n	80059be <__smakebuf_r+0x18>
	...

08005a20 <_fstat_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	2300      	movs	r3, #0
 8005a24:	4d06      	ldr	r5, [pc, #24]	; (8005a40 <_fstat_r+0x20>)
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	f7fc fa1c 	bl	8001e6a <_fstat>
 8005a32:	1c43      	adds	r3, r0, #1
 8005a34:	d102      	bne.n	8005a3c <_fstat_r+0x1c>
 8005a36:	682b      	ldr	r3, [r5, #0]
 8005a38:	b103      	cbz	r3, 8005a3c <_fstat_r+0x1c>
 8005a3a:	6023      	str	r3, [r4, #0]
 8005a3c:	bd38      	pop	{r3, r4, r5, pc}
 8005a3e:	bf00      	nop
 8005a40:	200005a4 	.word	0x200005a4

08005a44 <_isatty_r>:
 8005a44:	b538      	push	{r3, r4, r5, lr}
 8005a46:	2300      	movs	r3, #0
 8005a48:	4d05      	ldr	r5, [pc, #20]	; (8005a60 <_isatty_r+0x1c>)
 8005a4a:	4604      	mov	r4, r0
 8005a4c:	4608      	mov	r0, r1
 8005a4e:	602b      	str	r3, [r5, #0]
 8005a50:	f7fc fa1a 	bl	8001e88 <_isatty>
 8005a54:	1c43      	adds	r3, r0, #1
 8005a56:	d102      	bne.n	8005a5e <_isatty_r+0x1a>
 8005a58:	682b      	ldr	r3, [r5, #0]
 8005a5a:	b103      	cbz	r3, 8005a5e <_isatty_r+0x1a>
 8005a5c:	6023      	str	r3, [r4, #0]
 8005a5e:	bd38      	pop	{r3, r4, r5, pc}
 8005a60:	200005a4 	.word	0x200005a4

08005a64 <_init>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	bf00      	nop
 8005a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a6a:	bc08      	pop	{r3}
 8005a6c:	469e      	mov	lr, r3
 8005a6e:	4770      	bx	lr

08005a70 <_fini>:
 8005a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a72:	bf00      	nop
 8005a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a76:	bc08      	pop	{r3}
 8005a78:	469e      	mov	lr, r3
 8005a7a:	4770      	bx	lr
