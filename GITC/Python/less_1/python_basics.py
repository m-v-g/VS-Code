# -*- coding: utf-8 -*-
"""Python_basics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a4sCKFwgDs_g_r9zNS0CmCFUHLAOuAVQ

Integers and Floats ( + operations )
"""

integer_num = 12
float_num = 7.8

"""Sum"""

integer_num + integer_num # sum of two integers is an integer

float_num + float_num # sum of two floats is a float

float_num + integer_num

round(12.3)

int(12.78)

float(12)

type(12.7)

type(55)

12.5 + 12.5

"""Substraction"""

12 - 6

6.7 - 0.7

4.2 - 1

34 - 100

"""Multiplication"""

5 * 10

4.5 * 2

2.2 * 2.2

10 ** 2 # exponent

5 ** 3

"""Division"""

12 / 6 # the result of a division is a float number

100 / 0.5

100 / 30

100/18



100 // 18

100 % 30 # remainder

"""We have already covered the main arithmetic operations! 
That was quite simple, right? ))

String type
"""

string_variable = 'hello world' 

a = 'a'
a = "hjh"

#immutable type

string_variable[0] #  it has indexing

string_variable[0] = "H" # we can not change it

string_variable = 'Hello world'

string_variable[5] # the space is also taken into count

string_variable + string_variable #concatenation

string_variable * 3 # multiplication

string_variable = 'hello world'
print(string_variable.capitalize())

string_variable = string_variable.capitalize()

"h" == "H"

string_variable

string_variable.isalpha()

string_variable = 'hello'
string_variable.isalpha()

string_variable.upper()

string_variable = 'HeLlo'
string_variable.lower()

string_variable = 'this is the title of an article'
string_variable.title()

string_variable = '1234'
string_variable.isdigit()

string_variable.split()

string_variable = 'text to show how string is being split'
string_variable.split()

string_variable[-1]

list('hi there')

string_variable = 'the average number of daily users is 100K'
string_variable.find('200') # substring does not exist

string_variable = 'the average number of daily users is 100K'
string_variable.find('aver') # substring exists -> index from where 
                             # subsstring starts

string_variable = 'the average number of daily users is 100K'
string_variable.index('the') # returns the start index

string_variable.index('goal') # will raise an error

string_variable.startswith('the')

string_variable.startswith('The')

string_variable.endswith('the')

string_variable.endswith('K')

string_variable.replace('100K','500K')

string_variable # don't let python to confuse you
                # it still did not change it
                # just created a new one

string_variable = '  the average number of daily users is 100K '
string_variable.strip() # returns without white-spaces 
                        # at the end & beginning

# Slicing
string_variable = 'the average number of daily users is 100K'
string_variable[4:11] # will not take the last index

string_variable[0]

"""Slicing"""

string_variable[0:11]

string_variable

string_variable[1:7:2] # 2 is the step here

string_variable[5:-2]

string_variable[-2:3:-2]

string_variable[::-1] #reverse



"""Input"""

name1 = input('please input your name')
print(name1)

age1 = int(input('please input your age'))
age1
type(age1)



"""Boolean"""

a = True
b = False

type(a)

5+5 == 7+3

10 % 2 == 0

60 % 6 != 0

'abc' == 'abc'

'abc' <'bbc'

'abc' <'abcd'

"""List"""

list_variable = [1,2,3,4,5]
list_variable[1]

list_variable[1] = 200
list_variable #mutable type

list_variable[-1]

list_variable[1:3]

list_variable[1:3] = (44,55) 
list_variable

list_variable[2] = 'hi'
list_variable

list_variable = [1,2,3, [400,600]] 
list_variable[3][1]

list_variable[3]

list_variable.append(80)
list_variable

list_variable.insert(3,'hello')

list_variable

list_variable.extend([1,2])

list_variable

list_variable + [7000,9000]

list_variable.remove('hello') # only first met

list_variable

list_variable.remove('bye')

pop_item = list_variable.pop()
pop_item

list_variable

list_variable.clear()

list_variable

list_variable = [1,2,3, [400,600]]
list_variable.index(1) # index of value

list_variable2 = list_variable.copy()
list_variable2

# why copy?

list_variable2[0] = 'hi'
print(list_variable2)
print(list_variable)

list_variable3 = list_variable 
list_variable3

len(list_variable3)

list_variable3[0] = 'hi' # both change
print(list_variable3)
print(list_variable)

list_variable3.count(2) # count of value

list_variable = [3,10,45,99,1,4,1000, 4890]
list_variable.sort(reverse=True)
list_variable

# reverse

list_variable.reverse()
list_variable

list_variable = [3,10,45,99,1,4,1000, 4890]
# list_variable.sort()
list_variable[::-1] # same thing

"""Set"""

#unique items
#no order 
#no indexing
#Mutable

set_variable = set([1,2,2,3,4,6,1,9])
print(set_variable)

# get unique values in list

our_list = [1,1,2,2,3,6,5,4,4,8,9,0,1,2,45,66,78,12]
print(list(set(our_list)))

# get difference

# items that are in set1 and not in set2

set1 = set([1,2,3,4,6])
set2 = set([3,4,6])

set1.difference(set2)

set2.add(20)

set2

set2.add(3)

set2

len(set2)

k = frozenset([1,2,3,4])
k2 = set([1,2,3])

k2.add(20)
k2

k.add(2000)
k

"""Tuple"""

our_tuple = (1,2,3,'hi')

our_tuple[0]

our_tuple[0] = 20

our_tuple.index('hi')

our_tuple.count(2)

len(our_tuple)

min(our_tuple)

our_tuple = (1,2,3,4,90,-1,0)
min(our_tuple)

our_tuple = (1,2,3,4,90,-1,0)
max(our_tuple)

"""Dict"""

shopping_dict = {'apple' : 100,
                 'orange' : 5,
                 'banana' : 2,
                 'strawberries' : 1}

shopping_dict['user_id']

shopping_dict.keys()

shopping_dict.values()

shopping_dict2 = shopping_dict.fromkeys(['a','b','c'], 0)
shopping_dict2

shopping_dict.get('apple', 'sorry, no apples left')

shopping_dict.get('mango', 'sorry, no mango left')

shopping_dict.items()

for i in shopping_dict.items():
  print(i[0])

val1 = shopping_dict.pop('apple')
print(val1)

shopping_dict

d={"straight" : "Graham Chapman",
 "curved" : "John Cleese",
 "drawn" : "Terry Gilliam",
 "mild" : "Michael Palin"}
 
print(d)

d["extra"] = "Graeme Stewart" # Add or mutate values just by setting them
d["curved"] = "some other guy"
print(d["extra"], "and", d["curved"])

print(d)

del d["extra"] # Use the del operator to remove entries
"extra" in d # This is the notation to ask if a certain key exists in the
# dictionary

"straight" in d

print(d)

"""None / Null"""

not_here = None
print(not_here)

type(not_here)

not_here2 = None
not_here == not_here2

"""If Elif Else blocks"""

input_number = int(input('please input the number'))

# if input_number == 5:
#   print('your number is 5')
# else:
#   print('not 5')

if input_number % 2 != 0:
  print('your number is odd')
else:
  print('your number is even')

input_sentence = input('insert sentence')
keyword = input('keyword')

if keyword in input_sentence:
  print(f'keyword starts from index {input_sentence.find(keyword)}')
else:
  print(f' inserted word {keyword} not found')

num1 = int(input('number 1  '))
num2 = int(input('number 2  '))

if num1 > num2:
  print(num1//num2)
elif num1 < num2:
  print(num2 % num1)
else:
    print('equal')

"""For loops"""

our_list1 = [1,2,3,4,5,6]

for item in our_list1:
  print(item)

our_list1 = [1,2,3,4,5,6]
result = 0
for item in our_list1:
  result += item # += -= *=

print(result)

our_list1 = [1,2,3,4,5,6]
result = 0
for item in our_list1:
  if item % 2 == 0:
    result += item

print(result)

our_list1 = [1,2,'hey',4,5,6]
result = 0
for item in our_list1:
  if isinstance(item, int):
    result += item

print(result)

our_list1 = [1,2,'hey',4,5,6, -20]
result = 0
for item in our_list1:
  if isinstance(item, int) and item > 0: #or
    result += item

print(result)

our_list1 = [1,2,'hey',4,5,12,22,334,20,6, -20]

for index in range(len(our_list1)): # -> 0, 1, 2, 3, ......, 10 
  if isinstance(our_list1[index], int) and our_list1[index] % 2 != 0:
      our_list1[index] = our_list1[index] ** 2

print(our_list1) # 5 -> 25

"""While loop"""

i=0
while (i<5):
 print(i)
 i+=1

# Program to add natural
# numbers up to n
# sum = 1+2+3+...+n

# To take input from the user,
# n = int(input("Enter n: "))

n = int(input('Enter n:  '))

# initialize sum and counter
sum = 0
i = 1

while i <= n:
    sum = sum + i
    i = i+1    # update counter

# print the sum
print("The sum is", sum)

'''Example to illustrate
the use of else statement
with the while loop'''

counter = 0

while counter < 3:
    print("Inside loop")
    counter += 1
else:
    print("Inside else")

"""Continue / Break"""

words = ['bark', 'nothing', 'roll over', 'die', 'eat']
for cmd in words:
 if cmd == 'nothing':
  continue
 if cmd == 'die':
  break
 print(cmd)

i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1

i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)

"""List Comprehensions"""

our_list = [ x**2 for x in [1, 3, 5, 7, 11, 13, 17] ]
our_list

second_list = [ x**2 for x in range(1,100) if x%10 == 0 ]
second_list

"""Dict Comprehensions"""

our_dict = {x: x**2 for x in range(1,100) if x%10 == 0 }
our_dict

"""Functions"""

def square_sum(i, j):
  '''Function to calculate square sum'''
  result = i ** 2 + j ** 2
  return result

help(square_sum) # This is the same as square_sum? in ipython

# Program to display the Fibonacci sequence up to n-th term

nterms = int(input("How many terms? "))

# first two terms
n1, n2 = 0, 1
count = 0

# check if the number of terms is valid
if nterms <= 0:
   print("Please enter a positive integer")
# if there is only one term, return n1
elif nterms == 1:
   print("Fibonacci sequence upto",nterms,":")
   print(n1)
# generate fibonacci sequence
else:
   print("Fibonacci sequence:")
   while count < nterms:
       print(n1)
       nth = n1 + n2
       # update values
       n1 = n2
       n2 = nth
       count += 1

def mill(debug, *args, mesg="starting", **kwargs):
 '''Process all arguments'''
 print("debug:", debug)
 print(mesg)
 print("These are the positional arguments", args)
 print("These are the named arguments", kwargs)

 
mill(True, 1, 2, 4, mesg="hello", alice="good", bob="good", eve="spy")

def checking(check_item, *args, mesg="checking in use", **kwargs):
  for item in args:
    if item**2 == check_item:
        mesg = f'item found in args: {item}'
  if check_item in kwargs.values():
    mesg = f' {check_item} item found in kwargs'

  return mesg

print(checking(25,1,2,3,4,0, mesg="no result", num1 = 4, num2 = 25))

"""Hackerrank problems

https://www.hackerrank.com/challenges/py-if-else/problem?isFullScreen=true 

https://www.hackerrank.com/challenges/python-arithmetic-operators/problem?isFullScreen=true


https://www.hackerrank.com/challenges/python-division/problem?isFullScreen=true


https://www.hackerrank.com/challenges/python-loops/problem?isFullScreen=true
"""









